<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Another blog</title>
    <link>https://cychong47.github.io/tags/python/</link>
    <description>Recent content in Python on Another blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Dec 2018 06:55:44 +0900</lastBuildDate>
    
	<atom:link href="https://cychong47.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get the latest jetpack plugin</title>
      <link>https://cychong47.github.io/post/2018/get-the-latest-jetpack-plugin/</link>
      <pubDate>Sun, 16 Dec 2018 06:55:44 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2018/get-the-latest-jetpack-plugin/</guid>
      <description>http://sosa0sa.com:2368/use-jetpack-for-wordpress-5-0/ 의 연장선. Jetpack plugin의 최신 버전을 알아내서 자동으로 해당 바이너리 파일을 다운로드 받아 보자.
몇 가지 module 을 사용하는데 필요한 module은 https://realpython.com/python-web-scraping-practical-introduction/ 을 참고해서 설치
$ python3 -m venv venv $ . ./venv/bin/activate $ pip3 install requests BeautifulSoup4 webscrap.py from requests import get from requests.exceptions import RequestException from contextlib import closing from bs4 import BeautifulSoup from urllib.request import * &#39;&#39;&#39; https://realpython.com/python-web-scraping-practical-introduction/ &#39;&#39;&#39; def simple_get(url): &amp;quot;&amp;quot;&amp;quot; Attempts to get the content at `url` by making an HTTP GET request.</description>
    </item>
    
    <item>
      <title>Grafana, influxDB and python</title>
      <link>https://cychong47.github.io/post/2018/grafana-influxdb-and-python/</link>
      <pubDate>Wed, 06 Jun 2018 04:33:06 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2018/grafana-influxdb-and-python/</guid>
      <description>Time-series data를 python을 이용해서 influxDB에 저장하고, Grafana로 그래프를 보여주는 예제
https://github.com/cychong47/influxdb_example.git
Install Grafana and influxDB Install Grafana 직접 호스트에 설치할 수도 있지만, 세상 편하게 만들어준 docker를 이용해서 grafana, influxdb등을 설치하자.
mbpr15:~ cychong$ docker pull grafana/grafana Using default tag: latest latest: Pulling from grafana/grafana f2aa67a397c4: Pull complete 89573effc7c8: Pull complete b55c103da375: Pull complete Digest: sha256:364bec4a39ecbec744ea4270aae35f6554eb6f2047b3ee08f7b5f1134857c32c Status: Downloaded newer image for grafana/grafana:latest Start grafana
mbpr15:~ cychong$ docker run -d -p 3000:3000 —name grafana grafana/grafana 148894d7009259b02b04e1a98467f549400be91f9b055f8686557d69b9339e4b Install influxDB influxdb도 docker 명령어 하나로 설치</description>
    </item>
    
    <item>
      <title>FTP server is gone from High Siera OSX Server</title>
      <link>https://cychong47.github.io/post/2017/ftp-server-is-gone-from-high-siera-osx-server/</link>
      <pubDate>Sat, 07 Oct 2017 00:19:27 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2017/ftp-server-is-gone-from-high-siera-osx-server/</guid>
      <description>It is gone finally&amp;hellip; [macOS Server 5.4 changes in High Sierra you need to know about!])https://www.imore.com/changes-macos-server-54-high-sierra)
 File Transfer Protocol (FTP): A longtime a security risk, for example for sending password information in clear text, FTP support will be removed from macOS server if you upgrade.
 As my xeros printer/scanner suppors only ftp or samba(which is much much slower than the ftp) I have to run my own ftp server in my mac mini.</description>
    </item>
    
    <item>
      <title>brew install python</title>
      <link>https://cychong47.github.io/post/2017/brew-install-python/</link>
      <pubDate>Sun, 01 Oct 2017 13:44:47 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2017/brew-install-python/</guid>
      <description>Just for the record as some environments are mentioned
mbpr15:working cychong$ brew install python ==&amp;gt; Installing dependencies for python: readline, sqlite, gdbm, openssl ==&amp;gt; Installing python dependency: readline ==&amp;gt; Downloading https://homebrew.bintray.com/bottles/readline-7.0.3_1.high_sierra.bottle.tar.gz ######################################################################## 100.0% ==&amp;gt; Pouring readline-7.0.3_1.high_sierra.bottle.tar.gz ==&amp;gt; Caveats This formula is keg-only, which means it was not symlinked into /usr/local, because macOS provides the BSD libedit library, which shadows libreadline. In order to prevent conflicts when programs look for libreadline we are defaulting this GNU Readline installation to keg-only.</description>
    </item>
    
    <item>
      <title>Parsing http header with scary</title>
      <link>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</link>
      <pubDate>Sun, 01 Oct 2017 09:36:35 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</guid>
      <description>정규식으로 http 분석 def processHTTP(data): str_method = &amp;quot;&amp;quot; str_uri = &amp;quot;&amp;quot;  정규표현식을 통해 넘어온 데이터에서 METHOD, URI, HTTP 버전 정보등으로 구분함 h = re.search(&amp;quot;(?P&amp;lt;method&amp;gt;(^GET|^POST|^PUT|^DELETE)) (?P&amp;lt;uri&amp;gt;.+) (?P&amp;lt;version&amp;gt;.+)&amp;quot;, data) if not h: return &amp;quot;Error&amp;quot; # 정규표현식에 해당하는 데이터가 없는 경우 Error 를 리턴해줌 # method 로 정의된 부준은 str_method 에 저장 if h.group(&amp;quot;method&amp;quot;): str_method = h.group(&amp;quot;method&amp;quot;) # URI 데이터는 str_uri 에 저장 if h.group(&amp;quot;uri&amp;quot;): str_uri = h.group(&amp;quot;uri&amp;quot;) return str_method,str_uri # method 와 uri 를 리턴해 줌  출처 : http://www.</description>
    </item>
    
    <item>
      <title>how to build IPsec packet with scapy</title>
      <link>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</link>
      <pubDate>Sun, 14 Feb 2016 14:59:42 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</guid>
      <description>import modules $ python &amp;gt;&amp;gt;&amp;gt; from scapy.all import * &amp;gt;&amp;gt;&amp;gt; from scapy.layers.ipsec import * build plaintext packet &amp;gt;&amp;gt;&amp;gt; p = IP(src=&#39;1.1.1.1&#39;, dst=&#39;2.2.2.2&#39;) / TCP(sport=45012, dport=80) / Raw(&#39;testdata&#39;) &amp;gt;&amp;gt;&amp;gt; p = IP(str(p)) setup SA &amp;gt;&amp;gt;&amp;gt; sa = SecurityAssociation(ESP, spi=0xdeadbeef, crypt_algo=&#39;AES-CBC&#39;,crypt_key=&#39;sixteenbytes key&#39;) Encrypt w/o IV &amp;gt;&amp;gt;&amp;gt; e = sa.encrypt(p, 5) &amp;gt;&amp;gt;&amp;gt; e &amp;lt;IP version=4L ihl=5L tos=0x0 len=76 id=1 flags= frag=0L ttl=64 proto=esp chksum=0x747a src=1.1.1.1 dst=2.2.2.2 |&amp;lt;ESP spi=0xdeadbeef seq=5 data=&#39;uD\x7fdj19\xe7\xc4\xff8\x10\xcdQ\xf0\xa6\x1e!\x84\xc3&amp;gt;!\x18\xa6\xf6\xb8\x93\xc6it\x9a\xfc\x1c\xee\xe5C\xcd\xf0\x7fD\xca\x8d\xadKh\xa8\xe5x&#39; |&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; e.show() ###[ IP ]### version = 4L ihl = 5L tos = 0x0 len = 76 id = 1 flags = frag = 0L ttl = 64 proto = esp chksum = 0x747a src = 1.</description>
    </item>
    
    <item>
      <title>fragment missing test with scapy</title>
      <link>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</link>
      <pubDate>Sun, 14 Feb 2016 13:57:41 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</guid>
      <description>다음과 같이 scapy를 이용해서 fragment를 쉽게 만들 수 있다.
from scapy.all import * dip=&amp;quot;10.0.0.1&amp;quot; payload=&amp;quot; &amp;quot;*1000 packet=IP(dst=dip)/UDP(dport=0x1234)/payload frag_list=fragment(packet,fragsize=500) counter=1 for fragment in frag_list: print &amp;quot;Packet no%d&amp;quot; %counter print fragment.show() counter+=1 send(fragment) frag_list에서 counter 변수를 확인해서 전송하지 않으면 간단하게 fragment가 수신되지 않은 경우에 시험할 수 있음.
필요하면 frag_list의 순서를 뒤집는 것도 가능하고, 각 fragment의 offset값을 조정하거나 패킷 크기를 변경하면 다른 비정상 경우도 쉽게 시험할 수 있다.
scapy interactive tutorial</description>
    </item>
    
    <item>
      <title>Introducing Python</title>
      <link>https://cychong47.github.io/post/2016/introducing-python/</link>
      <pubDate>Mon, 08 Feb 2016 13:25:34 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/introducing-python/</guid>
      <description>Introducing Python 을 판교어린이도서관에서 짧게 보고 적은 아이템들
python3 based
Decorator는 공부가 필요한 내용
sys.path : module 검색 경로 __init__.py 파일이 있으면 그 디렉토리를 PKG로 간주함
defaultdic()
Counters()
dicionary는 key의 순서를 보장하지 않음. OrderedDict()로 사전을 정의하면 가능 deque = stack + queue pprint()는 print보다 깔끔하게 출력한다고.
&#39;\uXXX&#39; 유니코드
%10.4s : 10칸의 공간. 문자열 중 4개만 출력
struct &#39;&amp;gt;LL&#39; : &#39;&amp;gt;&#39; Big endian, L : uint32_t
list comprehension : for loop보다 빠름.</description>
    </item>
    
    <item>
      <title>click - python option 처리 모듈</title>
      <link>https://cychong47.github.io/post/2016/click-python-module/</link>
      <pubDate>Fri, 01 Jan 2016 13:45:58 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/click-python-module/</guid>
      <description>http://click.pocoo.org/5/
C로 프로그램을 짤 때 사용할 표준 포맷도 이렇게 해야겠다.
$ python hello.py --help Usage: hello.py [OPTIONS] Simple program that greets NAME for a total of COUNT times. Options: --count INTEGER Number of greetings. --name TEXT The person to greet. --help Show this message and exit. </description>
    </item>
    
    <item>
      <title>Designing a RESTful API with Python and Flask</title>
      <link>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</link>
      <pubDate>Thu, 24 Dec 2015 14:11:59 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</guid>
      <description>Designing a RESTful API with Python and Flask
RESTful API는 URI에 필요한 인자를 다 넘기는 형태라 사용자가 직접 주소를 입력하는 것이 아니라 다른 SW에서 해당 URI를 입력하는 형태로 사용하는 게 자연스러운 거네.</description>
    </item>
    
    <item>
      <title>virtualenv 사용</title>
      <link>https://cychong47.github.io/post/2015/virtualenv/</link>
      <pubDate>Mon, 21 Dec 2015 14:59:29 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/virtualenv/</guid>
      <description>virtualenv 설치
mini-2:~ cychong$ sudo easy_install pip mini-2:~ cychong$ sudo pip install virtualenv  virtualenv로 project directory 생성
mini-2:work cychong$ mkdir click mini-2:work cychong$ cd click/ mini-2:click cychong$ ls mini-2:click cychong$ virtualenv venv New python executable in venv/bin/python Installing setuptools, pip, wheel...done. mini-2:click cychong$ ls venv  virtualenv 환경으로 들어가기
mini-2:click cychong$ . venv/bin/activate  원하는 패키지 설치
(venv)mini-2:click cychong$ pip install Click Collecting Click Downloading click-6.2-py2.py3-none-any.whl (70kB) 100% |████████████████████████████████| 73kB 270kB/s Installing collected packages: Click Successfully installed Click-6.</description>
    </item>
    
    <item>
      <title>(책) Violent Python</title>
      <link>https://cychong47.github.io/post/2014/caeg-violent-python/</link>
      <pubDate>Sat, 27 Sep 2014 16:43:27 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2014/caeg-violent-python/</guid>
      <description>오래만에 재밌는 책을 봤다.
해커를 위한 책이라고 하지만, 해킹에 관한 기법보다는 network application을 작성하는데 유용한 scapy, dpkt 그리고 정규식에 대한 설명이 유용하다. 마침 요 근래 업무용으로 Python을 이용해서 패킷 만들고, 송/수신하는 유틸리티를 만들고 있어 Impacket 모듈을 많이 사용했는데 그것보다 scapy 가 훨씬 편해 보인다.
새 책을 사긴 그렇고 중고책을 하나 구할 까 했는데 알라딘에서 중고책 매입가가 4천원 대. 작년 초에 나온 책인데 너무 싸게 매입하는 게 아닌가
일단 책 보면서 유용하다 싶은 내용을 몇 가지 주제로 나눠 정리했다.</description>
    </item>
    
  </channel>
</rss>