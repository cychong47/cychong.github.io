<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scapy on Another blog</title>
    <link>https://cychong47.github.io/tags/scapy/</link>
    <description>Recent content in scapy on Another blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Oct 2017 09:36:35 +0900</lastBuildDate>
    
	<atom:link href="https://cychong47.github.io/tags/scapy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parsing http header with scary</title>
      <link>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</link>
      <pubDate>Sun, 01 Oct 2017 09:36:35 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</guid>
      <description>정규식으로 http 분석 def processHTTP(data): str_method = &amp;quot;&amp;quot; str_uri = &amp;quot;&amp;quot;  정규표현식을 통해 넘어온 데이터에서 METHOD, URI, HTTP 버전 정보등으로 구분함 h = re.search(&amp;quot;(?P&amp;lt;method&amp;gt;(^GET|^POST|^PUT|^DELETE)) (?P&amp;lt;uri&amp;gt;.+) (?P&amp;lt;version&amp;gt;.+)&amp;quot;, data) if not h: return &amp;quot;Error&amp;quot; # 정규표현식에 해당하는 데이터가 없는 경우 Error 를 리턴해줌 # method 로 정의된 부준은 str_method 에 저장 if h.group(&amp;quot;method&amp;quot;): str_method = h.group(&amp;quot;method&amp;quot;) # URI 데이터는 str_uri 에 저장 if h.group(&amp;quot;uri&amp;quot;): str_uri = h.group(&amp;quot;uri&amp;quot;) return str_method,str_uri # method 와 uri 를 리턴해 줌  출처 : http://www.</description>
    </item>
    
    <item>
      <title>(Scapy) Suppress Scapy warning message</title>
      <link>https://cychong47.github.io/post/2016/scapy-suppress-scapy-warning-message/</link>
      <pubDate>Thu, 03 Mar 2016 14:50:24 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/scapy-suppress-scapy-warning-message/</guid>
      <description>Without Suppressing Scapy IPv6 warning cychong@ubuntu:~$ python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; from scapy.all import * WARNING: No route found for IPv6 destination :: (no default route?) &amp;gt;&amp;gt;&amp;gt; Suppress scapy IPv6 warning cychong@ubuntu:~$ python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. &amp;gt;&amp;gt;&amp;gt; import logging &amp;gt;&amp;gt;&amp;gt; logging.</description>
    </item>
    
    <item>
      <title>how to build IPsec packet with scapy</title>
      <link>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</link>
      <pubDate>Sun, 14 Feb 2016 14:59:42 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</guid>
      <description>import modules $ python &amp;gt;&amp;gt;&amp;gt; from scapy.all import * &amp;gt;&amp;gt;&amp;gt; from scapy.layers.ipsec import * build plaintext packet &amp;gt;&amp;gt;&amp;gt; p = IP(src=&#39;1.1.1.1&#39;, dst=&#39;2.2.2.2&#39;) / TCP(sport=45012, dport=80) / Raw(&#39;testdata&#39;) &amp;gt;&amp;gt;&amp;gt; p = IP(str(p)) setup SA &amp;gt;&amp;gt;&amp;gt; sa = SecurityAssociation(ESP, spi=0xdeadbeef, crypt_algo=&#39;AES-CBC&#39;,crypt_key=&#39;sixteenbytes key&#39;) Encrypt w/o IV &amp;gt;&amp;gt;&amp;gt; e = sa.encrypt(p, 5) &amp;gt;&amp;gt;&amp;gt; e &amp;lt;IP version=4L ihl=5L tos=0x0 len=76 id=1 flags= frag=0L ttl=64 proto=esp chksum=0x747a src=1.1.1.1 dst=2.2.2.2 |&amp;lt;ESP spi=0xdeadbeef seq=5 data=&#39;uD\x7fdj19\xe7\xc4\xff8\x10\xcdQ\xf0\xa6\x1e!\x84\xc3&amp;gt;!\x18\xa6\xf6\xb8\x93\xc6it\x9a\xfc\x1c\xee\xe5C\xcd\xf0\x7fD\xca\x8d\xadKh\xa8\xe5x&#39; |&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; e.show() ###[ IP ]### version = 4L ihl = 5L tos = 0x0 len = 76 id = 1 flags = frag = 0L ttl = 64 proto = esp chksum = 0x747a src = 1.</description>
    </item>
    
    <item>
      <title>fragment missing test with scapy</title>
      <link>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</link>
      <pubDate>Sun, 14 Feb 2016 13:57:41 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</guid>
      <description>다음과 같이 scapy를 이용해서 fragment를 쉽게 만들 수 있다.
from scapy.all import * dip=&amp;quot;10.0.0.1&amp;quot; payload=&amp;quot; &amp;quot;*1000 packet=IP(dst=dip)/UDP(dport=0x1234)/payload frag_list=fragment(packet,fragsize=500) counter=1 for fragment in frag_list: print &amp;quot;Packet no%d&amp;quot; %counter print fragment.show() counter+=1 send(fragment) frag_list에서 counter 변수를 확인해서 전송하지 않으면 간단하게 fragment가 수신되지 않은 경우에 시험할 수 있음.
필요하면 frag_list의 순서를 뒤집는 것도 가능하고, 각 fragment의 offset값을 조정하거나 패킷 크기를 변경하면 다른 비정상 경우도 쉽게 시험할 수 있다.
scapy interactive tutorial</description>
    </item>
    
    <item>
      <title>(책) Violent Python</title>
      <link>https://cychong47.github.io/post/2014/caeg-violent-python/</link>
      <pubDate>Sat, 27 Sep 2014 16:43:27 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2014/caeg-violent-python/</guid>
      <description>오래만에 재밌는 책을 봤다.
해커를 위한 책이라고 하지만, 해킹에 관한 기법보다는 network application을 작성하는데 유용한 scapy, dpkt 그리고 정규식에 대한 설명이 유용하다. 마침 요 근래 업무용으로 Python을 이용해서 패킷 만들고, 송/수신하는 유틸리티를 만들고 있어 Impacket 모듈을 많이 사용했는데 그것보다 scapy 가 훨씬 편해 보인다.
새 책을 사긴 그렇고 중고책을 하나 구할 까 했는데 알라딘에서 중고책 매입가가 4천원 대. 작년 초에 나온 책인데 너무 싸게 매입하는 게 아닌가
일단 책 보면서 유용하다 싶은 내용을 몇 가지 주제로 나눠 정리했다.</description>
    </item>
    
  </channel>
</rss>