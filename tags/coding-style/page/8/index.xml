<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Style on Another blog</title>
    <link>https://cychong47.github.io/tags/coding-style/</link>
    <description>Recent content in Coding Style on Another blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 25 May 2015 12:44:28 +0900</lastBuildDate>
    
        <atom:link href="https://cychong47.github.io/tags/coding-style/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fragment missing test with scapy</title>
      <link>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</link>
      <pubDate>Sun, 14 Feb 2016 13:57:41 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</guid>
      <description>다음과 같이 scapy를 이용해서 fragment를 쉽게 만들 수 있다. from scapy.all import * dip=&amp;quot;10.0.0.1&amp;quot; payload=&amp;quot; &amp;quot;*1000 packet=IP(dst=dip)/UDP(dport=0x1234)/payload frag_list=fragment(packet,fragsize=500) counter=1 for fragment in frag_list: print &amp;quot;Packet no%d&amp;quot; %counter print fragment.show() counter+=1 send(fragment) frag_list에서 counter 변수를 확</description>
    </item>
    
    <item>
      <title>Vagrant</title>
      <link>https://cychong47.github.io/post/2016/vagrant/</link>
      <pubDate>Sun, 14 Feb 2016 07:52:01 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/vagrant/</guid>
      <description>Vagrant fd.io의 개발 환경 구성하는 문서를 보니 vagrant를 사용한다. 그런데 또 virtualbox니 vmware 이야기를 한다. 이전에도 vagrant라는 단</description>
    </item>
    
    <item>
      <title>fd.io</title>
      <link>https://cychong47.github.io/post/2016/fd-io-tree/</link>
      <pubDate>Sat, 13 Feb 2016 05:51:52 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/fd-io-tree/</guid>
      <description>├── build-data │ ├── packages │ └── platforms ├── build-root │ ├── deb │ │ └── debian │ │ └── source │ ├── emacs-lisp │ ├── packages │ ├── rpm │ ├── scripts │ └── vagrant ├── dpdk │ ├── dkms │ ├── dpdk-2.1.0_patches │ └── dpdk-2.2.0_patches ├── g2 ├── gmod │ └── gmod ├── perftool ├── sample-plugin │ └── sample ├── svm ├── test │ ├── resources │ │ ├── libraries │ │ │ ├── bash │ │ │ ├── python │ │ │ └── robot │ │ │ └── vat │ │ └── templates │ │ └── vat │ └── tests │ └── suites │ ├── bridge_domain │ └── vhost_user_dummy ├── vlib │ ├── example │ └── vlib │ └── unix ├── vlib-api │ ├── vlibapi │ ├── vlibmemory │ └── vlibsocket ├── vnet │ ├── etc │ │ └── scripts │ │ ├── dhcp │ │ ├── ludd-cluster-1 │ │ ├── ludd-cluster-3 │ │ ├── mpls-o-ethernet │ │ ├── mpls-o-gre │ │ ├── sr │ │ └── virl │ └── vnet │ ├── cdp │ ├── classify │ ├── devices │ │ ├── dpdk │ │ ├── ssvm │ │ └── virtio │ ├── dhcp │ ├── dhcpv6 │ ├── ethernet │ ├── flow │ ├── gre │ ├── hdlc │ ├── ip │ ├── ipsec │ ├── l2 │ ├── l2tp │ ├── lawful-intercept │ ├── lisp-gpe │ ├── llc │ ├── map │ │ └── examples │ ├── mcast │ ├── mpls-gre │ ├── nsh-gre │ ├── nsh-vxlan-gpe │ ├── osi │ ├── pg │ ├── plugin │ ├── policer │ ├── ppp │ ├── snap │ ├── sr │ ├── srp │ ├── unix │ ├── vcgn │ └── vxlan ├── vpp │ ├── api │ ├── app │ ├── conf │ ├── oam │ ├── stats │ └── vnet ├── vpp-api-test │ ├── scripts │ └── vat ├── vpp-japi │ ├── japi │ │ ├── org │ │ │ └── openvpp │ │ │ └── vppjapi │ │ └── test │ └── m4 ├── vppapigen └── vppinfra ├── config ├── tools └── vppinfra  </description>
    </item>
    
    <item>
      <title>fd.io</title>
      <link>https://cychong47.github.io/post/2016/fd-io/</link>
      <pubDate>Sat, 13 Feb 2016 01:29:43 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/fd-io/</guid>
      <description>2016년 2월 11일 공개된 CISCO 주도의 프로젝트. 무려 2002년부터 개발한 것으로 현재 버전은 3번째 revision이라고 한다. 간만에 dpdk.org mailing list에 들</description>
    </item>
    
    <item>
      <title>왜 공부해야 하는가에 대한 간단하지만 명확한 답</title>
      <link>https://cychong47.github.io/post/2016/why_have_to_keep_studying/</link>
      <pubDate>Wed, 10 Feb 2016 04:23:12 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/why_have_to_keep_studying/</guid>
      <description>왜 공부해야 하는가 사회의 변화속도는 우리의 변화속도를 압도하기 때문입니다. &amp;lt;누가 내 치즈를 옮겼을까&amp;gt;에 잘 묘사되어 있지요. 따라잡지 않으면 뒤</description>
    </item>
    
    <item>
      <title>DPDK NIC 초기화</title>
      <link>https://cychong47.github.io/post/2016/dpdk_nic_init/</link>
      <pubDate>Tue, 09 Feb 2016 14:54:21 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/dpdk_nic_init/</guid>
      <description>constructor attribute http://phoxis.org/2011/04/27/c-language-constructors-and-destructors-with-gcc/ constructor attribute을 가진 함수는 main 함수를 실행하기 전에 호출한다. 예제 (출처) #include &amp;lt;stdio.h&amp;gt; void begin (void) __attribute__((constructor)); void end (void) __attribute__((destructor)); int main (void) { printf (&amp;quot;\nInside main ()&amp;quot;); } void begin (void) { printf (&amp;quot;\nIn begin ()&amp;quot;); } void end</description>
    </item>
    
    <item>
      <title>Introducing Python</title>
      <link>https://cychong47.github.io/post/2016/introducing-python/</link>
      <pubDate>Mon, 08 Feb 2016 13:25:34 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/introducing-python/</guid>
      <description>Introducing Python 을 판교어린이도서관에서 짧게 보고 적은 아이템들 python3 based Decorator는 공부가 필요한 내용 sys.path : module 검색 경로 __init__.py 파일이 있으면 그 디렉토리를 PKG로 간주함</description>
    </item>
    
    <item>
      <title>SR-IOV and DPDK</title>
      <link>https://cychong47.github.io/post/2016/sriov-and-dpdk/</link>
      <pubDate>Sun, 07 Feb 2016 23:40:26 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/sriov-and-dpdk/</guid>
      <description>SR-IOV and DPDK Accelerating the NFV Data Plane : SR-IOV and DPDK… in my own words 를 읽고 요약 Before HW assisted Virtualisation SR-IOV 전까지는 VMM이 패킷 송수신에 매번 개입해야 했음. 1st interrupt from NIC to VMM 2nd interrupt from VMM to VM Intel VMDq Only one interrupt</description>
    </item>
    
    <item>
      <title>DPDK 2.2 crypto dev API</title>
      <link>https://cychong47.github.io/post/2016/dpdk-2-2-crypto-dev-api/</link>
      <pubDate>Sun, 24 Jan 2016 15:08:11 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/dpdk-2-2-crypto-dev-api/</guid>
      <description>pktmbuf_offload pool은 rte_pktmbuf_offload_pool_create()를 사용하여 생성 l2fwd_mbuf_ol_pool = rte_pktmbuf_offload_pool_create( &amp;quot;mbuf_offload_pool&amp;quot;, NB_MBUF, 128, 0, rte_socket_id()); 할당은 rte_pktmbuf_o</description>
    </item>
    
    <item>
      <title>DPDK based applications</title>
      <link>https://cychong47.github.io/post/2016/dpdk_based_apps/</link>
      <pubDate>Sun, 24 Jan 2016 14:59:18 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/dpdk_based_apps/</guid>
      <description>2016.02.10 기준 DPDK-dump TRex - Realistic traffic generator git-hub - trex-core, trex-doc, trex-profiles, trex-qt-gui Packet-journey git-hub FD.io Fast Data Path DPDK-nginx DPDK-pktgen DPDK-ODP TCP/IP stack for DPDK</description>
    </item>
    
    <item>
      <title>2년전에 느꼈던 답답함이 여전하네</title>
      <link>https://cychong47.github.io/post/2016/two-years-back/</link>
      <pubDate>Mon, 04 Jan 2016 15:19:11 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/two-years-back/</guid>
      <description>우연히 tumblr를 보니 2013년에 적었던 답답한 현실이 지금도 똑같다는 사실에 놀랐다. 들으려고 하는 사람은 없고, 쓸데없는 일에 시간을 보내는 건 지금도 전</description>
    </item>
    
    <item>
      <title>(책) 구글의 아침은 자유가 시작된다.</title>
      <link>https://cychong47.github.io/post/2016/google-work-rules/</link>
      <pubDate>Mon, 04 Jan 2016 14:03:21 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/google-work-rules/</guid>
      <description>일단 읽다가 중단. 다른 걸 먼저 봐야 할 것 같다. 공감하는 내용이 많지만 이 책을 본다고 내가 어쩔 수 있는 내용이 별로 없어서&amp;hellip;. p78 이렇게 투명하게 공개</description>
    </item>
    
    <item>
      <title>Googlegeist vs. SCI</title>
      <link>https://cychong47.github.io/post/2016/googlegeist_vs_sci/</link>
      <pubDate>Sat, 02 Jan 2016 02:44:51 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/googlegeist_vs_sci/</guid>
      <description>SCI 결과를 개선하기 위해 실질적으로 이뤄지는 노력이 안 보인다는 것. 노력한다해도 그건 관리자와 비관리자가 함께 노력해야 하는 일일텐데(관리자나 회사에 대한 불만</description>
    </item>
    
    <item>
      <title>(글) 왜 “애자일”, 특히 스크럼이 끔찍한가.</title>
      <link>https://cychong47.github.io/post/2016/anti-agile/</link>
      <pubDate>Fri, 01 Jan 2016 15:25:13 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/anti-agile/</guid>
      <description>출처 : 왜 “애자일”, 특히 스크럼이 끔찍한가 스크럼 팀에 실제 시니어 엔지니어의 역할은 없는데, 문제는 스크럼을 도입한 많은 회사에서 보통 전사적으로 시행한다는</description>
    </item>
    
    <item>
      <title>click - python option 처리 모듈</title>
      <link>https://cychong47.github.io/post/2016/click-python-module/</link>
      <pubDate>Fri, 01 Jan 2016 13:45:58 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/click-python-module/</guid>
      <description>http://click.pocoo.org/5/ C로 프로그램을 짤 때 사용할 표준 포맷도 이렇게 해야겠다. $ python hello.py --help Usage: hello.py [OPTIONS] Simple program that greets NAME for a total of COUNT times. Options: --count INTEGER Number of greetings. --name TEXT The person to greet. --help Show this message and exit.</description>
    </item>
    
    <item>
      <title>DPDK QAT example  빌드하기</title>
      <link>https://cychong47.github.io/post/2016/build_dpdk_qat/</link>
      <pubDate>Fri, 01 Jan 2016 10:57:39 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2016/build_dpdk_qat/</guid>
      <description>Download dpdk-2.2.0.tar.gz Refer http://dpdk.org/download wget http://dpdk.org/browse/dpdk/snapshot/dpdk-2.2.0.tar.gz Download qat_mux Refer https://01.org/packet-processing/intel®-quickassist-technolog</description>
    </item>
    
    <item>
      <title>Designing a RESTful API with Python and Flask</title>
      <link>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</link>
      <pubDate>Thu, 24 Dec 2015 14:11:59 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</guid>
      <description>Designing a RESTful API with Python and Flask RESTful API는 URI에 필요한 인자를 다 넘기는 형태라 사용자가 직접 주소를 입력하는 것이 아니라 다른 SW에서 해당 URI를 입력하는 형태로 사용하</description>
    </item>
    
    <item>
      <title>virtualenv 사용</title>
      <link>https://cychong47.github.io/post/2015/virtualenv/</link>
      <pubDate>Mon, 21 Dec 2015 14:59:29 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/virtualenv/</guid>
      <description>virtualenv 설치 mini-2:~ cychong$ sudo easy_install pip mini-2:~ cychong$ sudo pip install virtualenv virtualenv로 project directory 생성 mini-2:work cychong$ mkdir click mini-2:work cychong$ cd click/ mini-2:click cychong$ ls mini-2:click cychong$ virtualenv venv New python executable in venv/bin/python Installing setuptools, pip, wheel...done. mini-2:click cychong$ ls venv virtualenv 환경으로 들어가기 mini-2:click cychong$ . venv/bin/activate</description>
    </item>
    
    <item>
      <title>Culture should be setup first</title>
      <link>https://cychong47.github.io/post/2015/culture/</link>
      <pubDate>Sun, 13 Dec 2015 13:44:24 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/culture/</guid>
      <description>from Google Work Rules 2006년에 구글에 입사. 72년 생 구글 임직원 나이 평균에 비하면 많지만, 그래도 비슷한 덩치의 국내 기업의 인사 담당자와 비교하면. 하긴 구글을 국내 (</description>
    </item>
    
    <item>
      <title>OpenFastPath</title>
      <link>https://cychong47.github.io/post/2015/openfastpath/</link>
      <pubDate>Fri, 11 Dec 2015 14:40:23 +0900</pubDate>
      
      <guid>https://cychong47.github.io/post/2015/openfastpath/</guid>
      <description>Another Open source project.
User-land protocol stack. Incorporate with ODP
To use with DPDK, ODP and ODP-DPDK should be used.
From the FAQ
Q: Does the OFP IP stack mimic Linux stack config inside the fastpath, meaning does it intercept Linux ipconfig/ip commands and automatically create similar entities inside the fastpath stack? A: Yes. Uses Netlink to sync with ifconfig commands and also with routes. Q: Does the OFP IP stack have full IPv4/IPv6 fragmentation/re-assembly support?</description>
    </item>
    
  </channel>
</rss>
