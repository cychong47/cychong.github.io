<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Study on Keep calm and write something</title><link>https://cychong47.github.io/categories/study/</link><description>Recent content in Study on Keep calm and write something</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Mar 2022 00:00:03 +0900</lastBuildDate><atom:link href="https://cychong47.github.io/categories/study/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugepage in DPDK - one container in each pod</title><link>https://cychong47.github.io/post/2022/2022-03-15-one-container-in-each-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:03 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-15-one-container-in-each-pod/</guid><description>서로 다른 pod의 container에서 실행되는 DPDK process들도 다른 경우와 마찬가지로 DPDK runtime config 파일과 hugepage map 파일만 공유하면 hugepage를 공유할 수 있다.
이 때 서로 다른 pod가 같은 DPDK runtime config 파일들과, hugepage map 파일을 공유하기 위해 두 개 pod가 함께 사용할 수 있는 hostPath 를 이용한다. hostPath는 pod가 실행되는 node의 파일 시스템을 이용하여 volume을 만든다. 그러므로 서로 다른 pod가 동일 node에서 실행되는 경우에만 pod가 hugepage를 공유할 수 있다.
DPDK runtime config 두 개 pod에서 hostPath 를 이용하여 DPDK runtime config 파일을 공유를 위한 volume을 만든다.</description></item><item><title>Hugepage in DPDK - two containers in a pod</title><link>https://cychong47.github.io/post/2022/2022-03-15-two-containers-in-a-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:02 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-15-two-containers-in-a-pod/</guid><description>하나의 pod에 2개의 container를 두고, 각각의 container에 primary process, secondary process를 실행하려면 두 개 container에서 실행되는 DPDK process간 runime config 파일과, hugepage map 파일을 공유하는 방법은 다음과 같다.
하나의 pod에 하나의 container만 두는 경우와 달리 두 개의 container가 /var/run/dpdk 위치를 공유해야 하므로, 각 container가 갖는 기본 파일 시스템이 아니라 명시적으로 pod의 volume을 이용해서 파일을 공유해야 한다.
이를 위해 pod spec에 다음과 같은 volume spec을 추가한다.
volume: - name: dpdk-config emptyDir: emptyDir에 명시적으로 지정하지 않은 경우 tmpfs를 사용하므로, 위 volume은 tmpfs를 사용하여 생성된다.</description></item><item><title>Hugepage in DPDK - a single container in a pod</title><link>https://cychong47.github.io/post/2022/2022-03-15-a-single-container-in-a-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:01 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-15-a-single-container-in-a-pod/</guid><description>How to run DPDK application in Kubernetes environment Kubernetes에서 DPDK application을 실행하기 위해서는 DPDK application이 포함된 container에 runtime config 파일이 저장될 /var/run/dpdk 디렉토리와 hugetlbfs 형태로 hugepage가 존재해야 한다. 이 중 /var/run/dpdk는 container 가 갖는 file system에 생성되는 기본 linux directory인 /var/run 아래 위치하므로, DPDK application이 실행되면서 디렉토리를 생성한다.
반면, hugetblfs 디렉토리은 kubernetes의 volume 에서 제공하는 emptyDir을 사용하면 Pod와 lifecycle을 함께 하는 hugepage를 만들어 사용할 수 있다.
Container에서 hugepage를 할당받기 위해서는 다음과 같이 container spec에 요구하는 hugepage 크기를 명시한다.</description></item><item><title>Hugepage in DPDK - Basics</title><link>https://cychong47.github.io/post/2022/2022-03-15-hugepage-in-dpdk-basics/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-15-hugepage-in-dpdk-basics/</guid><description>Basic use of hugepage DPDK application이 hugepage를 사용할 때 다음과 같은 2가지 디렉토리를 사용한다.
DPDK runtime config files /var/run/dpdk 로 고정된 경로를 사용요 DPDK 에서 hugepage를 어떻게 사용하는 지에 대한 meta data를 저장 hugepage map hugepage를 사용하기 위해 hugetlbfs 를 이용할 때 생성하는 hugepage map 파일들이 위치한 곳. DPDK는 이곳에 hugepage의 단위 크기를 갖는 file을 생성하고, mmap()을 사용하여 hugepage를 접근 만일 시스템에 2개 이상의 hugetlbfs가 마운트된 위치가 있는 경우 DPDK process를 실행할 때 --huge-dir 옵션을 사용하여 특정 위치를 사용하도록 할 수 있다.</description></item></channel></rss>