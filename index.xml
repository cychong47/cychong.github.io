<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Keep calm and write something</title><link>https://cychong47.github.io/</link><description>Recent content on Keep calm and write something</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 20 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cychong47.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://cychong47.github.io/post/2024/2024-02-20-cilium-and-hubble-with-prometheus-and-grafana/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2024/2024-02-20-cilium-and-hubble-with-prometheus-and-grafana/</guid><description>Setup Prometheus and Grafana to scrap Cilium metrics This will create a new namespace cilium-monitoring
kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/1.15.1/examples/kubernetes/addons/prometheus/monitoring-example.yaml Some warnings&amp;hellip; namespace/cilium-monitoring created serviceaccount/prometheus-k8s created configmap/grafana-config created configmap/grafana-cilium-dashboard created configmap/grafana-cilium-operator-dashboard created configmap/grafana-hubble-dashboard created configmap/grafana-hubble-l7-http-metrics-by-workload created configmap/prometheus created clusterrole.rbac.authorization.k8s.io/prometheus created clusterrolebinding.rbac.authorization.k8s.io/prometheus created service/grafana created service/prometheus created Warning: would violate PodSecurity &amp;#34;restricted:latest&amp;#34;: allowPrivilegeEscalation != false (container &amp;#34;grafana-core&amp;#34; must set securityContext.allowPrivilegeEscalation=false), unrestricted capabilities (container &amp;#34;grafana-core&amp;#34; must set securityContext.capabilities.drop=[&amp;#34;ALL&amp;#34;]), runAsNonRoot != true (pod or container &amp;#34;grafana-core&amp;#34; must set securityContext.</description></item><item><title>Add extra data to python log message</title><link>https://cychong47.github.io/post/2024/2024-02-18-prepend-data-to-python-logger/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2024/2024-02-18-prepend-data-to-python-logger/</guid><description>TL;DR QueueHandler를 사용해서 process-safe logger를 만들고 LoggerAdapter를 활용해서 매 로그 메시지마다 특정 정보가 자동으로 출력. main.py #!/usr/bin/env python3 import logging import logging.handlers import multiprocessing from worker import worker_process from my_logger import logger_process if __name__ == &amp;#34;__main__&amp;#34;: # Configure logging logging.basicConfig(level=logging.DEBUG) # Create a queue for logging log_queue = multiprocessing.Queue() # Create worker processes num_workers = 2 processes = [] for i in range(num_workers): p = multiprocessing.Process(target=worker_process, args=(i, log_queue)) processes.append(p) p.start() # Create a logger process for process-safe loggging p = multiprocessing.</description></item><item><title>hugo에 검색 기능 추가하기 - pagefind</title><link>https://cychong47.github.io/post/2023/2023-05-18-add-search-to-hugo/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2023/2023-05-18-add-search-to-hugo/</guid><description>Why not Agollia algolla 는 site indexing 을 위해 Algollia 서버로 정보를 보내는 듯 함. 대신 hugo에 아주 seamless 하게 연동이 되는데. 좀 아쉽네. (Privacy 건은 좀 더 확인해 봐야겠다)
Algollia를 잘 결합해서 사용하는 사이트 하나 https://inchan.dev Search를 클릭하면 입력 창의 크기가 자동으로 커져서 결과가 보여지는 창도 적당해서 보기 좋다.
Install Pagefind 설치는 npx를 이용해서 설치하거나, cargo build하거나. 혹은 github에 올려져 있는 바이너리 다운받아 설치하거나. 이 중에 마지막 방법 선택</description></item><item><title>Homelab server 3rd gen.</title><link>https://cychong47.github.io/post/2022/2022-12-31-homeserver-3rd-gen/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2022/2022-12-31-homeserver-3rd-gen/</guid><description>homelab 서버로 사용할 PC를 당근마켓을 통해 구입. 제품 사양에 비해 저렴하고,, 구입 과정도 매끄러워서 기분좋게 구입한 제품이다.
오랜만에 AMD CPU를 사용하는 PC를 사용하게 되었네. 조립 PC를 사본 지가 언제인지. 최근 10년 넘게는 맥만 구입해서 궁금하다. 완성품(특히 애플 노트북)에 비해 좋은 점은 원하는 사양으로 변경할 수 있다는 거 일텐데, 그래서 그 장점을 십분 활용하고자, 중고로 얻어온 제품이 이미 16 GiB 메모리가 실장되어 있지만, 32 GiB를 하나 추가로 구입했다. 다른 건 못해도 RAM Flex라도 해 보자.</description></item><item><title>How to run DPDK in k8s - One container in each pod</title><link>https://cychong47.github.io/post/2022/2022-03-14-one-container-in-each-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:03 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-14-one-container-in-each-pod/</guid><description>서로 다른 pod의 container에서 실행되는 DPDK process들도 다른 경우와 마찬가지로 DPDK runtime config 파일과 hugepage map 파일만 공유하면 hugepage를 공유할 수 있다.
이 때 서로 다른 pod가 같은 DPDK runtime config 파일들과, hugepage map 파일을 공유하기 위해 두 개 pod가 함께 사용할 수 있는 hostPath 를 이용한다. hostPath는 pod가 실행되는 node의 파일 시스템을 이용하여 volume을 만든다. 그러므로 서로 다른 pod가 동일 node에서 실행되는 경우에만 pod가 hugepage를 공유할 수 있다.
DPDK runtime config 두 개 pod에서 hostPath 를 이용하여 DPDK runtime config 파일을 공유를 위한 volume을 만든다.</description></item><item><title>How to run DPDK in k8s - Two containers in a pod</title><link>https://cychong47.github.io/post/2022/2022-03-14-two-containers-in-a-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:02 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-14-two-containers-in-a-pod/</guid><description>하나의 pod에 2개의 container를 두고, 각각의 container에 primary process, secondary process를 실행하려면 두 개 container에서 실행되는 DPDK process간 runime config 파일과, hugepage map 파일을 공유하는 방법은 다음과 같다.
하나의 pod에 하나의 container만 두는 경우와 달리 두 개의 container가 /var/run/dpdk 위치를 공유해야 하므로, 각 container가 갖는 기본 파일 시스템이 아니라 명시적으로 pod의 volume을 이용해서 파일을 공유해야 한다.
이를 위해 pod spec에 다음과 같은 volume spec을 추가한다.
volume: - name: dpdk-config emptyDir: emptyDir에 명시적으로 지정하지 않은 경우 tmpfs를 사용하므로, 위 volume은 tmpfs를 사용하여 생성된다.</description></item><item><title>How to run DPDK in k8s - A single container in a pod</title><link>https://cychong47.github.io/post/2022/2022-03-14-a-single-container-in-a-pod/</link><pubDate>Mon, 14 Mar 2022 00:00:01 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-14-a-single-container-in-a-pod/</guid><description>How to run DPDK application in Kubernetes environment Kubernetes에서 DPDK application을 실행하기 위해서는 DPDK application이 포함된 container에 runtime config 파일이 저장될 /var/run/dpdk 디렉토리와 hugetlbfs 형태로 hugepage가 존재해야 한다. 이 중 /var/run/dpdk는 container 가 갖는 file system에 생성되는 기본 linux directory인 /var/run 아래 위치하므로, DPDK application이 실행되면서 디렉토리를 생성한다.
반면, hugetblfs 디렉토리은 kubernetes의 volume 에서 제공하는 emptyDir을 사용하면 Pod와 lifecycle을 함께 하는 hugepage를 만들어 사용할 수 있다.
Container에서 hugepage를 할당받기 위해서는 다음과 같이 container spec에 요구하는 hugepage 크기를 명시한다.</description></item><item><title>Hugepage in DPDK - Basics</title><link>https://cychong47.github.io/post/2022/2022-03-14-hugepage-in-dpdk-basics/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-03-14-hugepage-in-dpdk-basics/</guid><description>Basic use of hugepage DPDK application이 hugepage를 사용할 때 다음과 같은 2가지 디렉토리를 사용한다.
DPDK runtime config files /var/run/dpdk 로 고정된 경로를 사용요 DPDK 에서 hugepage를 어떻게 사용하는 지에 대한 meta data를 저장 hugepage map hugepage를 사용하기 위해 hugetlbfs 를 이용할 때 생성하는 hugepage map 파일들이 위치한 곳. DPDK는 이곳에 hugepage의 단위 크기를 갖는 file을 생성하고, mmap()을 사용하여 hugepage를 접근 만일 시스템에 2개 이상의 hugetlbfs가 마운트된 위치가 있는 경우 DPDK process를 실행할 때 --huge-dir 옵션을 사용하여 특정 위치를 사용하도록 할 수 있다.</description></item><item><title>2022년 1월 새 책들</title><link>https://cychong47.github.io/post/2022/2022-01-22-2022-january-books/</link><pubDate>Sat, 22 Jan 2022 21:48:56 +0900</pubDate><guid>https://cychong47.github.io/post/2022/2022-01-22-2022-january-books/</guid><description/></item><item><title>Traefik 로그의 timezone 수정</title><link>https://cychong47.github.io/post/2022/2022-01-06-how-to-change-timezone-of-traefik-log/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2022/2022-01-06-how-to-change-timezone-of-traefik-log/</guid><description>문제점 Traefik 로그에 time 정보가 제대로 나오게 하려면
helm chart에 환경 변수에 TZ를 설정해도 로그 시간이 제대로 나오지 않음.
192.168.0.101 - - [06/Jan/2022:1:18:17 +0000] &amp;#34;GET /ping HTTP/1.1&amp;#34; 200 2 &amp;#34;-&amp;#34; &amp;#34;-&amp;#34; 100 &amp;#34;ping@internal&amp;#34; &amp;#34;-&amp;#34; 0ms env: - name: TZ value: Asia/Seoul kubectl describe 명령으로 확인하면 환경변수가 제대로 설정된 것으로 나옴
Environment: TZ: Asia/Seoul 해결책 https://doc.traefik.io/traefik/observability/access-logs/#time-zones 위 페이지를 보니 다음과 같이 몇 가지 설정을 해야 한다고.
Traefik will timestamp each log line in UTC time by default.</description></item><item><title>2021년 11월 책 들</title><link>https://cychong47.github.io/post/2021/2021-12-13-books-for-november-2021/</link><pubDate>Mon, 13 Dec 2021 19:50:15 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-12-13-books-for-november-2021/</guid><description/></item><item><title>Blog의 text와 image를 합쳤다</title><link>https://cychong47.github.io/post/2021/2021-11-24-merge-blog-post-and-image-repos/</link><pubDate>Wed, 24 Nov 2021 13:51:30 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-11-24-merge-blog-post-and-image-repos/</guid><description>홈 블로그에 사용하는 텍스트로 된 포스트와 포스트에서 사용하는 이미지 파일을 각자 다른 github repo에서 관리해 오고 있었다. 혻시나 포스트만 클론해서 글을 수정하고 싶을 때 수 GB에 달하는 이미지를 다운받아야 하는 건 아닌 것 같아서.</description></item><item><title>미래가 없는 조직</title><link>https://cychong47.github.io/post/2021/2021-09-27-company-without-future/</link><pubDate>Mon, 27 Sep 2021 00:06:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-09-27-company-without-future/</guid><description>https://www.mk.co.kr/opinion/columnists/view/2015/02/135652/
10년 전 쯤에 부서장은 인품이 참 좋은 분이었다. 그 당시 내 기준으로는 회사 생활을 하면서 만난 몇 안되는 좋은 부서장이었다.(물론 그 당시에 내가 생각하는 &amp;lsquo;좋은&amp;rsquo; 부서장의 기준은 지금과 달라졌다.) 왠만하면 화를 내는 일이 없었고, 문제를 일으켜도 문제를 유발한 사람을 탓하기보다는 문제 해결에 집중하는 바람직한 부서장 상을 실천하던 분이었다.
그 분께 하루는 술 기운을 빌어 부탁을 한 적이 있었다. 퇴근 일찍 하시고, 주말 근무 하지 마시라고. 우리가 더 회사생활을 하면 가게 될 위치 중 하나가 당신인데, 당신의 지금 회사 생활은 별로 따르고 싶은 모습이 아니라고.</description></item><item><title>소설 Foundation이 드디어 영상으로</title><link>https://cychong47.github.io/post/2021/2021-09-25-foundation-onair-in-appletvplus/</link><pubDate>Sat, 25 Sep 2021 18:52:54 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-09-25-foundation-onair-in-appletvplus/</guid><description/></item><item><title>HP mini PC의 소모전력</title><link>https://cychong47.github.io/post/2021/2021-09-24-power-consumption-of-mini3/</link><pubDate>Fri, 24 Sep 2021 11:24:23 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-09-24-power-consumption-of-mini3/</guid><description/></item><item><title>8월 구매 도서들</title><link>https://cychong47.github.io/post/2021/2021-09-09-new-books-in-this-month/</link><pubDate>Thu, 09 Sep 2021 18:06:56 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-09-09-new-books-in-this-month/</guid><description/></item><item><title>Devonthink 3 Pro로 업그레이드 - 의리</title><link>https://cychong47.github.io/post/2021/2021-08-31-upgrade-devonthink3-pro/</link><pubDate>Tue, 31 Aug 2021 13:24:15 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-08-31-upgrade-devonthink3-pro/</guid><description/></item><item><title>Note-taking Tips from twitter</title><link>https://cychong47.github.io/post/2021/2021-08-31-note-taking-tips/</link><pubDate>Tue, 31 Aug 2021 00:33:39 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-08-31-note-taking-tips/</guid><description/></item><item><title>2021년 관심있는 언어들</title><link>https://cychong47.github.io/post/2021/2021-08-24-2021-languages-to-learn/</link><pubDate>Tue, 24 Aug 2021 22:54:41 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-08-24-2021-languages-to-learn/</guid><description>Go, Rust and Python
Python은 20년째 하고 있는 것 같은데 어째 2개월 한 사람보다 못하냐.</description></item><item><title>iOS shortcut - 사진 meta 정보 삭제</title><link>https://cychong47.github.io/post/2021/2021-08-17-remove-meta-data-from-image/</link><pubDate>Tue, 17 Aug 2021 09:22:39 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-08-17-remove-meta-data-from-image/</guid><description/></item><item><title>책 - 이렇게 될 줄 몰랐습니다</title><link>https://cychong47.github.io/post/2021/2021-01-01-i-did-not-expect-this/</link><pubDate>Sun, 16 May 2021 14:59:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-01-01-i-did-not-expect-this/</guid><description/></item><item><title>알지만 쉽지 않은 일</title><link>https://cychong47.github.io/post/2021/2021-05-13-i-know-but-it-is-not-that-easy/</link><pubDate>Thu, 13 May 2021 08:53:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-05-13-i-know-but-it-is-not-that-easy/</guid><description/></item><item><title>Traefik middleware를 이용한 접근 제한</title><link>https://cychong47.github.io/post/2021/2021-05-08-access-control-with-traefik-middleware/</link><pubDate>Sat, 08 May 2021 23:16:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-05-08-access-control-with-traefik-middleware/</guid><description>특정 서비스를 외부에 공개하고 싶지 않고, 내부 망에서만 접근하게 하려면 Traefik의 middleware가 제공하는 ipWhilteList 기능을 활용할 수 있다.
(이름은 요즘 추세에 맞게 ipAllowList 정도로 변경되어야 할 것 같은데..)
전체적인 동작은 IpWhitelist - Traefik 페이지에 있는 그림으로 간단하게 요약이 가능할 듯. 사이트에 접근하려는 client가 미리 정의된 list에 있는 경우에만 접근을 허용한다는.
middleware 정의 접근을 허용할 client들의 CIDR을 정의한다. 특정 subnet을 정의하거나, 특정 host를 정의할 수 있다. 당연히 복수 정의도 가능하고.
아래 예는 192.</description></item><item><title>iCloud 2TB 서비스로 업그레이드</title><link>https://cychong47.github.io/post/2021/2021-04-24-upgrade-icloud-storage-option/</link><pubDate>Sat, 24 Apr 2021 18:19:49 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-04-24-upgrade-icloud-storage-option/</guid><description/></item><item><title>Install kubernetes on mini3</title><link>https://cychong47.github.io/post/2021/2021-04-13-install-kubernetes-on-mini3/</link><pubDate>Tue, 13 Apr 2021 11:26:01 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-04-13-install-kubernetes-on-mini3/</guid><description>mini1에서 mini3로의 이전을 준비 중. 기존에 mini3에는 재미삼아 k3s를 설치해 놓았는데 왠지 새로운 설정 방식을 알아야 할 필요가 있나 하는 생각이 들어 이전처럼 다시 vanilla kubernetes 를 설치하기로 했다. minkkube처럼 VM을 만들어야 설치가 되는 것도 아니고 그냥 host OS에 설치하면 되니까 설치도 간단하고(물론 바이너리 하나 설치하면 되는 k3s와는 비교하기 어렵지만) 부하를 감당하기 어려운 정도의 CPU도 아니라서.
Installing kubeadm | Kubernetes
# /etc/modules-load.d/k8s.conf br_netfilter # /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 $ sudo sysctl --system Install Containerd as a Container Runtime docker를 CRI로 사용하는 것은 곧 deprecated예정이니까 containerd를 사용해 보자.</description></item><item><title>Replace NodePort with ClsuterIP - Thx to Traefik</title><link>https://cychong47.github.io/post/2021/2021-03-31-change-nodeport-to-clusterip/</link><pubDate>Sat, 03 Apr 2021 22:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-31-change-nodeport-to-clusterip/</guid><description>Traefik을 이용한 Ingress/Ingress Controller를 이용해서 nginx 기반 Pod를 cluster 외부에서 접속할 수 있도록 설정했는데 곰곰히 생각해 보니 그렇다면 nginx service에 굳이 NodePort를 사용해야 하나 라는 생각이 들었다. 이제 외부로부터의 요청은 든든한 Traefik이 처리해 줄 테니 직접 각 pod가 서비스를 NodePort를 이용해서 외부에 오픈할 필요가 없어 보였다.
이를 위해 기존에 사용하던 nginx의 value 파일을 다음과 같이 수정했다. NodePort를 위해 필요했던 정보들이 사라지고, 수신하고 싶은 Port만 지정하면 되니설정 파일이 무척 깔끔해졌다.
service: # type: NodePort # targetPort: 80 # container app.</description></item><item><title>Setup Ingress with Traefik</title><link>https://cychong47.github.io/post/2021/2021-03-31-setup-ingress-with-traefik/</link><pubDate>Wed, 31 Mar 2021 23:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-31-setup-ingress-with-traefik/</guid><description>Ingress Controller 를 설치(Helm으로 Traefik 설치하기)했으니 이제 Ingress를 설정해서 실제 cluster 외부로부터의 http/https 메시지를 nginx pod에 전달되게 해 본다.
Ingress Ingress는 Cluster 외부에서 접근하는 http/https request에 대한 라우팅을 제어하는 기능을 제공한다. Ingress | Kubernetes
ingress.yaml 파일을 다음과 같이 작성한다. . 아래는 두 가지 rule을 설정하고 있는데 host가 ‘mini1’이고, URL path가 /ost면 podcast-nginx라는 서비스로 전달하게 하는 것과 host는 상관없이 path가 /ost면 역시 같은 podcast-nginx로 보내는 것이다.
kind: Ingress apiVersion: extensions/v1beta1 metadata: name: &amp;#34;test&amp;#34; namespace: default spec: rules: - host: mini1 http: paths: - path: /ost backend: serviceName: podcast-nginx servicePort: 8099 - http: paths: - path: /ost backend: serviceName: podcast-nginx servicePort: 8099 Kubectl 명령을 이용해 적용해 본다.</description></item><item><title>Helm으로 Traefik 설치하기</title><link>https://cychong47.github.io/post/2021/2021-03-30-install-traefik-with-helm/</link><pubDate>Tue, 30 Mar 2021 09:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-30-install-traefik-with-helm/</guid><description>지금 집에 있는 서버(mac mini 2009)에서 nginx를 이용해서 블로그를 호스팅하는데 port를 구분해서 외부에 노출하고 있다. 외부에서의 &amp;gt;접근을 위해 NodePort를 사용하고, 각 nginx instance는 서로 다른 port를 이용하고 있는데 port번호가 아니라 URL 경로를 이용해서 서로 다른 서비스를 이용할 수 있는 reverse proxy 기능을 사용하면 좀 더 깔끔할 듯 하다. Kubernetes에서는 ingress와 ingress controller를 이용해서 이 reverse proxy를 구현할 수 있다고 한다. Kubernetes에서는 ingress는 기본적으로 제공하는 object 지만, ingress controller는 제공하고 있지 않아, 별도로 설치해야 한다.</description></item><item><title>I should have this one</title><link>https://cychong47.github.io/post/2021/2021-03-13-i-should-have-this-one/</link><pubDate>Sat, 13 Mar 2021 18:16:05 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-13-i-should-have-this-one/</guid><description/></item><item><title>디즈니만이 하는 것(The ride of a lifetime)</title><link>https://cychong47.github.io/post/2021/2021-03-10-the-ride-of-a-lifetime/</link><pubDate>Wed, 10 Mar 2021 23:36:30 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-10-the-ride-of-a-lifetime/</guid><description>P17
나는 일이 계획대로 돌아가지 않을 때 그다지 걱정하지 않는 편이다. 그리고 나쁜 소식도 그저 내게 일어나고 있는 무엇이 아니라 부딛쳐서 해결할 수 있는 문제, 즉 내가 통제할 수 있는 무엇으로 보고 접근한다.
P30
첫째, 리스크를 감수하고 창의성을 장려하는 것
둘째, 신뢰의 문화를 구축하는 것
셋째, 자신에 대한 깊고 지속적인 호기심을 배양해 주변 사람들에게 영감을 불어넣는 것
넷째, 변화를 거부하지 않고 수용하는 것
다섯째, 항상 정직하고 고결하게 세상을 살아가는 것(그럼으로써 힘겨운 상황에 직면하게 될 것이 분명할 때조차도)</description></item><item><title>How can they trust employees</title><link>https://cychong47.github.io/post/2021/2021-03-07-how-can-they-trust-employees/</link><pubDate>Sun, 07 Mar 2021 00:07:15 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-07-how-can-they-trust-employees/</guid><description>어쩌다 출근의 IT개발자의 일상을 보고 여의도 고층 사무실에 있는 핀테크 스타트업에 다니는 청년의 하루를 보여준다.
미국 대학을 졸업하고 페이스북에서 5년간 일하고 국내에 들어온 친구가 회사의 Data Foundation team이라는 곳의 팀장 업무를 담당하고 있다. 직접 코딩도 하고, 팀원들도 챙기고, CEO와 미팅도 하고.
특이한 건 랩탑을 2개 사용하고 있었다는. 하나는 문서 작업 용, 다른 하나는 코딩 용이라고 하는데 왜 그렇게 나눠서 사용하는 지는 잘 모르겠지만…
암튼 문득 생각이 들었다. 절대로 이 회사는 저런 회사를 따라갈 수 없다고.</description></item><item><title>I love AKMU</title><link>https://cychong47.github.io/post/2021/2021-03-07-i-love-akmu/</link><pubDate>Sun, 07 Mar 2021 00:04:22 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-07-i-love-akmu/</guid><description/></item><item><title>책상 아래 stool</title><link>https://cychong47.github.io/post/2021/2021-03-06-stool-under-the-desk/</link><pubDate>Sat, 06 Mar 2021 17:12:50 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-06-stool-under-the-desk/</guid><description/></item><item><title>Install cockpit - linux server manager</title><link>https://cychong47.github.io/post/2021/2021-03-04-install-cockpit/</link><pubDate>Thu, 04 Mar 2021 22:06:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-04-install-cockpit/</guid><description>$ sudo apt install -y cockpit sssd-dbus $ sudo ufw allow 9090/tcp ; sudo systemctl start cockpit` $ ss -tunlp |grep 9090 tcp LISTEN 0 4096 *:9090 *:* CPU load 정보가 주기적으로 100%까지 튀네. 거의 10초 단위로. 뭘까 여러 개의 리눅스 서버가 있는 경우 한 곳에 추가해서 single glass of pane을 만들 수도 있다. 추가된 서버들은 dashboard에서 drop list로 보여지므로 원하는 대상을 선택</description></item><item><title>Change the server IP address of k3s</title><link>https://cychong47.github.io/post/2021/2021-03-03-change-the-server-ip-address-of-k3s/</link><pubDate>Wed, 03 Mar 2021 13:17:28 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-03-change-the-server-ip-address-of-k3s/</guid><description>How to change IP address of k3s By default, as k3s operates in the local host, it is not possible to connect from other host.
To get the server Ip address,
$ kubectl config view --raw |grep server server: https://127.0.0.1:6443 The listening server IP address can be specified by giving parameter in running the k3s binary.
K3s configuration is on /etc/systemd/system/k3s.service
$ cat /etc/systemd/system/k3s.service [Unit] Description=Lightweight Kubernetes Documentation=https://k3s.io Wants=network-online.target After=network-online.target [Install] WantedBy=multi-user.</description></item><item><title>Memory</title><link>https://cychong47.github.io/post/2021/2021-03-01-memory/</link><pubDate>Mon, 01 Mar 2021 14:24:44 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-03-01-memory/</guid><description/></item><item><title>DTTG web archive results</title><link>https://cychong47.github.io/post/2021/2021-02-18-dttg-web-archive-results/</link><pubDate>Thu, 18 Feb 2021 09:48:36 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-18-dttg-web-archive-results/</guid><description/></item><item><title>Devonthink - iCloud CloudKit sync</title><link>https://cychong47.github.io/post/2021/2021-02-12-change-devonthink-sync/</link><pubDate>Fri, 12 Feb 2021 23:52:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-12-change-devonthink-sync/</guid><description>Devonthink To Go 3.0과 함께 추가된 iCloud CloudKit 을 이용한 싱크 기능. 기존 iCloud 보다 2배 빠르다고 해서 바꿔봤다. 바꾸는 방법이 명확하지 않아 보였는데 다행히 devonthink discussion forum에 공식 가이드가 올라와서 따라해 봤는데 별 문제없이 잘 적용되었다. 속도도 정말 빠른 듯. Mac에서 동기화하는데 정말 수 분 내 1.7G짜리 데이터베이스 파일이 동기화되었고, iPad나 iPhone에서도 금방 처리가 되었다. 썩 괜찮네.</description></item><item><title>Devonthink To Go 3</title><link>https://cychong47.github.io/post/2021/2021-02-11-devonthink-to-go-3-/</link><pubDate>Thu, 11 Feb 2021 15:11:27 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-11-devonthink-to-go-3-/</guid><description>Devonthink To Go 3이 나왔다는.
1.0에서 2.0으로 업그레이드는 무료였지만, 이번에는 유로 업그레이드라고. 그래도 그냥 새로 구입하는 거에 비하면 반값 정도고, 기존 2.0 사용자는 7월 말까지 무료로 사용할 수 있고, 기존 앱하고도 함께 사용할 수 있다고(Tweetbot도 그렇지만, 요금제가 변경되다 보니 기존 것을 무조건 업그레이드 해버리는 짓은 하지 않네)
당연히 손해 볼 게 없으니 바로 설치.
여러가지 기능이 추가되었다고는 하는데 잘 모르겠네. 속도가 빨라진 것 같긴 한데 그 외에는 아직&amp;hellip; 그리고 iCloud 싱크 방법도 기존대비 달라진 새로운 방법을 추가로 지원하는데 언제나 그렇듯이 그다지 친절하지 않다.</description></item><item><title>What if Jobs does not listen voice of employee</title><link>https://cychong47.github.io/post/2021/2021-02-11-what-if-jobs-does-not-listen-voice-of-employee/</link><pubDate>Thu, 11 Feb 2021 14:17:38 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-11-what-if-jobs-does-not-listen-voice-of-employee/</guid><description>m1은 전문가 직원의 의견이 무시되지 않고 관철된 결과로 봐야겠지?
이런 배포(?)를 가진 이도 없고,
이런 혜안/실력을 가진 이도 없고,
이런 말을 할 수 있는 분위기는 뭐 말할 것도 없고.
물론 저 당시 애플이라고 많이 달랐을까 하는 의문은 있긴 하지만&amp;hellip;
그냥 지금 내 주변을 생각하면 많이 안타깝다는 마음만 든다.
문장에 담긴 의미나 기술적으로 맞고 틀림에는 별 관심이 없고, 문장으로의 적확성만 따지는 분위기가 팽배한&amp;hellip;</description></item><item><title>Moon in the sky</title><link>https://cychong47.github.io/post/2021/2021-02-09-moon-in-the-sky/</link><pubDate>Tue, 09 Feb 2021 07:20:46 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-09-moon-in-the-sky/</guid><description/></item><item><title>True for the Motivation</title><link>https://cychong47.github.io/post/2021/2021-02-06-true-for-the-motivation/</link><pubDate>Sat, 06 Feb 2021 09:20:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-06-true-for-the-motivation/</guid><description/></item><item><title>100 Tips for a better life</title><link>https://cychong47.github.io/post/2021/2021-02-06-100-tips-for-a-better-life/</link><pubDate>Sat, 06 Feb 2021 09:12:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-06-100-tips-for-a-better-life/</guid><description/></item><item><title>goodlinks supports export finally</title><link>https://cychong47.github.io/post/2021/2021-02-05-goodlinks-supports-export-finally/</link><pubDate>Fri, 05 Feb 2021 23:25:00 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-05-goodlinks-supports-export-finally/</guid><description>macstories.net에서 추천 글을 보고 구입했던 Goodlinks app. 구입까지 하면서 까지 기대했던 기능은 그간 pocket을 이용하던 read-it-later 용도였는데 아쉽게도 추천글에 비해 부족한 점이 많았다. 무엇보다 이건 앱을 설치하자 마자 부푼 기대감에 그간 pocket에 모아둔 2만개가 넘는 글들을 모두 한번에 옮겨서 그런 듯 하다. 무려 2014년부터 모았던 글들인데 그 덕분인지 여러가지 예상하지 못했던 문제점이 눈에 띄었다.
가장 큰 문제는 앱에서 글을 다운로드 하는데 너무 데이터를 많이 사용한다는 점. 앱 특성상 저장된 글의 내용 자체를 다운로드 해서 보여주는데 어떤 문제가 있는 지 불과 몇 시간 만에 1GB의 데이터를 사용해 버렸다.</description></item><item><title>ESR magsafe car charger</title><link>https://cychong47.github.io/post/2021/2021-02-04-esr-magsafe-car-charger/</link><pubDate>Thu, 04 Feb 2021 18:45:55 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-04-esr-magsafe-car-charger/</guid><description/></item><item><title>Something is broken</title><link>https://cychong47.github.io/post/2021/2021-02-03-something-is-broken/</link><pubDate>Wed, 03 Feb 2021 17:37:52 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-02-03-something-is-broken/</guid><description/></item><item><title>Welcome iPhone 12 Pro Max</title><link>https://cychong47.github.io/post/2021/2021-01-26-welcome-iphone-12-pro-max/</link><pubDate>Tue, 26 Jan 2021 22:41:15 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-01-26-welcome-iphone-12-pro-max/</guid><description>망가져서(이렇게 제대로 망가진 아이폰은 처음인) 사용할 수 없는 X. 어제까지 사용하던 SE 2 그리고 이번에 새로 구입한 12 Pro Max.
아이폰에서는 처음으로 큰 크기의 제품을 사용해 보는 데(X 전까지는 늘 플러스 모델이 아니라 기본 크기의 모델을 사용) 늘 비슷한 폼팩터를 사용하는 것도 지겹고, 노안 때문에 화면이 좀 더 컸으면 좋겠다는 생각 그리고 카메라가 제일 좋은 게 Pro Max라 이번에는 과감히 제일 큰 모델로 구입. 그냥 Pro보다 가격은 비싸지만, 그래도 카메라를 제일 쓰는 게 분명히(?</description></item><item><title>Farewell Mac-mini 2011</title><link>https://cychong47.github.io/post/2021/2021-01-02-farewell-mac-mini-2011/</link><pubDate>Sat, 02 Jan 2021 20:30:19 +0900</pubDate><guid>https://cychong47.github.io/post/2021/2021-01-02-farewell-mac-mini-2011/</guid><description>맥미니의 팬이 동작하지 않는 걸 고쳤다. 간단한 문제였는데 팬 전원 케이블이 연결되지 않아서 그랬다는. 팬 문제를 고친 김에 모니터를 연결해 보니 사과 마크 아래 진행바가 20%에서 멈춰 진행이 되질 않는다. 그래서 OS가 문제인가 싶어 Ubuntu를 설치하려고 부팅 디스크를 만들었는데 부팅할 때 Alt 키를 눌러서 부팅 미디어 선택 화면이 나오질 않는다.
https://www.clien.net/service/board/cm_mac/9288775
그러나 위의 글을 발견했다. ㅜ 얼마전에 2011 미니로 같은 증상 겪었습니다. 저는 수명다한 ssd가 문제였습니다. 있던 ssd를 빼고 진행하니 다시 제대로 동작하더라구요.</description></item><item><title>ARM processor를 기다리며</title><link>https://cychong47.github.io/post/2020/2020-12-27-go-go-ms-for-arm/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-12-27-go-go-ms-for-arm/</guid><description>AWS 에서의 인스턴스 CPU market share 변화 (Intel vs AMD vs Graviton)
최근 Intel이 몇 번(몇 년간의) 삽질을 반복하고 있는 사이, AMD가 온 세상이 주목할 정도로 경쟁력있는 제품을 내놓아 시장에서 인정을 받아가고 있고, 수 년 전에 한번 세간의 이목을 잠시 받았다 이내 사그러들었던 ARM processor 기반의 컴퓨터들이 주목받고 있다. ARM은 특히 Apple의 결단이 큰 계기가 될 듯 한데, 적어도 MAC을 사용하는 사용자들의 사용 머신을 Intel에서 모두 ARM으로 옮길 것이고, Intel이나 AMD에서 M1과 대적할 수 있는 x86 프로세스를 내놓지 못하면 많은 사람들이 Apple의 M1과 그 후속 프로세서를 이용한 제품 사용자로 넘어갈 것 같다.</description></item><item><title>KLDP T-shirts</title><link>https://cychong47.github.io/post/2020/2020-12-25-kldp-t-shirts/</link><pubDate>Fri, 25 Dec 2020 17:36:52 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-12-25-kldp-t-shirts/</guid><description>이젠 추억이 되어 버린. 한동안 장롱 속에 품고 있다 얼마전에 사진 한 장 찍어놓고, 재활용 함으로 보냈다.
KLDPWiki: Linuxdoc Sgml/Kerneld KLDPWiki: Linuxdoc Sgml/IP-Subnetworking KLDPWiki: Linuxdoc Sgml/Sendmail-Address-Rewrite</description></item><item><title>Cloud of one fine day</title><link>https://cychong47.github.io/post/2020/2020-12-21-cloud-of-one-fine-day/</link><pubDate>Mon, 21 Dec 2020 16:09:48 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-12-21-cloud-of-one-fine-day/</guid><description/></item><item><title>Apple Silicon - M1 Soc</title><link>https://cychong47.github.io/post/2020/2020-11-13-apple-m1-soc/</link><pubDate>Sun, 15 Nov 2020 22:12:44 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-11-13-apple-m1-soc/</guid><description>역사는 반복된다. 2005년 PowerPC processor에서 Intel CPU로의 전환 발표 후 2006년 첫 제품을 내 놓은 후 다시 15년 만에 이번에는 ARM 기반 자체 CPU인 Apple Silicon으로의 전환을 발표하고, 11월 제품 발표회에서 첫번째 Apple Silicon인 M1 칩 기반의 Apple Macbook Air, Macbook Pro 그리고 Mac mini 제품을 출시했다.
대학 다닐 때 Apple이 자사 제품에 사용하던 processor를 기존 Motorola 68xxx 시리즈에서 Apple, IBM 그리고 Motorola(나중에 processor division만 분리해서 Freescale로 분사)가 합작해서 만든 RISC 기반의 PowerPC processor로 전환해서 제품 경쟁력 강화를 꾀했던 게 기억난다.</description></item><item><title>냉각수 부족 경고가 뜨면</title><link>https://cychong47.github.io/post/2020/2020-11-07-emergency-in-volvo/</link><pubDate>Sat, 07 Nov 2020 20:12:21 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-11-07-emergency-in-volvo/</guid><description>갑자기 V40에서 냉각수 부족 경고가&amp;hellip;.
그럴 때는 근처 약국에 가서 증류수를 사서 보충하면 된다고. 수돗물도 괜찮지만, 겨울철에 얼어 붙을 수가 있어 가장 좋은 건 증류수.
절대 생수는 안된다고.</description></item><item><title>Chapter 2. CUDA Memory Management</title><link>https://cychong47.github.io/post/2020/2020-11-02-chapter-2.-cuda-memory-management/</link><pubDate>Mon, 02 Nov 2020 08:56:16 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-11-02-chapter-2.-cuda-memory-management/</guid><description>2. CUDA Memory Management Most of the application’s performance will be bottlecked by memory-related constraints GPU RAM BW : 900GB/s (DDR3 ?) NV Visual Profiler Global memory is a staging area where all of the date gets copied from CPU memory. Global Memory(device memory) is visible to all of the threads in the kernel and also visible to CPu. Coalesced vs. uncoalesced global memory access coalesced global memory access : Sequential memory access is adjacent Warp Warp is a unit of thread scheduling/execution in SMs.</description></item><item><title>Chapter 1. Introduction to CUDA Programming</title><link>https://cychong47.github.io/post/2020/2020-11-02-chapter-1-introduction-to-cuda-programming/</link><pubDate>Mon, 02 Nov 2020 08:55:34 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-11-02-chapter-1-introduction-to-cuda-programming/</guid><description>1. Introduction to CUDA Programming CPU Architecture is optimized for low latency accessing while GPU architecture is optimized for data parallel throughput compution CPU hides latency of data by frequently stroring used data in caches and utilize the temporal locality In CUDA, the execution unit is a warp not a thread. Context switching is happens between the warps and not threads. GPU has lots of registers, all the thread context switching information is already present in the registers.</description></item><item><title>How to get CPU utilization data with python</title><link>https://cychong47.github.io/post/2020/2020-10-22-how-to-get-cpu-utilization-data-with-python/</link><pubDate>Thu, 22 Oct 2020 05:46:49 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-22-how-to-get-cpu-utilization-data-with-python/</guid><description>Python을 이용해서 손 쉽게 CPU 사용량 정보를 알아낼 수 있는 방법. Physical core 별, logical core 별(Hyper-threading을 켠 경우), 각 core 별 사용량 정보 등을 쉽게 알아낼 수 있다. 이거 C로 짜려면 은근 귀찮은데. 어떻게 해당 정보들을 알아내는 지 궁금하네. 코드를 한번 봐야겠군.</description></item><item><title>Use the Secret and ConfigMaps</title><link>https://cychong47.github.io/post/2020/2020-10-19-use-the-secret-and-configmaps/</link><pubDate>Mon, 19 Oct 2020 14:21:03 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-19-use-the-secret-and-configmaps/</guid><description>Use the Secret and ConfigMaps $ cat my-secret.yaml apiVersion: v1 kind: Secret metadata: name: mysecret type: Opaque stringData: WSO2_CLOUD_ORG_KEY: &amp;#34;mycompany&amp;#34; WSO2_CLOUD_EMAIL: &amp;#34;sample-email@wso2.com&amp;#34; WSO2_CLOUD_PASSWORD: &amp;#34;password&amp;#34; $ kubectl apply -f my-secret.yaml secret/mysecret created From Using Kubernetes Secrets as Environment Variables
spec: containers: - env: - name: WSO2_CLOUD_ORG_KEY valueFrom: secretKeyRef: name: mysecret key: WSO2_CLOUD_ORG_KEY ... apiVersion: v1 kind: Secret metadata: name: my-tokens type: Opaque stringData: pinboard_key: &amp;#34;FIXME&amp;#34; pocket_consumer_key: &amp;#34;FIXME&amp;#34; pocket_access_token: &amp;#34;FIXME&amp;#34; slack_api_token: &amp;#34;FIXME&amp;#34; slack_events_token: &amp;#34;FIXME&amp;#34; slack_verification_token: &amp;#34;FIXME&amp;#34; slack_signing_secret: &amp;#34;FIXME&amp;#34; telegram_token: &amp;#34;FIXME&amp;#34; telegram_api_id: &amp;#34;FIXME&amp;#34; telegram_api_hash: &amp;#34;FIXME&amp;#34; $ kubectl apply -f my-tokens.</description></item><item><title>How to make cronjob to support timezone</title><link>https://cychong47.github.io/post/2020/2020-10-19-how-to-fix-no-timezone-support-of-cronjob/</link><pubDate>Mon, 19 Oct 2020 14:16:45 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-19-how-to-fix-no-timezone-support-of-cronjob/</guid><description>Problem CronJob이 지정된 시간에 잘 동작했는 지 확인해 본 결과 이상한 점을 발견했다.
오후 2시 32분에 CronJob 의 동작을 확인했는데 이전에 실행된 시간이 4시간 32분 전이라고, 즉 새벽 1시가 아니라 오전 10시에 실행이 되었다는 나오는 것이다.
$ date Sat Oct 10 14:32:36 KST 2020 $ kubectl get cronjob NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE pocket-stat 0 1 * * * False 0 4h32m 14h 혹시 10시를 1시로 잘못 설정했나 하고 kubectl describe cronjob 명령으로 확인해 봤지만 schedule 정보는 정상적으로 설정되어 있었다는.</description></item><item><title>New homelab rack</title><link>https://cychong47.github.io/post/2020/2020-10-19-new-homelab-rack/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-19-new-homelab-rack/</guid><description>서재 방을 뒤집으면서 이참에 책상 밑, 뒤 등에 숨겨(?)놨던 맥미니, 공유기, 나스 등을 나름 랙에 모아놓고, 랜선이 나오는 바로 벽 바로 옆에 뒀다. 그 덕에 벽에서 책상쪽으로 건너가기 위해 바닥에 있던 선 들이 이제 1개로 줄었다. 이전에는 전원선 2개, 유선 랜 2개 였는데 이제는 전원선 하나만 보냈다는.
덕분에 바닥이 깔끔해 지긴 했는데 랙이 너무 비좁다.
IKEA 칼락스가 하나 있으면 딱 일 것 같은데. 당근에서 저렴하게 하나 안 나오나?</description></item><item><title>Too cute to me</title><link>https://cychong47.github.io/post/2020/2020-10-17-too-cute-to-me/</link><pubDate>Sat, 17 Oct 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-17-too-cute-to-me/</guid><description/></item><item><title>주기적으로 실행되는 앱은 CronJob으로</title><link>https://cychong47.github.io/post/2020/2020-10-09-cronjob-in-kubernetes/</link><pubDate>Fri, 09 Oct 2020 02:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-09-cronjob-in-kubernetes/</guid><description>만일 job을 일정 주기 혹은 특정 시간에 실행시키려면 CronJob resource를 만들어 사용하면 된다.
Job과 CronJob간의 관계는? CronJob에 대한 설명에 따르면 CronJob정의에 기술한 특정 시간이 되면 CronJob이 Job을 실행한다고. 그리고 그 Job이 Pod를 실행한다.
그럼 Job을 위한 resource 정의와 CronJob을 위한 resource 정의를 각각 정의해야 하나? 그렇지는 않은 듯. CronJob의 정의 파일을 보면 JobTemplate 항목이 Job에서 볼 수 있는 Template과 유사한 container spec 등을 가지고 있다. 물론 CronJob 에서만 유효한 schedule spec 등을 추가로 가지고 있긴 하지만.</description></item><item><title>일회성 앱은 Deployment가 아닌 Job으로</title><link>https://cychong47.github.io/post/2020/2020-10-09-job-instead-of-deployment/</link><pubDate>Fri, 09 Oct 2020 01:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-09-job-instead-of-deployment/</guid><description>한 번 실행되면 데몬 처럼 계속해서 동작하는 앱이 아니라 필요한 일을 수행하고 종료되는 앱도 있다. 실행된 시점에 필요한 일을 수행하고 종료하는 형태로 예를 들면 특정 위치에 있는 파일을 처리하고 종료한다거나, 실행된 시점에 외부 서비스에서 필요한 정보를 가져와 어딘가 저장하는 등의 일을 하는. 이런 종류의 앱을 kubernetes에서 Deployment로 배포한 경우 해당 앱은 자신이 해야 할 일을 정상적으로 수행하고 종료되지만, kubernetes scheduler 입장에서는 해당 container가 (의도하지 않게) 종료된 것으로 판단하여 다시 복구하는 절차를 수행한다.</description></item><item><title>Install Influxdb and Grafana With Helm</title><link>https://cychong47.github.io/post/2020/2020-10-04-install-influxdb-grafana-with-helm/</link><pubDate>Sun, 04 Oct 2020 23:36:26 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-10-04-install-influxdb-grafana-with-helm/</guid><description>Install InfluxDB with helm GitHub - influxdata/helm-charts: Official Helm Chart Repository for InfluxData Applications 가 helm chart를 이용한 설치법을 제공하는 공식 페이지.
helm repo add influxdata https://helm.influxdata.com/ $ helm repo list WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/cychong/.kube/config WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/cychong/.kube/config NAME URL myhelmrepo https://cychong47.github.io/helm-chart/ infracloudio	https://infracloudio.github.io/charts influxdata https://helm.influxdata.com/ $ helm search repo influxdata NAME CHART VERSION	APP VERSION	DESCRIPTION influxdata/chronograf 1.</description></item><item><title>HomePod with stereo</title><link>https://cychong47.github.io/post/2020/2020-09-23-homepod-with-stereo/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-23-homepod-with-stereo/</guid><description>
아침에는 ‘Morning has broken’ 이지.</description></item><item><title>Dust for Github Arctic Program</title><link>https://cychong47.github.io/post/2020/2020-09-19-github-arctic-valut/</link><pubDate>Sat, 19 Sep 2020 08:38:22 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-19-github-arctic-valut/</guid><description>GitHub Archive Program
It is a hidden cornerstone of modern civilization, and the shared heritage of all humanity. The mission of the GitHub Archive Program is to preserve open source software for future generations.
GitHub Archive Program은 현재 전세계의 거의 모든 분야의 발전에 많은 기여한 OSS의 snapshot을 떠서 보존하는 프로그램이다. 마치 지구의 재난 후에도 인류가 멸종되는 것을 막기 위해 현재 인류가 섭취하는 곡물류의 씨앗을 냉동 보관하는 것과 유사한 것이다. 인류 최후의 보물창고, 종자 보관소!</description></item><item><title>Ipad-lost-celluar-suddenly</title><link>https://cychong47.github.io/post/2020/2020-08-25-ipad-lost-celluar-suddenly/</link><pubDate>Tue, 15 Sep 2020 14:27:17 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-25-ipad-lost-celluar-suddenly/</guid><description>갑자기 iPad가 carrier를 잡지 못하는&amp;hellip; 이때 해결책은 예상대로 U-SIM을 뺐다 다시 끼운다.
흔하지는 않아도 종종 있는 현상이라고. 한번도 핸드폰에서 경험한 적이 없었는데 왜 iPad에서 끼운 지 2달 밖에 안된 U-SIM이 그런 걸까?</description></item><item><title>Apple gift card 10% 할인 구입</title><link>https://cychong47.github.io/post/2020/2020-09-13-purchase-an-apple-gift-card-with-10-percent-discount/</link><pubDate>Tue, 15 Sep 2020 12:17:54 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-13-purchase-an-apple-gift-card-with-10-percent-discount/</guid><description>신한카드와 아마존 이벤트로 100불 이상 구매 시 10% 할인. 어차피 iCloud 월간 구독 비용도 내야 하고, 앱도 살 일이 생길 테니.</description></item><item><title>블로그에 몇 몇 사진이 안 보이는 문제 해결</title><link>https://cychong47.github.io/post/2020/2020-09-12-image-is-not-jpg-but-heic/</link><pubDate>Sat, 12 Sep 2020 22:26:02 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-12-image-is-not-jpg-but-heic/</guid><description>혹시나 했더니 사진 파일 형식이 JPEG이 아니라 HEIC(High Efficiency Image File) 였다는.
아이패드에서는 사진을 찍지 않고, 아이폰으로만 사진을 찍고 있는데, 사진을 Mac으로 옮길 때 사용하는 PhotoSync에서는 파일 변환 기능을 켜서 자동으로 JPG로 변환하고 있으니 거기서 올린 사진은 아닌 듯 하고, iPad에서 iOS shortcut을 이용해서 git repo에 직접 사진을 업로드하는데, 이때 올린 사진이 iPhone에서 HEIC로 저장하고, iCloud를 통해 iPad로 동히과된 사진이었다.
iOS Shortcut에서는 사진의 크기를 resize만 해서 올리고 있어서 그랬다는.
사진을 그냥 Mac에서 열었을 때는 전혀 문제 없이 열리고, 같은 MD 파일에 정상적으로 표시되는 다른 JPG 파일을 포함시켜도 잘 출력이 되서 찾기가 힘들었는데 화면에 표시가 잘 되는 사진과 잘 되지 않는 것 사이에 무슨 차이가 있나 하고 확인한 exiftool에서 단서를 찾은 것이다.</description></item><item><title>Helmize Slackbot</title><link>https://cychong47.github.io/post/2020/2020-09-10-helmize-slackbot/</link><pubDate>Thu, 10 Sep 2020 23:38:18 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-10-helmize-slackbot/</guid><description>docker로 실행할 대는 환경 변수 파일에 필요한 token정보 등을 적어서 넘겼는데
docker run -d -p 3010:3010 --env-file=slackbot.env my-slackbot helm으로 할 때는 configmap을 사용하거나, value의 env를 사용하거나 등등.
$ helm repo update Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the &amp;#34;infracloudio&amp;#34; chart repository ...Successfully got an update from the &amp;#34;myhelmrepo&amp;#34; chart repository Update Complete. ⎈Happy Helming!⎈ $ helm search repo slackbot NAME CHART VERSION	APP VERSION	DESCRIPTION myhelmrepo/slackbot	0.</description></item><item><title>Remove docker images referenced in multiple repos</title><link>https://cychong47.github.io/post/2020/2020-09-08-remove-docker-images-referenced-multiple-repos/</link><pubDate>Tue, 08 Sep 2020 23:38:16 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-08-remove-docker-images-referenced-multiple-repos/</guid><description>docker image를 GHCR(GitHub Container Registry)에 업로드한 다음 같은 image ID를 갖는 여러 항목이 나타났다. 그동안 local machine에 있던 docker image를 GHCR에 업로드 했으니 더 이상 local host에 이미지가 없어도 되지 않을까 하는 생각에 원래 있던 image를 삭제하려고 하는데 이 경우 에러가 발생한다.
cychong@mini1:~/work/slackbot$ docker images |grep slackbot my-slackbot latest 16cdaacd672e 5 days ago 133MB ghcr.io/cychong47/my-slackbot 0.1 16cdaacd672e 5 days ago 133MB ghcr.io/cychong47/slackbot 0.1 16cdaacd672e 5 days ago 133MB cychong@mini1:~/work/slackbot$ docker images |grep pocket pocket-retagger latest 942ef4cc7a60 2 days ago 285MB ghcr.</description></item><item><title>Add new Helm Chart</title><link>https://cychong47.github.io/post/2020/2020-09-07-add-new-helm-chart/</link><pubDate>Mon, 07 Sep 2020 21:40:44 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-07-add-new-helm-chart/</guid><description>helm chart 추가하기 charts 디렉토리 아래에 추가할 helm chart 만들기 이번에는 기존에 만들어 사용하던 ghost chart를 등록해 본다. 일단 ghost chart를 아래와 같이 charts/ghost 디렉토리에 복사하고 lint 검사.
cychong@mini1:~/work/helm/my-helm-chart$ helm lint charts/ghost/ ==&amp;gt; Linting charts/ghost/ [INFO] Chart.yaml: icon is recommended 1 chart(s) linted, 0 chart(s) failed Helm chart 패키징 cychong@mini1:~/work/helm/my-helm-chart$ helm package charts/* Successfully packaged chart and saved it to: /home/cychong/work/helm/my-helm-chart/my-ghost-0.1.0.tgz Successfully packaged chart and saved it to: /home/cychong/work/helm/my-helm-chart/nginx-0.2.0.tgz cychong@mini1:~/work/helm/my-helm-chart$ ls *.</description></item><item><title>Botkube to monitor K8s cluster in Slack</title><link>https://cychong47.github.io/post/2020/2020-09-04-install-botkube/</link><pubDate>Fri, 04 Sep 2020 23:51:45 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-04-install-botkube/</guid><description>Install BotKube for k8s and slack Slack :: Messaging bot for monitoring and debugging Kubernetes clusters
cychong@mini1:~$ helm repo add infracloudio https://infracloudio.github.io/charts &amp;#34;infracloudio&amp;#34; has been added to your repositories cychong@mini1:~$ helm repo update Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the &amp;#34;infracloudio&amp;#34; chart repository ...Successfully got an update from the &amp;#34;myhelmrepo&amp;#34; chart repository Update Complete. ⎈ Happy Helming!⎈ botkube를 위한 namespace 만들어주기</description></item><item><title>Slackbot get the song list</title><link>https://cychong47.github.io/post/2020/2020-09-03-slackbot-get-the-song-list/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-09-03-slackbot-get-the-song-list/</guid><description/></item><item><title>RSS feed URL for podcast</title><link>https://cychong47.github.io/post/2020/2020-08-31-rss-feed-url-for-podcast/</link><pubDate>Mon, 31 Aug 2020 10:09:56 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-31-rss-feed-url-for-podcast/</guid><description>http://sosa0sa.com:8099/podcast/index.xml
매번 까먹네. 중간에 podcast가 있다는 거. 블로그 자체는 http://sosa0sa.com:8099만으로 접속이 되니 저렇게 다른 경로가 기억이 나지 않네.
수정할 수 있는 지 확인해 봐야겠다.</description></item><item><title>Cannot wait for iOS14 GM</title><link>https://cychong47.github.io/post/2020/2020-08-31-cannot-wait-for-ios14-gm/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-31-cannot-wait-for-ios14-gm/</guid><description/></item><item><title>Windy day in watch face</title><link>https://cychong47.github.io/post/2020/2020-08-27-windy-day-in-watch-face/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-27-windy-day-in-watch-face/</guid><description/></item><item><title>Automate Blog Posting with GitHub Action</title><link>https://cychong47.github.io/post/2020/2020-08-19-automate-blog-posting-with-github-action/</link><pubDate>Wed, 19 Aug 2020 23:01:58 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-19-automate-blog-posting-with-github-action/</guid><description>https://ruddra.com/hugo-deploy-static-page-using-github-actions/ 에 있는 내용대로 git repository의 .github/workflows 아래 main.yml 몇 가지만 수정했더니 잘 동작하는 듯.
이미 Hugo용 github repo를 가지고 있으므로 내가 추가로 해야 할일은
GitHub 계정에서 Access Token 만들어서 Git repository에 Secret로 추가 GitHub Action 파일 작성 - .github/workflows/main.yml 일단 이거면 끝.
.github/workflows/main.yml name: CI on: push jobs: deploy: runs-on: ubuntu-latest steps: - name: Git checkout uses: actions/checkout@v2 - name: Update theme # (Optional)If you have the theme added as submodule, you can pull it and use the most updated version run: git submodule update --init --recursive - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#34;0.</description></item><item><title>Being the First is not enough</title><link>https://cychong47.github.io/post/2020/2020-08-19-being-the-first-is-not-enough/</link><pubDate>Wed, 19 Aug 2020 14:04:18 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-19-being-the-first-is-not-enough/</guid><description>폰 수리 때문에 받은 대여폰. 며칠 이라도 돈 나갈 일은 있을테니 은행앱을 설치하는데 신한은행은 인증서 요구하지 않고 본인 인증하고 로그인해서 이체 하는데 전혀 문제 없는데 SC은행은 인증서 없다고 거부. 다행히 미리 오픈뱅킹으로 연동해놔서 신한에서 SC계좌 접근이 가능해서 문제는 없는데.
매일 밤에는 계좌조회도 안되는 SC은행. 몇 년 전에는 적은 영업점 수를 경쟁 은행보다 앞선 인터넷 뱅킹 등으로 해결한다는 평이 많았는데 지금은 ‘갸우뚱’.
‘제일 먼저’가 큰 의미를 갖는 건 맞지만 시간이 조금 지난 시점에는 그것보다는 ‘제일 우수’한 게 만 배는 더 중요하다.</description></item><item><title>Setup GitHub based Helm repo</title><link>https://cychong47.github.io/post/2020/2020-08-19-setup-github-based-helm-repo/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-19-setup-github-based-helm-repo/</guid><description>Setup GitHub based Helm repo GitHub에 구성한 helm repository에 있는 Helm chart를 이용해서 nginx deploy하기
GitHub에 Helm Repository 구축하기 Create a public Helm chart repository with GitHub Pages | by Mattia Peri | Medium 글을 참고해서 따라하면 특별한 문제 없이 Helm Repostiroy로 동작할 GitHub Page를 만들 수 있다.
cychong@mini1:~/tmp$ wget https://cychong47.github.io/helm-chart/index.html --2020-08-18 23:49:28-- https://cychong47.github.io/helm-chart/index.html Resolving cychong47.github.io (cychong47.github.io)... 185.199.111.153, 185.199.109.153, 185.199.110.153, ... Connecting to cychong47.github.io (cychong47.github.io)|185.199.111.153|:443... connected. HTTP request sent, awaiting response.</description></item><item><title>Any pattern?</title><link>https://cychong47.github.io/post/2020/2020-08-17-any-pattern/</link><pubDate>Mon, 17 Aug 2020 00:09:30 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-17-any-pattern/</guid><description>9개 아이콘에 숨어있는 패턴은?</description></item><item><title>전람회</title><link>https://cychong47.github.io/post/2020/2020-08-16-exihibition/</link><pubDate>Sun, 16 Aug 2020 21:47:22 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-16-exihibition/</guid><description>오전에는 누군가 올려놓은 JTBC 슈가맨 보고 눈물 찔끔 흘리고, 오후에는 놀면 뭐하니에서 추억을 이야기하는 장면, 특히 배경에 깔리던 전람회의 노래를 듣고 또 눈물 찔끔.
오랜만에 전람회의 노래가 듣고 싶었다.
이젠 스트리밍 서비스 덕에 언제든지 원하는 노래를 들을 수 있어 좋네.
오디오 좋기로 나름 소리를 듣고 있는 볼보 타고 볼륨 크게 해서 들으니 너무 좋네.
갑자기 홈팟이 끌린다.
예민해진 내 귀를 위해 이 정도 투자하는 건 괜찮지 않을까?</description></item><item><title>Publish hugo post from iPad</title><link>https://cychong47.github.io/post/2020/2020-08-11-publish-hugo-post-from-ipad/</link><pubDate>Tue, 11 Aug 2020 14:16:01 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-11-publish-hugo-post-from-ipad/</guid><description>iPhone 이나 iPad에서 사진을 골라 사진과 markdown 파일을 만들어 Working Copy를 통해 git repo에 업로드하는 Shortcut을 마련했다.
Shortcut의 원본은 이 블로그(Posting to Hugo from iOS에서 얻었다.
Front formatter만 일부 수정하면 그대로 사용할 수 있을 정도로 내가 기대하는 workflow가 구현이 되어 있었다. 실은 문법도 잘 모르면서 괜히 손을 댔다 제대로 동작 안하게 했다 다시 고치느라 시간만 보냈다는.
이 Shortcut이 하는 일은 위 블로그에도 자세하게 설명되어 있지만(친절한 분&amp;hellip;)
넘겨 받은 사진을 가로 1280 픽셀 크기로 조정 블로그 타이틀 입력 사진명을 오늘 날짜-블로그 타이틀로 만든 slug.</description></item><item><title>Limitation of free tier</title><link>https://cychong47.github.io/post/2020/2020-08-11-limit-of-free-tier/</link><pubDate>Tue, 11 Aug 2020 14:12:28 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-11-limit-of-free-tier/</guid><description>1 physical core도 안되는 CPU를 사용하는 free timer의 한계인가?
덧) 저 일이 있은 후에는 또 안정적으로 돌고 있다는&amp;hellip; 날짜별로 통계를 뽑아봐야겠다.</description></item><item><title>쉽게 rollback할 수 있는 SW</title><link>https://cychong47.github.io/post/2020/2020-08-10-easy-rollback-sw-release/</link><pubDate>Mon, 10 Aug 2020 18:18:26 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-10-easy-rollback-sw-release/</guid><description>완벽한 SW면 더할 나위 없겠지만, 그것 외에도 SW의 신뢰도를 높이는 방법 중 하나는 쉽게 rollback할 수 있는 능력이 아닐까 싶다.</description></item><item><title>비난하지 않는 문화</title><link>https://cychong47.github.io/post/2020/2020-08-10-blame-based-development/</link><pubDate>Mon, 10 Aug 2020 18:08:38 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-10-blame-based-development/</guid><description>정말 멋지다. 저런 문화를 가진 곳이 있다니.
어떤 ㅇ이유로 저런 게 가능한 지 모르겠지만, 아무튼 그 결과는 좋은 문화가 유지되고 확산될 거라는 상상을 하게 한다. 악의를 가지고 실수를 하는 사람은 흔치 않을테니.</description></item><item><title>스탠딩 데스크 아래 해먹이라니</title><link>https://cychong47.github.io/post/2020/2020-08-08-hammok-under-the-standing-desk/</link><pubDate>Sat, 08 Aug 2020 23:51:23 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-08-hammok-under-the-standing-desk/</guid><description>Instagram에서 StandingDesk라는 태그를 following하고 있는데 오늘 본 멋진 사진.
창 밖 풍경이 너무 멋져 보인다.
징베 있는 책상을 바꾼다고 저런 뷰가 나오지는 않겠지만, 요즘 점점 책상에 앉아 뭔가를 하는게 힘들어서 Standing Desk를 보고 있긴한데 그냥 보고만 있다.</description></item><item><title>iPhone6 home screen</title><link>https://cychong47.github.io/post/2020/2020-08-08-iphone6-home-scree/</link><pubDate>Sat, 08 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-08-iphone6-home-scree/</guid><description>iPhoneX가 망가져 급히 집에 있는 iPhone6에 USIM을 옮겨서 사용하고 있다. 아쉽게도 iPhone6S 부터 최신 버전의 iOS를 지원하고 있어 사용할 수 있는 iOS는 12.x
그 결과 몇 몇 앱은 최신 버전이 아닌 12.x에서 사용 가능한 버전이 설치된다. Shortcuts 앱은 설치는 되지만, iOS12용 Shortcuts과 iOS13용 Shortcuts 데이터 차이로 이전에 사용하던 shortcuts들을 사용할 수가 없다.
그리고 결정적으로 느리고. 마침 폰 케이스도 없어서 미끄럽고.
가뜩이나 iPhone 12는 예전과 같은 9월이 아니라 10월 출시될 가능성이 높다고 하는데 애고&amp;hellip;.</description></item><item><title>Too many panic logs from iPhoneX</title><link>https://cychong47.github.io/post/2020/2020-08-04-iphonex-panic-log/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-04-iphonex-panic-log/</guid><description>너무 많네. 수리센터 테크니션도 이거 보고 놀라는 듯.</description></item><item><title>Long time apps</title><link>https://cychong47.github.io/post/2020/2020-08-03-long-time-apps/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-03-long-time-apps/</guid><description>Tweetbot과 함께 하루 중 가장 많이 사용하는 앱인 Things는 2008년에 구입했구나. 중간에 1-2년 정도는 Omnifocus를 사용하다 돌아왔는데 Omnifocus는 여러 가지 프로젝트를 동시에 관리하기에는 편한데 많은 기능 때문에 너무 복잡한 느낌이. 간단하게 할일 관리할 때는 Things만한게 없는 듯.
Notability를 2014년에 구입(아마도 무료로 풀린 걸 받았던 걸로 기억)했네. 오래됐다. 그 동안 안 쓰다가 아이패드를 본격적으로 사용하기 시작하면서 이 앱도 열심히 쓰기 시작한 듯
Things가 새로운 이름(이라고 하지만 실은 이름에 버전 정보를 붙여서 새로 앱스토어에 등록한 거지만)이로 바뀐 거 말고 같은 이름을 유지하면서 지금도 사용하는 앱은 카카오지도가 제일 오래됐네.</description></item><item><title>Upgrade Kubernetes 1 18 2</title><link>https://cychong47.github.io/post/2020/2020-05-07-upgrade-kubernetes-1-18-2/</link><pubDate>Sat, 01 Aug 2020 22:52:47 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-05-07-upgrade-kubernetes-1-18-2/</guid><description>Upgrade kubernetes to 1.18.2
Note etcd might be need to be upgrade
cychong@mini1:~$ sudo kubeadm upgrade apply v1.18.2 [upgrade/config] Making sure the configuration is correct: [upgrade/config] Reading configuration from the cluster... [upgrade/config] FYI: You can look at this config file with &amp;#39;kubectl -n kube-system get cm kubeadm-config -oyaml&amp;#39; [preflight] Running pre-flight checks. [upgrade] Running cluster health checks [upgrade/version] You have chosen to change the cluster version to &amp;#34;v1.18.2&amp;#34; [upgrade/versions] Cluster version: v1.</description></item><item><title>의자 아래 정체 모를 플라스틱</title><link>https://cychong47.github.io/post/2020/2020-08-01-old-chair-wheel/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-08-01-old-chair-wheel/</guid><description>어느 날 부터인가 이상하게 책상 의자 아래에 부스러기들이 보이기 시작했다는.
의자에서 플라스틱에 떨어지는 것 같은데 의자에서는 흔적이 안 보이고.
며칠을 봐도 그 이유를 찾지 못했는데 알고 보니 의자 바퀴 플라스틱이 부스러지고 있었다는 거.</description></item><item><title>K8s Vertical Pod Autoscaler</title><link>https://cychong47.github.io/post/2020/2020-07-31-vertical-pod-autoscaler/</link><pubDate>Fri, 31 Jul 2020 00:01:03 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-31-vertical-pod-autoscaler/</guid><description>VPA는 K8s에서 Scale-in/out에 대한 기능을 제공.
현재 동작하고 있는 pod에 대해 pod restart 없이 할당된 resource를 변경하는 것은 아직 미지원인듯
github의 VPA repo https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
Updating running pods is an experimental feature of VPA. Whenever VPA updates the pod resources the pod is recreated, which causes all running containers to be restarted. The pod may be recreated on a different node.
https://stupefied-goodall-e282f7.netlify.app/contributors/design-proposals/autoscaling/vertical-pod-autoscaler/
In-place updates
In-place Pod updates (#5774) is a planned feature to allow changing resources (request/limit) of existing containers without killing them, assuming sufficient free resources available on the node.</description></item><item><title>Apple subscriptions update</title><link>https://cychong47.github.io/post/2020/2020-07-24-apple-subscriptions/</link><pubDate>Fri, 24 Jul 2020 06:56:44 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-24-apple-subscriptions/</guid><description>오늘 기준으로 이용하고 있는 subscription 들</description></item><item><title>Troubleshooting - rss.xml is not updated</title><link>https://cychong47.github.io/post/2020/2020-07-24-rss-is-not-updated/</link><pubDate>Fri, 24 Jul 2020 00:22:45 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-24-rss-is-not-updated/</guid><description>갑자기 어느 날 부터(정확히 말하면 7월 14일부터) podcast가 업데이트가 되지 않는다.
다음 날도, 그 다음 날도. 흠. 뭐가 문제일까?
아무튼 hugo를 이용해서 직접 사이트를 빌드해 봤다. 그랬더니 이상한 에러가 난다. os.Stat 파일이 없다는 이야기도 나오고.
뭔가 문제가 있는데 밤이라 그런지 그냥 단순하게 Hugo zen-theme 이 rss를 제대로 생성하지 못한다는 내용으로 검색을 해 봤는데 결과가 안 나온다.
cychong@mini1:~/work/cbs-ost$ hugo -t zen Building sites … WARN 2020/07/23 23:21:25 .File.UniqueID on zero object. Wrap it in if or with: {{ with .</description></item><item><title>매직키보드 단 iPad는 iPad가 아니다</title><link>https://cychong47.github.io/post/2020/2020-07-09-ipad-is-not-an-ipad/</link><pubDate>Thu, 09 Jul 2020 22:59:49 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-09-ipad-is-not-an-ipad/</guid><description>iPad 12.9 인치와 매직키보드를 구입해서 가지고 다니는데, 예전에 13인치 맥북프로를 가지고 외출할 때 사용하던 슬리브에 담아서 가지고 다녔다. 어렵사리 슬리브에 넣을 수 있을 정도라 가지고 다녔는데 슬리브 입구가 세로로 들어가는 방식이라 펜을 아이패드에 붙힌 상태로 넣기가 어렵고, 무엇보다 입구가 좁은 쪽에 있다 보니 꺼내기가 번거로웠다. 특히 매일 같이 퇴근 길에 카메라 봉인과 개인물품인지를 증명하는 스티커를 보안직원에게 보여줘야 하는데 그걸 하고는 슬리브에 다시 넣을 수가 없다. 그렇게 하려면 바닥에 두고 차근차근 하나씩 해야 하는데 그럴 공간도 없고, 그럴 시간도 없으니.</description></item><item><title>Deploy nginx with helm</title><link>https://cychong47.github.io/post/2020/2020-07-02-deploy-nginx-with-helm/</link><pubDate>Thu, 02 Jul 2020 23:58:41 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-02-deploy-nginx-with-helm/</guid><description>우선 docker로 실행한 nginx container를 종료시키고
cychong@mini1:~/work/helm-chart-github$ docker ps -a |grep nginx a66786635c60 nginx &amp;#34;/docker-entrypoint.…&amp;#34; 7 minutes ago Up 7 minutes k8s_nginx_my-nginx-77596b9fc6-7txns_default_44840d63-b496-4a58-9e18-83e503c6d2cf_0 85c85322ea59 k8s.gcr.io/pause:3.1 &amp;#34;/pause&amp;#34; 7 minutes ago Up 7 minutes k8s_POD_my-nginx-77596b9fc6-7txns_default_44840d63-b496-4a58-9e18-83e503c6d2cf_0 5be06dc3b184 nginx &amp;#34;nginx -g &amp;#39;daemon of…&amp;#34; 2 weeks ago Up 2 weeks 0.0.0.0:8099-&amp;gt;80/tcp podcast 2812c510a5b6 nginx &amp;#34;nginx -g &amp;#39;daemon of…&amp;#34; 2 weeks ago Up 2 weeks 0.0.0.0:80-&amp;gt;80/tcp sosa0sa cychong@mini1:~/work/helm-chart-github$ docker stop 5be06dc3b184 5be06dc3b184 nginx를 구동시킬 helm chart 준비</description></item><item><title>2020 06 28 Podcast Another Issue</title><link>https://cychong47.github.io/post/2020/2020-06-28-podcast-another-issue/</link><pubDate>Sun, 28 Jun 2020 23:27:48 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-28-podcast-another-issue/</guid><description>금요일 밤에 지난 오류를 수정한 후 토요일, 일요일에는 제대로 동작하는 듯&amp;hellip;
그런데 오늘 우연히 발견한 문제는 토요일과 금요일에 올라온 에피소드에 곡 목록이 없다. 추정되는 이유가 있긴했는데 집에 와서 확인해 보니 예상대로. 주말이라 곡 목록이 늦게 업데이트가 되었다.
토요일, 일요일 곡 목록이 모두 일요일 저녁 7시 반 경에 올라온 것이다.
흠.. 그렇다고 mp3를 그때 포스팅하지 않을 수도 없고. 이럴 때는 어떻게 해야 할까&amp;hellip;
고민 중..</description></item><item><title>How to embed video in hugo</title><link>https://cychong47.github.io/post/2020/2020-06-27-how-to-support-video/</link><pubDate>Sat, 27 Jun 2020 00:24:41 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-27-how-to-support-video/</guid><description>한줄요약 : Hugo로 만든 blog 에서 video 파일을 지원하려면 shortcode를 활용한다.
아래 shortcode는 mp3, mp4 파일을 지원하는 zen에서 사용하는 shortcode(zen/layouts/shortcodes/video.html)
&amp;lt;figure {{ with .Get &amp;#34;class&amp;#34; }}class=&amp;#34;{{ . }}&amp;#34;{{ end }}&amp;gt; &amp;lt;video controls preload=&amp;#34;{{ .Get &amp;#34;preload&amp;#34; | default &amp;#34;metadata&amp;#34; }}&amp;#34; {{ with .Get &amp;#34;width&amp;#34; }}width=&amp;#34;{{ . }}&amp;#34;{{ end }}&amp;gt; {{ with .Get &amp;#34;src&amp;#34; }}&amp;lt;source src=&amp;#34;{{ . | relURL }}&amp;#34; type=&amp;#34;video/mp4&amp;#34;&amp;gt;{{ end }} &amp;lt;/video&amp;gt; {{ with .Get &amp;#34;caption&amp;#34; }}&amp;lt;figcaption&amp;gt;{{ . }}&amp;lt;/figcaption&amp;gt;{{ end }} &amp;lt;/figure&amp;gt; 이 파일을 hugo site의 layouts/shortcodes 디렉토리에 복사하고 md 파일에서 다음과 같이 작성한다.</description></item><item><title>No Podcast Update?</title><link>https://cychong47.github.io/post/2020/2020-06-26-no-podcast-update/</link><pubDate>Fri, 26 Jun 2020 22:11:32 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-26-no-podcast-update/</guid><description>음
이건 무슨 상황일까?
mp3 파일은 레코딩이 제대로 되었고, md 파일도 만들었는데 site를 rebuild했다는 메시지가 오질 않는다. 안그래도 Telegram 을 이용해서 메시지를 보내는 기능을 추가해야 겠다고 생각했을때 아래처럼 정상적으로 동작하는 경우가 아니라 뭔가 문제가 있는 상황을 어떻게 알 수 있을까 하는 고민을 했었는데 생각보다 일찍 그 상황(아마도 많은 경우 중 하나 겠지만) 이 온 듯했다. 이렇게 메시지가 안 온 것으로 뭔가 문제가 있다는 걸 판단하는 건 비효율적인 방법이라 보다 적극적으로 어떤 비정상 상황이고, 가능하면 왜 그런 지도 파악해서 메시지를 보내게 할 필요가 있다는 생각을 했었는데&amp;hellip;</description></item><item><title>New Input Device Trio</title><link>https://cychong47.github.io/post/2020/2020-06-07-new-input-device-trio/</link><pubDate>Wed, 24 Jun 2020 01:11:13 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-07-new-input-device-trio/</guid><description/></item><item><title>Find container with its name</title><link>https://cychong47.github.io/post/2020/2020-06-22-docker-ps-with-name/</link><pubDate>Mon, 22 Jun 2020 23:54:09 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-22-docker-ps-with-name/</guid><description>Get docker container id from container name
docker ps -aqf &amp;#34;name=containername&amp;#34; docker ps -aqf &amp;#34;name=^containername$&amp;#34; -q for quiet. output only the ID -a for all. works even if your container is not running -f for filter. ^ container name must start with this string $ container name must end with this string</description></item><item><title>Setup podcast blog - 자동화</title><link>https://cychong47.github.io/post/2020/2020-06-20-setup-podcast-blog-5/</link><pubDate>Sat, 20 Jun 2020 22:33:02 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-20-setup-podcast-blog-5/</guid><description>Scripts Automation
mini2 - record mp3 file $ crontab -l 00 11 * * * cd /Users/cychong/work/cbs-ost/script &amp;amp;&amp;amp; ./record.sh &amp;gt;&amp;gt; /tmp/cron.out 2&amp;gt;&amp;amp;1 mini1 - create MD file and publish podcast $ crontab -l 04 12 * * * cd /home/cychong/work/cbs-ost/script &amp;amp;&amp;amp; ./scp.sh &amp;gt;&amp;gt; /tmp/cron.out 2&amp;gt;&amp;amp;1 05 12 * * * cd /home/cychong/work/cbs-ost/script &amp;amp;&amp;amp; ./publish.sh &amp;gt;&amp;gt; /tmp/cron.out 2&amp;gt;&amp;amp;1 Get mp3 file from mini2 Create md file after getting song list Rebuild site to publish the updated podcast</description></item><item><title>Git Tips</title><link>https://cychong47.github.io/page/git/</link><pubDate>Sat, 20 Jun 2020 21:54:31 +0900</pubDate><guid>https://cychong47.github.io/page/git/</guid><description>Open vim tabs with changed files vim -p `git diff --name-only` vim -p
-p[N] Open N tab pages. When N is omitted, open one tab page for each file. git diff --name-only
--name-only Show only names of changed files.</description></item><item><title>Disable Password for Private Github Repo</title><link>https://cychong47.github.io/post/2020/2020-06-19-disable-password-for-private-github-repo/</link><pubDate>Fri, 19 Jun 2020 06:41:02 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-19-disable-password-for-private-github-repo/</guid><description>github가 제공하는 private repository를 사용하니 ID와 암호를 매번 물어보길래 찾아 보니 이렇게 해결할 수 있다고.
source : How do I avoid the specification of the username and password at every git push?
$ git config credential.helper store $ git push https://github.com/repo.git Username for &amp;#39;https://github.com&amp;#39;: &amp;lt;USERNAME&amp;gt; Password for &amp;#39;https://USERNAME@github.com&amp;#39;: &amp;lt;PASSWORD&amp;gt; To set the timeout for &amp;ldquo;not-asking password&amp;rdquo;
git config --global credential.helper &amp;#39;cache --timeout 7200&amp;#39;</description></item><item><title>Setup podcast blog - recording 동작 확인</title><link>https://cychong47.github.io/post/2020/2020-06-18-setup-podcast-blog-2/</link><pubDate>Thu, 18 Jun 2020 23:10:45 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-18-setup-podcast-blog-2/</guid><description>듣고 싶은 mp3 파일을 mini2를 이용해서 1시간 짜리 녹음 동작확인 결과 정상 동작 확인
$ mp3info -p &amp;#34;%S&amp;#34; cinema-2020-06-18.mp3 3600 역시 mini1의 processing power 부족 때문에 제대로 1시간 녹음이 안된 듯.</description></item><item><title>Setup podcast blog - post 작성</title><link>https://cychong47.github.io/post/2020/2020-06-16-setup-podcast-blog-3/</link><pubDate>Tue, 16 Jun 2020 06:53:24 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-16-setup-podcast-blog-3/</guid><description>Podcast post 작성하기 Zen theme 덕분에 mp3 파일을 포함한 blog post를 markdown 파일로 작성하고 site build만 시키면 자동적으로 podcast feed를 만들어 준다.
https://github.com/frjo/hugo-theme-zen에 있는 내용을 보면 md 파일의 frontformatter에 아래 내용을 채워야 하는 듯 하다. 이 중에서 필수인 항목은 mp3 파일의 위치를 가리키는 mp3와 mp3 파일의 길이를 알려주는 duration 두 개 필요. hugo에서 image 파일 위치를 가리킬 때 static\images\a.jpg에 위치한 파일을 markdown 파일에서는 \images.a.jpg로 표현하는 것과 같은 형식을 사용하면 된다.</description></item><item><title>Setup podcast blog - Setup Hugo</title><link>https://cychong47.github.io/post/2020/2020-06-16-setup-podcast-blog-1/</link><pubDate>Tue, 16 Jun 2020 06:53:24 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-16-setup-podcast-blog-1/</guid><description>Install Create Hugo for podcast cychong15:writing_factory cychong$ hugo new site cbs-ost Congratulations! Your new Hugo site is created in /Users/cychong/workspace/writing_factory/cbs-ost. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command. 2. Perhaps you want to add some content. You can add single files with &amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.</description></item><item><title>Grain of Salt</title><link>https://cychong47.github.io/post/2020/2020-06-14-grain-of-salt/</link><pubDate>Sun, 14 Jun 2020 08:08:31 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-14-grain-of-salt/</guid><description>From OS X dictionary
Grain of salt
Pliny the Elder&amp;rsquo;s Naturalis Historia may be the origin of the phrase.
To take something with a &amp;ldquo;grain of salt&amp;rdquo; or &amp;ldquo;pinch of salt&amp;rdquo; is an English language idiom that means to view something with skepticism or not to interpret something literally.[1] In the old-fashioned English units of weight, a grain weighs approximately 60 mg, which is about how much table salt a person might pick up between the fingers as a pinch.</description></item><item><title>Record CBS radio in every day</title><link>https://cychong47.github.io/post/2020/2020-06-14-record-cbs-with-cron/</link><pubDate>Sun, 14 Jun 2020 06:49:23 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-14-record-cbs-with-cron/</guid><description>record Find out duration of mp3 file mp3info, exiftool or ffmpeg can be used to get the duration of mp3 file
Though mp3info and exiftool can be used to the exiting mp3 file while the ffmpeg give the duration on recording process.
$ mp3info -p &amp;#34;%S\n&amp;#34; Cinema_20200614.mp3 15 Exiftool does not give the correct duration.
$ exiftool Cinema_20200614.mp3 ExifTool Version Number : 11.88 File Name : Cinema_20200614.mp3 Directory : . File Size : 235 kB File Modification Date/Time : 2020:06:14 07:16:03+09:00 File Access Date/Time : 2020:06:14 07:47:47+09:00 File Inode Change Date/Time : 2020:06:14 07:16:03+09:00 File Permissions : rw-rw-r-- File Type : MP3 File Type Extension : mp3 MIME Type : audio/mpeg MPEG Audio Version : 1 Audio Layer : 3 Audio Bitrate : 64 kbps Sample Rate : 44100 Channel Mode : Stereo MS Stereo : Off Intensity Stereo : Off Copyright Flag : False Original Media : False Emphasis : None ID3 Size : 45 Encoder Settings : Lavf58.</description></item><item><title>Hugo에 Main menu 추가하기</title><link>https://cychong47.github.io/post/2020/2020-06-13-add-menu-to-hugo/</link><pubDate>Sat, 13 Jun 2020 23:46:10 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-13-add-menu-to-hugo/</guid><description>Hugo로 옮긴 후 아직 찾지 못한 기능 중 하나가 글 들을 종류 별로 구분해서 보는 것이었다. 각 글마다 지정한 category나 tag별로 볼 수 있는 것은 지금 사용하는 mainroad theme에서도 지원하는데 예전에 wordpress에서 많이 사용하던, post, page 등 성격 별로 다른 글들을 볼 수 있는 방법이 아쉬웠다.
하지만 hugo의 다른 theme 을 사용하는 다른 사이트에서도 유사한 기능을 사용하는 것이 보였고, 심지어 mainroad theme을 사용하는 다른 사이트에서도 같은 기능을 사용한는 것이 보였다.</description></item><item><title>Setup podcast blog - beginning</title><link>https://cychong47.github.io/post/2020/2020-06-13-setup-podcast-blog-0/</link><pubDate>Sat, 13 Jun 2020 16:44:23 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-13-setup-podcast-blog-0/</guid><description>오늘 운전하는 시간이 마침 오전 11시라 CBS 신지혜의 영화음악을 들을 수 있었다. 어릴 적 부터 좋아하던 영화 음악을 괘 오래동안 듣게 해주고 있는 프로그램.
편안한 목소리와 다양한 좋은 영화 음악을 들을 수 있어 정은영의 영화음악 이후 가장 좋아하는 라디오 프로그램이 되었다. 그런데 문제는 라디오 방송 시간이 오전 11시라 회사생활을 하면서 쉽게 듣기 어려운 상황이라는 거.
2년 전에는 OS X에 cron을 이용해서 자동으로 녹음을 한 후 NAS로 파일을 옮겨서 DS Audio 앱으로 듣기도 했는데 파일 기반으로 되어 있다 보니 내가 어떤 파일을 들었는 지 알기가 어려웠다.</description></item><item><title>Migrate Ghost to Hugo</title><link>https://cychong47.github.io/post/2020/2020-06-07-migrate-ghost-to-hugo/</link><pubDate>Sun, 07 Jun 2020 22:14:02 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-06-07-migrate-ghost-to-hugo/</guid><description>Wordpress 블로그를 hugo로 바꾼 김에 ghost 블로그도 hugo로 이사하기로 결심했다.
Ghost 정말 애증이 담긴&amp;hellip;
Ghost가 1.0이 되기 전에 markdown 기반의 블로그 툴을 찾는 과정 에서 발견해서 0.9 버전인가 부터 사용해 왔다. Ghost가 node 기반이라 생전 처음 듣는 node를 OS X에 설치해보고, docker for OS X이 나와서 docker로 실행해 오다, docker-compose 도 써 보고, Ansible 로 deploy도 해보고. 그러다 2019년에는 kubernetes hands-on을 해 볼 겸해서 리눅스에서 microk8s를 설치해서 ghost도 k8s로 실행해 봈다.</description></item><item><title>Migrate wordpress to hugo</title><link>https://cychong47.github.io/post/2020/hugo-seutp-with-git/</link><pubDate>Sun, 31 May 2020 14:56:52 +0900</pubDate><guid>https://cychong47.github.io/post/2020/hugo-seutp-with-git/</guid><description>Wordpress 에서 hugo로 이사한 후 첫번째 시도. Hugo theme은 harbor를 사용하고, site 호스팅 방법은 nginx docker를 사용. (이상하게 nginx를 helm으로 띄우는 게 간단하지 않네)
Clone repogistry for raw blog data cychong15:migration_to_hugo cychong$ git clone https://github.com/cychong47/sosa0sa.git Cloning into &amp;#39;sosa0sa&amp;#39;... warning: You appear to have cloned an empty repository. Setup hugo inside of the git repository cychong15:migration_to_hugo cychong$ hugo new site sosa0sa Error: /Users/cychong/workspace/migration_to_hugo/sosa0sa already exists and is not empty. See --force. cychong15:migration_to_hugo cychong$ hugo new site sosa0sa --force Congratulations!</description></item><item><title>NVIDIA vRAN Solution</title><link>https://cychong47.github.io/post/2020/nvidia-vran-solution/</link><pubDate>Wed, 20 May 2020 15:01:44 +0900</pubDate><guid>https://cychong47.github.io/post/2020/nvidia-vran-solution/</guid><description>https://devblogs.nvidia.com/building-accelerated-5g-cloudran-at-the-edge/
Mellanox ConnectX-6 Dx SmartNIC exceeds stringent industry-standard timing specifications for eCPRI-based RANs by ensuring clock accuracy of 16ns or less
5T for 5G enables packet-based, ethernet RANs to provide precise time-stamping of packets for delivering highly accurate time references to 5G fronthaul and backhaul networks.
5T-for-5G, or time-triggered transmission technology for telco
https://news.developer.nvidia.com/new-real-time-smartnic-technology-5t-for-5g/
Real-time transmission hardware acceleration: 5T-for-5G simplifies time synchronization and data transmission across servers, GPUs, radios, and baseband units in wireless network rollouts, making 5G rollouts easier and more efficient.</description></item><item><title>WordPress 로그인 불가 문제 해결</title><link>https://cychong47.github.io/post/2020/recover-broken-users-table/</link><pubDate>Fri, 08 May 2020 23:36:45 +0900</pubDate><guid>https://cychong47.github.io/post/2020/recover-broken-users-table/</guid><description>말썽쟁이(?) wordpress 블로그가 또 문제를 일으켰다.
이번에도 로그인이 안되는 현상인데 지난 번과는 다른 에러 메시지가 나온다. 즉 지난 번 해결책은 소용이 없을 거라는 불길한 예감이.
로그인 계정 자체가 없다는 이 어이없는 상황.
그래서 지난 번에 유용하게 사용했던 phpmyadmin을 이용해서 DB 정보를 확인해봤다. (다행히 MySql, wordpress 와 함께 실행시켜놓은 phpmyadmin container가 동작하고 있어서 지난 번과 같이 8181 포트로 접속하면 된단. 다만 로그인 암호를 기억하지 못하고 있는 나 대신 Safari가 기억하고 있어서 그냥 접속했다는)</description></item><item><title>내게 권한이 있다면 - 그 이후</title><link>https://cychong47.github.io/post/2020/if-i-have-authority-5-years-later/</link><pubDate>Fri, 08 May 2020 14:03:04 +0900</pubDate><guid>https://cychong47.github.io/post/2020/if-i-have-authority-5-years-later/</guid><description>내게 권한이 있다면
이런 글을 쓴 적이 있었네. 우연히 ghost 블로그에 이전 글들이 2개씩 존재하는 걸 발견해서 중복된 글을 지우는 과정에서 이런 글을 썼다는 걸 알아냈다. 중복 글은 아마도 ghost 버전을 2에서 3으로 올리는 과정이나 복구하는 과정에서 발생한 듯 한데. 그 덕에 각 글들이 실제로 작성된 날짜정보는 사라지고 가장 오래된 글도 2년 전(2018) 정도로 나오는데 실제 내용은 2014년 글도 있다는.
덕분에 이 글을 언제 썼는 지, 그 당시 어떤 일을 하고 있었는 지는 정확하지 않지만 글을 읽다 보니 어렴풋이 왜 이런 생각을 그때 했는 지 알겠다 싶다.</description></item><item><title>새로운 경험 들</title><link>https://cychong47.github.io/post/2020/new-things-in-last-4-years/</link><pubDate>Thu, 07 May 2020 14:34:55 +0900</pubDate><guid>https://cychong47.github.io/post/2020/new-things-in-last-4-years/</guid><description>지난 2016년 난생 처음으로 자발적으로 부서를 옮긴 후에 경험한 것들.
그 전의 십수년간에는 해보지 않은 많은 새로운 경험들을 가질 수 있었다. 주변의 도움 덕에. 특히 날 믿어주는 지인 덕에 이런 새로운 경험을 해 봐서 재밌었다.
팀으로 일하기 Agile practice 해보기. Scrum meeting, Daily meeting, 회고 등 재밌게 일하기 의미를 가지며 일하기 의미있는 TF하기 Leading(TF, 파트) 외국 연구소, 사업자 직접 만나서 대화하기 정보를 입수해 가공해서 잘 전달하기 정보를 집중해서 관리하는 사이트 구축하기 사람들 독려하기 주간 리포트를 통해 업무 진행 공유하기 정치 맛 보기(이건 좀 힘들었네) 새로운 분야의 일 - Bearer Processing, OAM, MAC, PHY, 가상화 인프라 구축 - OpenStack, container 상용 솔류션 도입 - DB, Container platform 신기술을 컴파일해서 우리 것에 적용방안 찾기 (가상화 TF) 전화 영어로 일하기 밤 늦은 시간에 사업자마 해외 연구소와 콜하기 전략적으로 판단하기 (무조건 아는 걸 다 이야기하면 안되는) 팀 빌드의 중요성 옆에서 보기 다른 사람 평가하기 회사 평가 시스템 이해(TO는 생각보다 많이 적다, 연봉 캡, 동기부여의 수단은 별로 없다) 아는 것과 남들 특히 다른 생각을 가진 사람들을 설득하는 것이 어떤 지 배우기 영어로 업무하기.</description></item><item><title>Backup Ghost Database Periodically</title><link>https://cychong47.github.io/post/2020/2020-03-03-backup-ghost-database-periodically/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/2020-03-03-backup-ghost-database-periodically/</guid><description>This ghost-backup container will backup in every 3am
Start ghost-backup container cychong@mini1:~/Documents/docker-daily-backup$ docker run --name ghost-backup -d -v /home/cychong/Documents/docker-daily-backup:/backups --volumes-from 388c84247267 bennetimo/ghost-backup ea33f148122bbe0d90a502bfd884e4c988e9f8837921f725ca7317afff7fa149 Instant backup cychong@mini1:~/Documents/docker-daily-backup$ ls -al total 8 drwxrwxr-x 2 cychong cychong 4096 Mar 3 23:25 . drwxr-xr-x 5 cychong cychong 4096 Mar 3 23:25 .. cychong@mini1:~/Documents/docker-daily-backup$ docker exec ghost-backup backup Tue Mar 3 14:27:27 UTC 2020: Checking if a mysql container exists on the network at mysql:3306 Tue Mar 3 14:27:33 UTC 2020: .</description></item><item><title>Upgrade kubenetes to 1.17.2-0</title><link>https://cychong47.github.io/post/2020/new-things-in-last-4-years/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0900</pubDate><guid>https://cychong47.github.io/post/2020/new-things-in-last-4-years/</guid><description>preparation cychong@mini1:~$ sudo apt update [sudo] password for cychong: Ign:1 http://dl.google.com/linux/chrome/deb stable InRelease Get:2 http://dl.google.com/linux/chrome/deb stable Release [943 B] Get:3 http://dl.google.com/linux/chrome/deb stable Release.gpg [819 B] ... Get the lastest version cychong@mini1:~$ sudo apt-cache policy kubeadm kubeadm: Installed: 1.16.1-00 Candidate: 1.17.2-00 Version table: 1.17.2-00 500 500 http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages 1.17.1-00 500 500 http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages 1.17.0-00 500 500 http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages ... cychong@mini1:~$ apt-cache madison kubeadm kubeadm | 1.</description></item><item><title>(책) 리얼하다</title><link>https://cychong47.github.io/post/2019/book-so-real/</link><pubDate>Sun, 15 Dec 2019 06:46:24 +0900</pubDate><guid>https://cychong47.github.io/post/2019/book-so-real/</guid><description>리얼하다 조승연
Lunch or Happy Hour 뭔가 약속을 잡아야 할 때 점심 시간 혹은 저녁 업무 종료 후 저녁 식사 시간 전(Happy Hour, 5-7pm) 때 약속을 주로 잡는다고. 그래야 별도 개인 시간 낭비를 안하고, 저녁의 경우 필요하면 저녁 약속 을 핑계로 이야기를 끊을 수 있어서 주로 이렇게 한다고 한다.
이메일로 할 수 있는 걸 전화로 하지 않고, 전화로 할 수 있는 걸 만나서 하지 않는다. 뉴욕의 사업자는 대부분 이민자 출신이라 길거리에서 생존을 배워와서 &amp;lsquo;실행해서 결과를 도출해 보기 전까지는 무엇도 알 수 없다&amp;rsquo;고 생각.</description></item><item><title>Ghost theme 변경 - Fizzy</title><link>https://cychong47.github.io/post/2019/change-ghost-theme-fizzy/</link><pubDate>Tue, 10 Dec 2019 14:09:19 +0900</pubDate><guid>https://cychong47.github.io/post/2019/change-ghost-theme-fizzy/</guid><description>https://github.com/huangyuzhang/Fizzy-Theme
오늘 우연히 발견한 ghost theme. 중국 친구가 만든 것 같은데 꽤 괜찮다. 검색 기능에 필요한 Content API key 등만 Site Header에 추가하면 검색 기능을 이용할 수 있고, TOC도 지원이 된다는. 특히 중국 친구가 만든 거라 그런지 한글 검색도 잘 지원된다.
한 동안 이 테마로 지내면 될 듯.</description></item><item><title>Mac mini 2009 upgrade</title><link>https://cychong47.github.io/post/2019/mac-mini-2009-upgrade/</link><pubDate>Mon, 18 Nov 2019 15:11:08 +0900</pubDate><guid>https://cychong47.github.io/post/2019/mac-mini-2009-upgrade/</guid><description>swap을 사용하지 못하는 kubenertes를 사용해서 ghost pod/container를 구동하니 메모리가 부족하다고 종료되어 버린다.
확인해 보니 서버로 사용하고 있는 mac mini 2009에 장착된 RAM이 4G였다. 흠&amp;hellip;
인터넷에서 mac mini 2009의 HW 사양을 찾아 보니 DDR3 1066 MHz라고. 그리고 다른 블로그를 찾아 보니 그 보다 나중에 나온 더 높은 클럭의 RAM을 실장해도 동작하는 데는 문제가 없단다. 다만 지금은 사용하지 않는 DDR3 제품이라 구하는 게 문제일 듯. 하지만 혹시나 하고 예전에 모아둔 메모리 더미를 뒤져보니 딱 맞는 메모리가 있었다.</description></item><item><title>사무력</title><link>https://cychong47.github.io/post/2019/samuryeog/</link><pubDate>Sun, 17 Nov 2019 11:12:41 +0900</pubDate><guid>https://cychong47.github.io/post/2019/samuryeog/</guid><description>중요한 일은
생각을 기반으로 함. 기계적으로 대응 불가 소통이 따름. 조직의 일은 혼자 할 수 없으므로 결정이 수반되야 함. 길이 하나가 아닌 까닭 실행이 따름. 결정만으로 결과가 오는 것이 아님 52시간법은 일하는 시간에 제약이 가해지는 것이다. 충분한 시간을 투자해서 결과를 얻어내던 방식에서 달라져야 한다.
직장 생활에서 반드시 익혀야 할 기술은 &amp;lsquo;생각을 정리하여 말이나 글로 표현하는 기술&amp;rsquo;
일 때문에 일을 하는 것이 아니라 성과를 위해 일을 하는 것이다.
WBS(Work Breakdown Structure)</description></item><item><title>Upgrade ghost to v3.0</title><link>https://cychong47.github.io/post/2019/upgrade-ghost-to-v3-0/</link><pubDate>Tue, 05 Nov 2019 14:58:16 +0900</pubDate><guid>https://cychong47.github.io/post/2019/upgrade-ghost-to-v3-0/</guid><description>부제 1. pod가 동작하지 않을때 원인 찾기 부제 2. helm upgrade 명령을 이용하여 업데이트 하기 부제 3. sqlite를 이용해서 ghost.db 직접 수정하기 values.yaml에 명시되어 있는 ghost docker image의 버전 정보를 2.31.0에서 3.0.2 최신 버전으로 업데이트 후 아래 명령어로 업데이트
$ helm upgrade --debug my-ghost ghost-with-helm [debug] Created tunnel using local port: &amp;#39;45263&amp;#39; [debug] SERVER: &amp;#34;127.0.0.1:45263&amp;#34; REVISION: 6 RELEASED: Tue Nov 5 22:25:19 2019 CHART: ghost-0.1.0 USER-SUPPLIED VALUES: {} COMPUTED VALUES: affinity: {} env: node_env: production url: http://sosa0sa.</description></item><item><title>What if helm command refuse to execute</title><link>https://cychong47.github.io/post/2019/what-if-helm-command-refuses/</link><pubDate>Tue, 05 Nov 2019 14:47:41 +0900</pubDate><guid>https://cychong47.github.io/post/2019/what-if-helm-command-refuses/</guid><description>helm 명령을 입력했는데 다음과 같은 에러 메시지를 내면서 실행을 거부한다.
$ helm ls snap-confine has elevated permissions and is not confined but should be. Refusing to continue to avoid permission escalation attacks 에러 메시지를 찾아보니 보안 관련된 내용이 이슈라고 다음과 같이 하면 해결된다.
$ sudo systemctl enable --now apparmor.service Synchronizing state of apparmor.service with SysV service script with /lib/systemd/systemd-sysv-install. Executing: /lib/systemd/systemd-sysv-install enable apparmor 하지만 이제는 helm의 client와 server 버전이 맞지 않다는 에러</description></item><item><title>kubelet이 실행되지 않을때</title><link>https://cychong47.github.io/post/2019/what-if-kubelet-is-not-started/</link><pubDate>Tue, 05 Nov 2019 14:43:35 +0900</pubDate><guid>https://cychong47.github.io/post/2019/what-if-kubelet-is-not-started/</guid><description>mini1 리붓 후 ghost 접속이 안됨.
docker를 직접 실행시키는 wordpress는 정상적으로 실행
그래서 kubectl get svc 명령을 치니 접속이 안된다고.
$ ps -ef |grep kube cychong 7461 2486 0 23:26 pts/0 00:00:00 grep --color=auto kube $ service kubelet status ● kubelet.service - kubelet: The Kubernetes Node Agent Loaded: loaded (/lib/systemd/system/kubelet.service; enabled; vendor preset: enabled) Drop-In: /etc/systemd/system/kubelet.service.d └─10-kubeadm.conf Active: activating (auto-restart) (Result: exit-code) since Mon 2019-11-04 23:26:47 KST; 5s ago Docs: https://kubernetes.</description></item><item><title>Enable SCTP in kubernetes</title><link>https://cychong47.github.io/post/2019/enable-sctp-in-kubernetes/</link><pubDate>Mon, 07 Oct 2019 15:39:35 +0900</pubDate><guid>https://cychong47.github.io/post/2019/enable-sctp-in-kubernetes/</guid><description>Check if SCTP is supported by creating SCTP service https://blog.aweimeow.tw/enable-sctp-in-kubernetes-cluster/
cychong@mini1:~/work/sctp$ cat service.yaml apiVersion: v1 kind: Service metadata: name: sctp spec: selector: app: sctp ports: - protocol: SCTP port: 9999 targetPort: 30001 cychong@mini1:~/work/sctp$ kubectl create -f service.yaml The Service &amp;#34;sctp&amp;#34; is invalid: spec.ports[0].protocol: Unsupported value: &amp;#34;SCTP&amp;#34;: supported values: &amp;#34;TCP&amp;#34;, &amp;#34;UDP&amp;#34; Enable SCTP in running kubernetes cluster https://stackoverflow.com/questions/55909512/how-to-configure-already-running-cluster-in-kubernetes
Basically you must pass this flag to kube-apiserver. How you can do that depends on how you set up the cluster.</description></item><item><title>Upgrade kubernetes to 1.16.1</title><link>https://cychong47.github.io/post/2019/upgrade-kubernetes/</link><pubDate>Mon, 07 Oct 2019 15:37:14 +0900</pubDate><guid>https://cychong47.github.io/post/2019/upgrade-kubernetes/</guid><description>cychong@mini1:~/work/ghost-with-helm-x$ sudo apt update [sudo] password for cychong: Ign:2 http://dl.google.com/linux/chrome/deb stable InRelease Hit:3 http://archive.ubuntu.com/ubuntu bionic InRelease Hit:4 https://download.docker.com/linux/ubuntu bionic InRelease Hit:5 http://dl.google.com/linux/chrome/deb stable Release Get:6 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB] Hit:1 https://packages.cloud.google.com/apt kubernetes-xenial InRelease Get:8 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB] Get:9 http://archive.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] Get:10 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 DEP-11 Metadata [295 kB] Get:11 http://archive.ubuntu.com/ubuntu bionic-updates/main DEP-11 48x48 Icons [73.8 kB] Get:12 http://archive.ubuntu.com/ubuntu bionic-updates/main DEP-11 64x64 Icons [147 kB] Get:13 http://archive.</description></item><item><title>Convention on impose core requirements</title><link>https://cychong47.github.io/post/2019/convention-on-impose-core-requirements/</link><pubDate>Sun, 29 Sep 2019 14:35:21 +0900</pubDate><guid>https://cychong47.github.io/post/2019/convention-on-impose-core-requirements/</guid><description>하나의 Helm chart를 이용하여 여러 개의 pod를 설치 하는 nested chart 인 경우 각각의 pod에 대한 CPU requirement는 각 subchart의 values.yaml에 resources 항목에 기술하면 된다.
아래는 ONAP중 closed loop control에서 Data collection을 담당하는 DCAE의 SW들을 kubernets에 배포하기 위해 만들어진 차트들이다. 다음과 같이 8개의 chart들로 구성되어 있고,
$ tree -d oom/kubernetes/dcaegen2/charts/ -L 1 oom/kubernetes/dcaegen2/charts/ ├── dcae-bootstrap ├── dcae-cloudify-manager ├── dcae-config-binding-service ├── dcae-deployment-handler ├── dcae-healthcheck ├── dcae-policy-handler ├── dcae-redis └── dcae-servicechange-handler 8 directories 각각의 subchart는 각자의 values.</description></item><item><title>Install VM with multipass on OS X</title><link>https://cychong47.github.io/post/2019/install-vm-with-multipass/</link><pubDate>Sat, 28 Sep 2019 15:17:26 +0900</pubDate><guid>https://cychong47.github.io/post/2019/install-vm-with-multipass/</guid><description>multipass? Multipass is a lightweight VM manager for Linux, Windows and macOS. It&amp;rsquo;s designed for developers who want a fresh Ubuntu environment with a single command. It uses KVM on Linux, Hyper-V on Windows and HyperKit on macOS to run the VM with minimal overhead. It can also use VirtualBox on Windows and macOS. Multipass will fetch images for you and keep them up to date.
Since it supports metadata for cloud-init, you can simulate a small cloud deployment on your laptop or workstation.</description></item><item><title>Setup kubernetes in a single host</title><link>https://cychong47.github.io/post/2019/setup-kubernetes-with-a-single-host/</link><pubDate>Mon, 23 Sep 2019 15:03:13 +0900</pubDate><guid>https://cychong47.github.io/post/2019/setup-kubernetes-with-a-single-host/</guid><description>Replace microk8s with kubernetes in mini1
remove micro.k8s with snap command cychong@mini1:~$ sudo snap remove microk8s Save data of snap &amp;#34;microk8s&amp;#34; in automatic snapshot set microk8s removed cychong@mini1:~$ setup kubernetes Reference : https://phoenixnap.com/kb/install-kubernetes-on-ubuntu
cychong@mini1:~$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16 [init] Using Kubernetes version: v1.15.3 cychong@mini1:~$ kubectl get pods --all-namespaces -o wide NAMESPACE NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES kube-system coredns-5c98db65d4-r468f 0/1 Pending 0 2m3s &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; kube-system coredns-5c98db65d4-wcm2n 0/1 Pending 0 2m3s &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; kube-system etcd-mini1 1/1 Running 0 79s 192.</description></item><item><title>Ghost Season 5 - Helm</title><link>https://cychong47.github.io/post/2019/ghost-season-5-helm/</link><pubDate>Sun, 22 Sep 2019 13:14:16 +0900</pubDate><guid>https://cychong47.github.io/post/2019/ghost-season-5-helm/</guid><description>ghost를 설치한 지 몇 년이 지났는데 그 동안 여러 가지 방법으로 Ghost 운용 환경을 구축해왔다.
Host 환경, Docker, Ansible, kubernetes 에 이어 이번은 5번째 시즌인데 Helm Chart 를 시용해서 설치해 보는 것이다. 처음 시작은 helm repository에 있는 공식(?) 공개된 helm chart를 이용하여 values.yaml 파일만 내 환경에 맞게 변경해서 사용하려던 것이었는데 아쉽게 아직은 그렇게 하기 힘든 것으로 보여 직접 helm chart를 만들어서 사용하고 있다. 이 문서는 그 과정을 기술한 것으로 향후 공식 helm chart를 활용할 수 있는 때가 오면 시즌 6에 해당하는 글을 또 쓸 듯 하다.</description></item><item><title>Wifi 2.5GHz bluetooth coexist</title><link>https://cychong47.github.io/post/2019/wifi-5ghz-bluetooth-coexistence/</link><pubDate>Mon, 26 Aug 2019 15:46:19 +0900</pubDate><guid>https://cychong47.github.io/post/2019/wifi-5ghz-bluetooth-coexistence/</guid><description>간혹 아니 자주 블루투스로 연결한 마우스가 너무 반응이 느리다. 맥이 이상한 가 싶어 트랙패드를 만져보면 전혀 반응 속도에 이상이 없다.
인터넷을 뒤져보니 Wifi 2.5GHz와 블루투스가 간섭을 일으켜서 그런다고. 가장 간단한 해결책은 2.5GHz인데, 설명서에 있는 대로 2.5GHz에 대해 Radio Enable 를 꺼도 여전히 AP list에 나온다. 그러다 우연히 본 옵션이 &amp;ldquo;Bluetooth coexistence&amp;rdquo;. 5GHz에 대해서는 이 옵션이 없는 걸 보니 뭔가 영향을 줄 것 같다. 일단 옵션을 Enable로 변경.
Let&amp;rsquo;s see what happens.</description></item><item><title>Calico CNI (draft)</title><link>https://cychong47.github.io/post/2019/calico-cni-1/</link><pubDate>Sun, 18 Aug 2019 15:20:01 +0900</pubDate><guid>https://cychong47.github.io/post/2019/calico-cni-1/</guid><description>Getting started with Calico on Kubernetes Calico를 사용하는 경우 kubelet의 실행 옵션 중 --network-plugin=cni와 같이 변경된다.
kube-controller-manager의 실행 옵션 중 --allocate-node-cidrs=false 로 역시 변경된다. 이는 CNI(여기서는 Calico의 IPAM)에서 IP 주소를 할당하기 때문
Pod 내 route table에서는 host의 link local address를 default route로 사용한다.
Pod가 갖는 eth0 interface는 root(혹은 default) namespace에 존재하는 &amp;lsquo;cali&amp;rsquo;로 시작하는 interface와 veh pair 관계를 갖는다.
veth pairs는 아래 설명과 같이 서로 연결된 두 개의 interface를 의미하는데 한쪽으로 들어가면 연결된 다른 인터페이스로 나온다.</description></item><item><title>Boundary Clock</title><link>https://cychong47.github.io/post/2019/boundary-clock/</link><pubDate>Thu, 18 Jul 2019 14:19:02 +0900</pubDate><guid>https://cychong47.github.io/post/2019/boundary-clock/</guid><description>IEEE 1588: What’s the difference between a Boundary Clock and Transparent Clock?
IEEE 1588 2002 Original standard Ordinary Clock : GrandMaster of Slave. Always a single port Boundary Clock clock node that has two or more ports (router or switch) One port as a slave clock, The remaining ports are master clock for other nodes. BC recovers the time of day within the slave clock and relays it as a reference to the mater clock function 1PPS Pulse-Per-Second https://www.</description></item><item><title>Setup Ghost in microk8s</title><link>https://cychong47.github.io/post/2019/setup-ghost-in-microk8s-2/</link><pubDate>Mon, 20 May 2019 16:00:56 +0900</pubDate><guid>https://cychong47.github.io/post/2019/setup-ghost-in-microk8s-2/</guid><description>Install microk8s MicroK8s - Fast, Light, Upstream Developer Kubernetes
설치는 위 링크에 있는 공식 홈페이지에 있는 대로 snap 명령어 하나로 간단하게 설치할 수 있다.
cychong@mini1:~$ sudo snap install microk8s --classic 2019-05-18T09:43:53+09:00 INFO Waiting for restart... microk8s v1.14.1 from Canonical✓ installed 설치된 microk8s의 정보를 확인하려면 snap info microk8s
cychong@mini1:~$ sudo snap info microk8s name: microk8s summary: Kubernetes for workstations and appliances publisher: Canonical✓ contact: &amp;lt;https://github.com/ubuntu/microk8s&amp;gt; license: unset description: | MicroK8s is a small, fast, secure, single node Kubernetes that installs on just about any Linux box.</description></item><item><title>ghost deployment season 4</title><link>https://cychong47.github.io/post/2019/ghost-deployment-season-4/</link><pubDate>Sun, 19 May 2019 12:45:58 +0900</pubDate><guid>https://cychong47.github.io/post/2019/ghost-deployment-season-4/</guid><description>ghost blog를 구성해서 사용한 게 벌써 2014년 이다. 당시 0.x 버전 이었던 초반에는 얼마 못 가고 사라지지 않을까 걱정했는데 한참을 1.0버전을 발표하지 않더니 벌써 2.x 버전이다.
그동안 내가 ghost 블로그를 운용하는 방식도 몇 번의 변화를 가졌다.
시즌 1 - brew &amp;amp; tar-ball 처음에는 매뉴얼 대로 직접 Node.js와 ghost 소스를 이용해서 직접 OS X에 설치해서 운용했다.
시즌 2 - Docker 그러다 Node.js 버전이 꼬이는 것도 그렇고, docker를 쓰면 ghost 버전이 새로 나왔을 때 편할 듯 해서 docker를 쓰는 방식으로 변경했다.</description></item><item><title>Kubernetes Networks</title><link>https://cychong47.github.io/post/2019/kubernetes-networks/</link><pubDate>Thu, 16 May 2019 14:07:53 +0900</pubDate><guid>https://cychong47.github.io/post/2019/kubernetes-networks/</guid><description>Kubernetes Networks in google docs
이거 보면 IPv6를 사용해야 하는 경우 선택할 수 있는 CNI는 Calico, Cillium, Contiv, Tungsten Fabric 정도로 좁혀지네</description></item><item><title>(펌글) 아마존 3년 출근기</title><link>https://cychong47.github.io/post/2019/amazon-daily-work/</link><pubDate>Thu, 16 May 2019 11:54:25 +0900</pubDate><guid>https://cychong47.github.io/post/2019/amazon-daily-work/</guid><description>https://zaverome.wordpress.com/2019/01/09/%EC%95%84%EB%A7%88%EC%A1%B4-3%EB%85%84-%EC%B6%9C%EA%B7%BC%EA%B8%B0-1-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC-%EB%B0%8F-%EC%9A%94%EC%95%BD/
인상적인 내용들
매일 하는 스탠드업 미팅(데일리 스크럼)은 오후 4시입니다.
오후 4시에 하는 데일리 미팅이라. 신기하다. 보통 오늘 할 일과, 이슈 등을 이야기하는 것이 잘 알려진 daily meeting의 practice인데 오후에 한다니. 아래 내용을 보면 야근도 안 한다는데. 흠.. 신기하네
아마존에서 일한 이래 일이 많아서 사무실에 늦게까지 남아 야근을 한 일은 한 번도 없습니다. 일년에 두 세번 정도 일이 좀 남아서 퇴근 후에 집에서 한 두시간 정도 일을 한 적은 있습니다.</description></item><item><title>Install Ubuntu 18.04.1 in Mac mini 2009</title><link>https://cychong47.github.io/post/2019/install-ubuntu-18-04-1-in-mac-mini-2009/</link><pubDate>Sun, 10 Feb 2019 14:42:07 +0900</pubDate><guid>https://cychong47.github.io/post/2019/install-ubuntu-18-04-1-in-mac-mini-2009/</guid><description>최고령 Mac은 아니고 세 번째 고령 가장 오래된 Mac은 2005년에 구입한 Powerbook. PowerPc processor를 사용한 마지막 Apple의 laptop. 그 다음 오래된 것은 iMac 2007. 하지만 이 두 녀석들은 현재 꺼진 상태로 방치되고 있어, 현역은 Mac mini 2009라는. 당시에 리퍼를 구입했던 걸로 기억하는데 10년이 지난 2019년에도 유용하게 사용하고 있다는 게 너무 신기하다.
한글 글꼴 Firefox 등에서 한글 글꼴이 없어 한글 페이지가 깨져서 나눔고딕을 설치 이것 저것 찾아보다 https://blog.inidog.com/p/20170131169 참고해서 한번에 해결했다.마지막 명령어 fc-cache -r 을 수행하는 도중 firefox의 한글 페이지에서 깨진 한글 글꼴이 예쁜 나눔고딕으로 변하는 모습은 감동(?</description></item><item><title>DPDK 18.11</title><link>https://cychong47.github.io/post/2019/dpdk-18-11/</link><pubDate>Mon, 07 Jan 2019 14:57:59 +0900</pubDate><guid>https://cychong47.github.io/post/2019/dpdk-18-11/</guid><description>https://doc.dpdk.org/guides-18.11/rel_notes/release_18_11.html
New Features Updated the C11 memory model version of the ring library. Added changes to decrease latency for architectures using the C11 memory model version of the ring library.
On Cavium ThunderX2 platform, the changes decreased latency by 27-29% and 3-15% for MPMC and SPSC cases respectively (with 2 lcores). The real improvements may vary with the number of contending lcores and the size of the ring.
Added support for device multi-process hotplug.</description></item><item><title>함께 자라기</title><link>https://cychong47.github.io/post/2018/grow-together/</link><pubDate>Tue, 25 Dec 2018 13:54:06 +0900</pubDate><guid>https://cychong47.github.io/post/2018/grow-together/</guid><description>p12 학교 학습 vs. 야생 학습 야생 학습은 대부분 자료에 한정이 없다.
야생 학습은 대부분 명확한 평가가 없다.
야생 학습은 대부분 정답이 없다.
야생 학습은 대부분 목표가 불분명하고 바뀌기도 한다.
학습의 본질은 야생 학습에 더 가깝다고 생각. 현실 세계에서는 야생 학습이 더 많이 필요하다고 봅니다.
p23 구조화된 인터뷰(특별히 구조화된 행동중심적 인터뷰를 권함)와 실제 작업을 해보도록 하는 작업 샘플 테스트, 그리고 가능하다면 실제 업무를 주고 시험적으로 짧은 기간 동안 일을 해보게 하는 것 등을 권합니다.</description></item><item><title>Get the latest jetpack plugin</title><link>https://cychong47.github.io/post/2018/get-the-latest-jetpack-plugin/</link><pubDate>Sun, 16 Dec 2018 06:55:44 +0900</pubDate><guid>https://cychong47.github.io/post/2018/get-the-latest-jetpack-plugin/</guid><description>http://sosa0sa.com:2368/use-jetpack-for-wordpress-5-0/ 의 연장선. Jetpack plugin의 최신 버전을 알아내서 자동으로 해당 바이너리 파일을 다운로드 받아 보자.
몇 가지 module 을 사용하는데 필요한 module은 https://realpython.com/python-web-scraping-practical-introduction/ 을 참고해서 설치
$ python3 -m venv venv $ . ./venv/bin/activate $ pip3 install requests BeautifulSoup4 webscrap.py from requests import get from requests.exceptions import RequestException from contextlib import closing from bs4 import BeautifulSoup from urllib.request import * &amp;#39;&amp;#39;&amp;#39; https://realpython.com/python-web-scraping-practical-introduction/ &amp;#39;&amp;#39;&amp;#39; def simple_get(url): &amp;#34;&amp;#34;&amp;#34; Attempts to get the content at `url` by making an HTTP GET request.</description></item><item><title>Use jetpack for wordpress 5.0</title><link>https://cychong47.github.io/post/2018/use-jetpack-for-wordpress-5-0/</link><pubDate>Mon, 10 Dec 2018 15:04:29 +0900</pubDate><guid>https://cychong47.github.io/post/2018/use-jetpack-for-wordpress-5-0/</guid><description>Wordpress 5.0부터 기본 editor가 ghost와 같이 block editor 로 변경됨. Markdown을 사용하려면 이전과 동일하게 Jetpack을 사용해야 하는데 docker에서 wordpress를 돌리고 있는 내 경우 ftp를 통한 plugin 설치가 안되다는&amp;hellip;
직접 설치는 안되므로 해결 방안은 Jetpack을 따로 받아 설치한 후 docker volume으로 jetpack 디렉토리를 plugins 디렉토리 밑에 마운트 시키는 방법.
이번 기회에 최신 버전을 받는 방법을 포함해서 정리 해 보자.
Jetpack의 최신 버전 확인 방법 https://wordpress.org/plugins/jetpack/ 을 방문하면 오른쪽 plugin 정보란에서 다음과 같이 최신 버전 정보를 확인할 수 있다.</description></item><item><title>How NASA uses a wiki to reduce email</title><link>https://cychong47.github.io/post/2018/how-nasa-uses-a-wiki-to-reduce-email/</link><pubDate>Fri, 23 Nov 2018 11:37:27 +0900</pubDate><guid>https://cychong47.github.io/post/2018/how-nasa-uses-a-wiki-to-reduce-email/</guid><description>Really good wiki adoption case in NASA
http://enterprisemediawiki.github.io/slides/MeetingMinutes/#/</description></item><item><title>(책) The nature of Software Development</title><link>https://cychong47.github.io/post/2018/caeg-the-nature-of-software-development/</link><pubDate>Thu, 18 Oct 2018 14:53:53 +0900</pubDate><guid>https://cychong47.github.io/post/2018/caeg-the-nature-of-software-development/</guid><description>제품 책임자는 해결해야 할 문제가 무엇인지 제시합니다. 그리고 팀은 주어진 문제를 어떻게 해결할 지 결정하죠. 진정한 자율성이 있다면 팀의 일을 중복으로 확인할 필요가 없습니다. 그들이 결정하고 그들이 만들고 조직 모두가 결과를 확인합니다. 모두가 배우는 것이죠 개발팀은 1-2주에 해당하는 개발 주기를 거칠 때마다 제품 책임자와 함께 무엇을 완료해야 하는지 상의해야 합니다. 잘 작동하는 상태로 배포할 수 있는 피처들이 얼마나 되는지 구분합니다.
이렇게 팀이 일을 끝낸 이후 &amp;ldquo;작동하는 소프트웨어를 보여주세요&amp;quot;라고 요구하면 됩니다.</description></item><item><title>없어졌으면 하는 말</title><link>https://cychong47.github.io/post/2018/untitled-3/</link><pubDate>Thu, 18 Oct 2018 03:00:13 +0900</pubDate><guid>https://cychong47.github.io/post/2018/untitled-3/</guid><description>자료 &amp;ldquo;등록&amp;rdquo;
미팅 노트건 어떤 주제에 대한 정리 노트건 &amp;ldquo;등록&amp;quot;이란 단어를 만나면 &amp;ldquo;공식적&amp;quot;이고, &amp;ldquo;뭔가 부담스러운&amp;rdquo; 자료가 되는 것 같다.
그래서 자료(라고 쓰고 그냥 &amp;lsquo;정보&amp;rsquo;라고 부른다) 공유가 안되는 것이 아닌가 싶다.
누군가 눈을 부릅뜨고 있는 단상에 자료를 올리는 작업은 부담스럽다. 그런 문화/상황/환경/분위기부터 없어지면 좀 더 편하게 자료를 공유하지 않을까?
Googler 들은 많은 자료를 자사 협업 툴인 Google docs등에서 작업할 듯 하다. 우리와는 다른 &amp;ldquo;일하는 환경&amp;quot;과 &amp;ldquo;사람들의 생각&amp;quot;이 그런 정보의 공유를 가능케 하는 게 아닐까 싶다.</description></item><item><title>(책) 실리콘밸리를 그리다</title><link>https://cychong47.github.io/post/2018/silicon-valley-illustrated/</link><pubDate>Sun, 23 Sep 2018 06:34:35 +0900</pubDate><guid>https://cychong47.github.io/post/2018/silicon-valley-illustrated/</guid><description>P40 업무 지시 -&amp;gt; 일을 맡아달라고 부탁
P44 제조업에서는 정보 공유의 중요성이 높지 않다. 설계 -&amp;gt; 생산 분리 SW에서는 설계가 모든 상세 내역을 알 수 없고, 지속적인 변경 사항에 따른 변화를 모두 확인할 수 없다. 실리콘밸리에는 기획자라는 역할이 없다. 각자가 자신의 역할을 책임진다. 엔지니어 문화에서는 끊임없이 진화를 가정하고 시작한다. 아웃소싱은 설계 변경을 빠른 시간 내 반영하기 어려워 많이 사용하지 않는다.
우리나라 기업 문화는 기술집약 제조업에 적합하다. Speed - Quality - Feature triangle</description></item><item><title>Recover WordPress container</title><link>https://cychong47.github.io/post/2018/recovery-failed-wordpress-container/</link><pubDate>Wed, 05 Sep 2018 14:10:39 +0900</pubDate><guid>https://cychong47.github.io/post/2018/recovery-failed-wordpress-container/</guid><description>One day The Wordpress container does not work at all. docker ps로 확인하면 1분 주기로 restart를 반복하고 있다. 경험상 이건 wordpress 앱이 초기화 과정에서 문제가 있는 거라는 걸로 짐작된다. 로그를 확인해 보니 아래와 같은 에러만 출력.
뭐가 문제일까 멀쩡히 잘 돌던 녀석들인데.
mini2:html cychong$ docker logs -f f12c3b3a57ef ... Warning: mysqli::__construct(): Unexpected server respose while doing caching_sha2 auth: 109 in Standard input code on line 22 MySQL Connection Error: (2006) MySQL server has gone away Warning: mysqli::__construct(): MySQL server has gone away in Standard input code on line 22 Warning: mysqli::__construct(): (HY000/2006): MySQL server has gone away in Standard input code on line 22 Warning: mysqli::__construct(): Unexpected server respose while doing caching_sha2 auth: 109 in Standard input code on line 22 Warning: mysqli::__construct(): MySQL server has gone away in Standard input code on line 22 Warning: mysqli::__construct(): (HY000/2006): MySQL server has gone away in Standard input code on line 22 MySQL Connection Error: (2006) MySQL server has gone away Warning: mysqli::__construct(): Unexpected server respose while doing caching_sha2 auth: 109 in Standard input code on line 22 MySQL Connection Error: (2006) MySQL server has gone away Warning: mysqli::__construct(): MySQL server has gone away in Standard input code on line 22 Warning: mysqli::__construct(): (HY000/2006): MySQL server has gone away in Standard input code on line 22 Let’s debug 하지만 뭔가 달라진 게 있으니 갑자기 문제가 발생했겠지.</description></item><item><title>(책) 1등의 습관 Smarter, Faster, Better</title><link>https://cychong47.github.io/post/2018/smarter-faster-better/</link><pubDate>Tue, 04 Sep 2018 14:26:37 +0900</pubDate><guid>https://cychong47.github.io/post/2018/smarter-faster-better/</guid><description>Motivation P39
자신이나 다른 사람에게 동기를 부여하고 싶은 사람이라면 반드시 알아두어야 할 교훈이다. 결정권을 행사할 수 있는 일을 찾아내면 행동하려는 의지를 쉽게 불어일으킬 수 있기 때문이다.
직접 결정할 수 있다는 생각이 우리를 흥분시킨다.
Teams P71
구글 인력 자원국의 기본적인 목표는 구글 직원들이 직장에서의 삶을 조금이라도 더 행복하고 생산적으로 꾸려 가도록 유도하는 것이었다
P72
산소 프로젝트 -&amp;gt; 훌륭한 관리자란?
훌륭한 코치이고, 권한을 위임하고, 시시콜콜한 문제를 따지지 않으며, 부하 직원의 성공과 행복에 관심을 드러내고, 결과를 중시하고, 정보를 경청하고 공유하며, 경력 개발을 지원하고, 분명한 비전과 전략을 직원들에게 제시하며, 해당 비즈니스에 대한 중요한 핵심 능력을 지니고 있다.</description></item><item><title>(책) 최고의 팀은 무엇이 다른가</title><link>https://cychong47.github.io/post/2018/the-secret-of-highly-successful-groups/</link><pubDate>Sat, 25 Aug 2018 10:08:40 +0900</pubDate><guid>https://cychong47.github.io/post/2018/the-secret-of-highly-successful-groups/</guid><description>팀원이 안전하다고 느끼는가?
구글 * 지위에 연연하지 않음. * 누가 책임질 지 고민하지 않음 * 어려운 문제를 풀기 위해 모든 집단을 토론시킴 미사일리어 * 미국의 미사일기지 근무 군인들의 만족도가 크게 떨어짐 * 우리가 이어져 있나? * 우리에게 미래가 있나? * 우리는 안전한가? 피드백 * 기대치가 높다 * 당신이면 기대를 충분히 달성할 수 있을 있을 거라고 믿는다 경청하라. 또 경청하라 * 높은 자리에 오를수록 먼저 약점을 드러내라 * 불편한 목소리도 포용 * 구체적인 미래상 제시 * 공치사는 과장될수록 좋다 * 서로 부딪칠 수 있는 공간을 마련하라 * 각자의 목소리를 내게 하라.</description></item><item><title>(책) 리모트</title><link>https://cychong47.github.io/post/2018/remote/</link><pubDate>Sat, 25 Aug 2018 09:30:07 +0900</pubDate><guid>https://cychong47.github.io/post/2018/remote/</guid><description>p15
사람들에게 제대로 집중해서 일을 하고자 할 때 어디로 갈거냐고 물었을 때 “사무실”이라고 답하는 사람은 별로 없다.혹은 “다른 직원들이 출근하기 전 아침 일찍” 또는 “다른 직원들이 퇴근하고 난 후의 사무실” 또는 “주말에 아무도 없는 사무실”
p18
출퇴근 시간 1.5시간/하루 * 5일 * 4 * 11 month = 330 시간.400시간은 베이스캠프를 개발자들이 프로그래밍하는데 걸린 시간
p22
엄청난 기술이 필요한 것은 아니다. 하지만 과거의 유산을 내려놓고 미래로 가는 배에 올라 탈 굳은 의지를 갖추어야만 한다.</description></item><item><title>(책) 덴마크 사람들은 왜 첫 월급을 받으면</title><link>https://cychong47.github.io/post/2018/why-danish-bought-a-chair-with-the-first-time-salary/</link><pubDate>Thu, 16 Aug 2018 14:46:20 +0900</pubDate><guid>https://cychong47.github.io/post/2018/why-danish-bought-a-chair-with-the-first-time-salary/</guid><description>기대와는 많이 달랐던 책&amp;hellip;
인생은 바꿔 말하면 ‘시간’입니다. 그 시간을 보내는 ‘공간’이야말로 그 사람의 행복으로 이어집니다.</description></item><item><title>(책) 쿠팡 우리가 혁신하는 이유</title><link>https://cychong47.github.io/post/2018/coupang-the-reason-of-innovation/</link><pubDate>Sun, 05 Aug 2018 11:09:34 +0900</pubDate><guid>https://cychong47.github.io/post/2018/coupang-the-reason-of-innovation/</guid><description>31
PO의 역할 A,B, C의 우선 순위를 결정하는 수동적인 역할 더 창의적으로 생각해보면 전혀 다른 D라는 일을 텅해 A,B, C의 문제를 한꺼번에 해결 할 수도. 사고의 폭이 넓으면 PO가 할 일은 무한정 많아지기도 한다.
관리자와 같은 입장인 듯. 2018년 8월 내가 갖는 고민, 상황에 딱 드러맞는 말.
240
쿠팡 대표 이사, 김범석
&amp;ldquo;제발 위에서 시키니까 한다는 소리 좀 하지 마세요. 그거 제가 제일 싫어하는 말이예요&amp;rdquo;
&amp;ldquo;무엇이 옳고 합리적인지&amp;quot;를 묻는 것은 다양성을 존중하는 수평적인 조직문화의 토대가 될 수 있다.</description></item><item><title>(책) 나는 이렇게 될것이다.</title><link>https://cychong47.github.io/post/2018/i-am-going-to-be/</link><pubDate>Sun, 29 Jul 2018 21:36:14 +0900</pubDate><guid>https://cychong47.github.io/post/2018/i-am-going-to-be/</guid><description>p17 술과 구라를 즐기되 항상 혀를 조심하라. 어느 장소에서나 어느 주제에 대해서나 할 말을 다하는 자는 불행한 자이니 말하고 싶을 때마다 세 번을 더 깊이 들어라 특히 나이가 들어서는 혀를 잘 묶어두어야 한다. 고약한 늙은이 옆에는 사람이 없으니 외로움이 끝없으리라 배워서 알고 싶은 것을 다 쓰지 못하고 가는 것은 서운한 일이나
친구는 들어주는 사람 곁에 모이는 것이니 하나를 말하고 둘을 들어라.
p27 여러분이 놓치고 있는 것이 있습니다. 바로 이 하얀 종이 말입니다.</description></item><item><title>(책) 피플웨어</title><link>https://cychong47.github.io/post/2018/peopleware/</link><pubDate>Sun, 29 Jul 2018 21:35:10 +0900</pubDate><guid>https://cychong47.github.io/post/2018/peopleware/</guid><description>p21 사람들이 업무의 인간적인 측면보다 기술적인 측면에 주로 매달리는 가장 큰 이유는 기술적인 부분이 더욱 중요하기 때문이 아니라 거기에 매달리는 것이 훨씬 더 쉽기 때문이다.
p24 실수를 허용하지 않는 분위기는 직원들에게 방어적인 태도를 양산할 뿐이다. 즉 직원들로 하여금 실패할 것 같은 일은 아예 시도조차 하지 않게 만드는 것이다. 개발 프로세스를 체계화하려고 하거나 엄격한 방법론을 강요하면서, 팀원들이 확실한 성공을 보장할 수 없는 것들에 대해 중요한 결정들을 내리지 못하게 한다면 그들은 점점 더 소극적이고 방어적인 태도를 취한다.</description></item><item><title>(책) 내 아이가 만날 미래</title><link>https://cychong47.github.io/post/2018/the-future-of-my-children/</link><pubDate>Sun, 29 Jul 2018 21:33:47 +0900</pubDate><guid>https://cychong47.github.io/post/2018/the-future-of-my-children/</guid><description>30 생산성의 증가가 오히려 일자리를 필요없게 만든다. 사람의 노동력을 대체할 것들이 등장하기 때문이다.
31 지나친 생산성은 고용의 안정성을 해지며, 높아진 생산성만큼 사회와 경제가 성장하지 않으면 안 된든다는 압력으로 작용한다.
33 거대한 생산성과 효율성을 바탕으로 하는 소비자 중심의 과소비 사회가 종말을 맞이하려고 한다. 과소비를 통해 외형이 성장하고, 이를 맞추기 위한 생산성의 독려와 일자리를 유지했던 성장의 순환 사이클이 그 동력을 잃고 있다.
52 지식노동자의 주된 역할은 정보를 다루고, 찾아내며, 컴퓨터가 계산한 내용을 바탕으로 새로운 지식을 만들어 내고 분석하는 일이라 할 수 있다.</description></item><item><title>(책) 시스템의 힘</title><link>https://cychong47.github.io/post/2018/the-work-system/</link><pubDate>Sun, 29 Jul 2018 21:32:37 +0900</pubDate><guid>https://cychong47.github.io/post/2018/the-work-system/</guid><description>42 우리는 통제할 수 있는 것에 초점을 맞추되, 통제할 수 없는 것에는 마음을 편히 먹어야 한다.
44 이제는 불평도 하지 않고, 남을 탓하지도 않을거야. 내 앞에 놓인 세상을 거부할 게 아니라, 있는 그대로의 세상에 뛰어들어서 내가 통제할 수 있는 것부터 시작할 거야. 무슨 일을 할 수 있을 지 찾아봐야겠어.
50 자신의 지금 위치가 어디이든, 영향력의 원이 얼마나 크든 그 원의 밖이 아닌 안에서 변화를 일으키려 노력하라. 어차피 손을 쓸 수도 없는 큰 그림을 분석하고 해부하는데 소중한 에너지를 쓰지 말라.</description></item><item><title>(책) 지금 꿈꾸라, 사랑하라, 행복하라</title><link>https://cychong47.github.io/post/2018/just-now-dream-love-be-happy/</link><pubDate>Sun, 29 Jul 2018 21:31:08 +0900</pubDate><guid>https://cychong47.github.io/post/2018/just-now-dream-love-be-happy/</guid><description>꿈을 노트하라 꿈을 날짜와 함께 적어 놓으면 그것은 목표가 되고 목표를 잘게 나누면 그것은 계획인 되며, 그 계획을 실행에 옮기면 꿈을 이루게 되는 것이다.
p46 우리는 무거운 짐을 지고 살아간다. ‘등이 휠 것 같은 삶의 무게여’라는 가사도 있다. 내가 책임져야 할 가족과 도움을 필요로 한 친구들, 나에게 주어진 과중한 업무와 기대. 이 거추장스러운 짐들이 사실은 ‘내 인생의 날개’일 수도 있다.
p68 다른 사람과 한 약속을 지키는 것도 중요하지만 자기 자신과 한 약속을 지키는 것이 더 중요하다 세상과 타협하는 것도 위험하지만 자기 자신과 타협하는 것이 가장 위험하다</description></item><item><title>(책) 습관의 힘</title><link>https://cychong47.github.io/post/2018/power-of-habit/</link><pubDate>Sun, 29 Jul 2018 21:29:36 +0900</pubDate><guid>https://cychong47.github.io/post/2018/power-of-habit/</guid><description>신호 - 보상 - 반복행동 - 열망
습관에 숨겨진 &amp;ldquo;열망&amp;quot;을 찾아야 한다. 담배를 습관적으로 피우는 사람도 담배를 피우는 이유가 니코틴 부족이 아니라 잠깐 동안의 여유를 주기 때문일 수 있다. 이때는 이 &amp;ldquo;여유&amp;quot;라는 열망을 담배가 아닌 산책 등으로 바꾸면 습관을 바꿀 수 있다. 이때 그 열망에 대한 &amp;ldquo;신호&amp;quot;와 &amp;ldquo;보상&amp;quot;을 알아야 한다. 그래서 담배가 주는 것과 유사한 담배껌, 팔굽혀 펴기, 스트레칭등의 새로운 반복행동을 선택하면 담배를 끊을 확률이 높아진다.
믿음
하느님이 아니더라도, 내 상황이 더 좋아질 거라는 믿음이 필요하다.</description></item><item><title>(책) 나는 다른 대한민국에서 살고 싶다</title><link>https://cychong47.github.io/post/2018/i-want-to-live-in-a-different-korea/</link><pubDate>Sun, 29 Jul 2018 21:28:01 +0900</pubDate><guid>https://cychong47.github.io/post/2018/i-want-to-live-in-a-different-korea/</guid><description>p215 우리 사회가 뭔가 단단히 헷갈리고 있다. 정치, 경제, 사회 전반에서 국가의 강력한 통졔를 바란다면 헌법부터 뜯어고쳐야 할 것이다. 일단 자유민주주의의 &amp;lsquo;자유&amp;rsquo;와 &amp;lsquo;민주&amp;rsquo;는 빼야 할 것 같으니까. 대만민국의 국가적 정체성부터 다시 생각해봐야 할 일이다. 공산주의가 싫어 자유주의를 주장하는 거라면 작은 정부를 지향해야 옳다. 그리고 그 작은 정부가 왜 시장에 대한 규제 철폐만 주장하고, 사상, 언론, 표현, 결사 등의 영역에서는 작은 소리만 있어도 사회가 불안정하고 무질서해진다며 통제하려고 하는 지 합리적인 이유를 내 놓아야 한다.</description></item><item><title>(책) 퍼플피플</title><link>https://cychong47.github.io/post/2018/purple-people/</link><pubDate>Sun, 29 Jul 2018 13:53:11 +0900</pubDate><guid>https://cychong47.github.io/post/2018/purple-people/</guid><description>p39 자신이 정말 좋아하는 일을 만날 수만 있다면, 인생의 절반은 성공한 것이다. 끔찍이 좋아하는 일이라면 남들이 말려도 다시 덤벼들어야 한다.
지금 내가 쌓고 있는 스펙이 과연 10년, 20년 후에도 계속 하고 싶은 일에 도움이 될까? 다시 한번 생각해 보라.
p47 부디 이 땅의 청춘들이 자신을 괴롭게 하는 스펙 쌓기에 매달리지 않기를 바란다. 고통의 순간이 가면 즐거움의 시간이 오리라는 보장을 누가 해줄 것인가? 지금 나를 가장 즐겁게 하는 일, 뜨겁게 나를 느낄 수 있는 일에 열정을 쏟아부어야 진정한 퍼플피플로 성장할 수 있다.</description></item><item><title>(책) 혼창통</title><link>https://cychong47.github.io/post/2018/hon-chang-tong/</link><pubDate>Sun, 29 Jul 2018 13:47:57 +0900</pubDate><guid>https://cychong47.github.io/post/2018/hon-chang-tong/</guid><description>8p
혼 : 가슴 벅차게 하는 비전이 사람을 움직인다. 창 : 끊임없이 &amp;ldquo;왜&amp;quot;라고 물어라, 그러면 열린다. 통 : 만나라, 또 만나라. 들어라 잘 들어라. 16p
IBM, P&amp;amp;G, Cisco, CEMEX 이 기없들의 공통점은 무엇일까? 그렇다 공룡처럼 몸집이 큰 기업들이다. 공룡인데도 민첩하다. 한가지 공통점은 회사 전체가 보다 큰 가치, 가슴을 울렁이게 하는 원대한 비전을 공유한다는 사실이다. 하버드경영대학원의 로자베스모스 캔터 교수(Rosabeth Moss Kanter) &amp;ldquo;모든 직원이 보다 큰 가치를 공유하게 되면 일선에서 어떤 문제가 부딛쳐도, 혹은 본사로부터 아무리 떨어진 곳에서 일하더라도 자발적으로 문제의 해결을 주도하게 된다&amp;rdquo;</description></item><item><title>(책) 당신의 시간</title><link>https://cychong47.github.io/post/2018/your-time/</link><pubDate>Sun, 29 Jul 2018 13:44:37 +0900</pubDate><guid>https://cychong47.github.io/post/2018/your-time/</guid><description>p52 &amp;ldquo;당신의 삶입니다. 당신의 사람을 이야기하라는데 가족을 위해 사는 게 전부라. 생활비만 제대로 해결된다면 가족에게 당신은 없어도 되는 존재라는 말이군요. 그런 현금 지급기와 같은 삶을 원한다면 더 이야기하는 것도 &amp;lsquo;시간낭비&amp;rsquo;군요&amp;rdquo;
p89 파울로 코엘료의 &amp;lt;순례자&amp;gt;에서는 꿈들을 죽일 때 나타나는 첫 번째 징후가 &amp;lsquo;시간이 없다&amp;rsquo;라고 말하는 것이라고 했습니다.
p97 가장 먼저 해야 할 일은 진지하게 고민하며 한발 내딛는 일입니다. 어디로든 상관없습니다. 자신을 둘러싸고 있는 경계를 벗어나기만 하면 새로운 사람들과 새로운 경험이 당신을 기다리고 있을 겁니다.</description></item><item><title>(책) Slack</title><link>https://cychong47.github.io/post/2018/slack/</link><pubDate>Sun, 29 Jul 2018 13:42:11 +0900</pubDate><guid>https://cychong47.github.io/post/2018/slack/</guid><description>p32 너무 효율적인 사람은 너무나도 바쁘기 때문에, 무언가 새로운 일이 일어나는 경우 그 일에 즉시 대응할 수가 없게 된다.
p37 사실 효율성을 높이는 일은 매우 어렵다. 효율성 개선에는 엄청난 노력과 진정한 독창성이 필요하기 때문이다. 조직은 항상 스스로를 더욱 효율적으로 만들기 위해 끊임없이 노력해 왔기 때문에 조직을 더 효율적으로 만들기란 결코 쉬운 일이 아니다.
p38 짧은 시간안에 조직의 개선을 보여주어야 하는 효율성 전문가에게 유욯나 지름길은 무엇일까? 가장 자주 채택되는 지름길은 바로 각각의 직원을 모두 완전한 대체물이라고 가정하는 것이다.</description></item><item><title>(책) 팀이 빠지기 쉬운 5가지 함정</title><link>https://cychong47.github.io/post/2018/five-traps-team-can-fall-into/</link><pubDate>Sun, 29 Jul 2018 13:11:31 +0900</pubDate><guid>https://cychong47.github.io/post/2018/five-traps-team-can-fall-into/</guid><description>p65 효율적인 팀들은 한결같이 매우 구체적으로 논쟁을 벌였습니다. 팀원들간의 신뢰도가 매우 높은 팀에서도 흔히 논쟁이 벌어지더군요.
p114 전반전이 끝나고 라커룸으로 들어가는 농구코치를 상상해 봅시다. 그는 팀의 센터포워드를 자기 방으로 불러서 전반전에 대해 일대일로 대화합니다. 그러곤 포인트가드, 슈팅가드, 스몰포워드, 파워포워드를 차례로 불러서 똑같은 행동을 반복합니다. 선수들 중 누구도 코치가 다른 선수들에게 무슨 얘기를 했는 지 알 수 없는 상태에서 후반전이 시작됩니다. 후반전에서 그들은 더 이상 팀이 아닙니다. 그건 단지 개인들을 한데 모아놓은 것에 불과하죠.</description></item><item><title>(책) 드라이브 - 다니엘 핑크</title><link>https://cychong47.github.io/post/2018/drive/</link><pubDate>Sun, 29 Jul 2018 12:45:25 +0900</pubDate><guid>https://cychong47.github.io/post/2018/drive/</guid><description>p64 해결점까지 분명한 길이 있는 경우의 보상은 앞만 바라보며 더 빨리 나아가게 해주기 때문에 도움이 되지만, 양초 문제처럼 도전적인 상황에서 &amp;lsquo;만약-그러면&amp;rsquo;의 조건적 동기유인제는 효력을 발휘하지 못한다. 보상은 사람들의 시야를 좁히며, 기존 물건의 새로운 쓰임새를 볼 수 있는 포괄적인 시야를 흐리게 한다.
p65 다른 사람을 위해 작업할 때면 항상 그런 것은 아니지만 많은 경우에 작업이 즐거움보다는 일에 가까워진다. 반면 나 자신을 위해 작업할 때는 창조한다는 순전한 즐거움을 느끼면서 밤을 새는지도 모르고 일하기도 한다.</description></item><item><title>2nd patch submit to DPDK</title><link>https://cychong47.github.io/post/2018/submit-patch-to-dpdk-with-git/</link><pubDate>Sat, 21 Jul 2018 15:02:14 +0900</pubDate><guid>https://cychong47.github.io/post/2018/submit-patch-to-dpdk-with-git/</guid><description>AVX2가 지원되지 않는 머신에서 쓸데없이 ACL library 빌드할 때 AVX2를 이용해서 빌드하려는 문제를 확인했다. 지금까지 아무도 고치지 않은 게 이상하긴 한데 그래도 내가 생각한 수정 방법이 제대로 동작하는 듯 해서 패치를 한번 보내보기로 했다.
수정사항은 비교적 간단하다. ACL 라이브러리 빌드할 때 AVX2를 이용해서 빌드해야 하는 경우인지를 검사하는 코드가 lib/librte_acl/Makefile에 정의되어 있는데 여기서 항상 -march=core-avx2 옵션을 사용해서 AVX2가 지원되지 않는 머신에서도 AVX2를 사용해서 gcc가 빌드하도록 하는 걸로 보였다. 다른 코드 빌드할 때는 문제가 없는데 유독 ACL library에서만 이런 문제가 나서 보다 보니 아무래도 Makefile이 잘못된 듯 하다.</description></item><item><title>(책) 대살개문</title><link>https://cychong47.github.io/post/2018/developer-culture/</link><pubDate>Sun, 15 Jul 2018 13:41:48 +0900</pubDate><guid>https://cychong47.github.io/post/2018/developer-culture/</guid><description>임백준. 2016.5
96) dead code로 인한 사고 신규 기능을 위해 현재 지금은 disable로 설정된 변수를 재활용. 코드 변경을 깜빡하고 설정만 변경하여 잠자고 있던 예전 코드가 동작(예측 불가능한 동작) 사용하지 않는 코드는 소스 코드에서 삭제할 것. If 문으로 회피하는 것은 상당히 나쁘고 위험한 습관 소프트웨어의 전개 과정이 정확한 설명을 담고 있는 문서에 기반해야 함 효율성을 명목으로 코드의 간명함과 안정성을 해치는 행동은 피할 것 100) 오바마 케어 112) Detail 디테일이 살아 있고 빠르고 안정감 있게 동작하는 코드를 작성하는 것은 &amp;lsquo;능력&amp;rsquo;이 문제인 경우가 많지만 &amp;lsquo;태도&amp;rsquo;의 문제이기도 디테일과 사소함을 혼동하지 말 것 점 하나에 따라서 코드 전체의 의미가 달라질 수 있는 프로그래밍의 세계에서 디테일은 덤이 아니라 생명 121) 지식이 아니라 메타지식 전문성 보다는 부족한 정보를 토대로 최선의 판단을 내리는 적응력이 중요.</description></item><item><title>Astri vRAN</title><link>https://cychong47.github.io/post/2018/astri-vran/</link><pubDate>Sun, 15 Jul 2018 12:03:00 +0900</pubDate><guid>https://cychong47.github.io/post/2018/astri-vran/</guid><description>Toward 5G RAN virtualization by Intel and Astri
http://astri.oeg
Flexible architecture Modular PHY processing architectures PDCP Split MAC/PHY Split - HARQ processing in RRU(How???) Lower PHY Split - High FB overhead but smallest packet latency. Good for JT and JR for COMP Good for Massive MIMO and Ultra low-latency communication(Why?) FAPI based MAC/PHY communication L1 adaptation layer for MAC/PHY split (and Lower PHY Split?) MAC/PHY split in one CPU MAC/PHY split in one machine but netrwork based MAC/PHY communication over OVS Virtual Cell A group of physical cells form a Virtual Cell which does not require HO between the physical cells.</description></item><item><title>(책) 도쿄대 교수가 제자들에게 주는 쓴소리</title><link>https://cychong47.github.io/post/2018/advice_from_tokyo_professor/</link><pubDate>Sat, 07 Jul 2018 15:00:28 +0900</pubDate><guid>https://cychong47.github.io/post/2018/advice_from_tokyo_professor/</guid><description>다양한 분야에 대한 조언 p20 목표가 명확하겨 정답이 있는 일을 하는 경주마에서 길 잃은 양으로
p22 지식을 더 많이 아는 것이 아닌 아는 지식으로 뭘 할 지 Learn by doing. 결과가 아닌 과정. 직접 해 본 사람 vs. 배워서 아는 사람 p34 끈기와 뚝심 별게 아닌게 아니다 끝까지 해내는 힘 John Williams - 매일 작곡. 영감-&amp;gt;작곡이 아니라 작곡을 하다보면 영감을 얻게 됨 p41 영어 강의 준비 -&amp;gt; 영어 발음을 보완하기 보다 강의 준비를 철저하게 함.</description></item><item><title>(책) 매일 아침 써봤니?</title><link>https://cychong47.github.io/post/2018/did-you-write-in-every-morning/</link><pubDate>Sun, 01 Jul 2018 12:03:47 +0900</pubDate><guid>https://cychong47.github.io/post/2018/did-you-write-in-every-morning/</guid><description>세바시 였던가, 공개 강의 동영상을 통해 처음 알게 된 김민식 PD. 예전에 인기있었던 시트콤, ‘논스톱’을 만든 PD인데 MBC 파업과 관련되어 힘든 시간을 보내다 “영어책 한 권 외워봤니?”라는 독특한 제목의 영어 책으로 대중에 알려졌다. 그와 동시에 대입부터 시작해서 방송국 파업 때문에 경영진에 찍혀 고생하는 기간에 블로그를 통해 재기(?)에 성공한 특이한 이력을 가지고 있는데 시트콤 PD 답게 재밌는 입담을 통해 자신의 힘들었던 과거를 통해 의미있는 이야기를 많이 해줬던 걸로기억한다. 매일 아침 써봤니? 는 제목 그대로 저자가 하고 있다는 매일 아침 글쓰기를 통해 변화된 인생에 대해 이야기해주고 있다.</description></item><item><title>생각 정리의 기술</title><link>https://cychong47.github.io/post/2018/mindmap/</link><pubDate>Wed, 20 Jun 2018 14:00:06 +0900</pubDate><guid>https://cychong47.github.io/post/2018/mindmap/</guid><description>오늘 회사에서 점심 시간에 배운 mindmap 활용법
iThoughtX를 OS X, iOS용으로 모두 구입할 만큼 마인드맵에 관심이 있긴 한데 생각을 풀어낼 때 다양한 framework을 활용할 수 있다는 건 몰랐다. 관련된 책을 한번 읽어보면 좋겠네.
오늘 강의해준 신 분은 무려 자기 이름을 걸로 책을 낸 저자 동종성 님</description></item><item><title>Update ansible-playbook for wordpress</title><link>https://cychong47.github.io/post/2018/update-ansible-playbook-for-wordpress/</link><pubDate>Thu, 14 Jun 2018 15:13:52 +0900</pubDate><guid>https://cychong47.github.io/post/2018/update-ansible-playbook-for-wordpress/</guid><description>이상하게 wordpress 버전이 올라가면 docker용 wordpress 버전도 함께 올라갈 텐데 아무리 최신 docker image를 받아 container를 만들어도 wordpress admin 계정에 들어가면 wordpress를 업데이트 해야 한다고 한다. docket store(http://store.docker.com)에 가면 분명히 wordpress 최신 버전으로 패키징되어 있는 데&amp;hellip;
혹시나 하고 ansible-playbook을 보니 /var/www/html에 마운트되는 위치에 이전 버전의 wordpress 파일들이 존재하고 있었다.
volumes: - &amp;#34;/Users/cychong/Documents/wordpress/html:/var/www/html&amp;#34; - &amp;#34;/Users/cychong/Documents/wordpress/uploads:/var/www/html/wp-content/uploads&amp;#34; - &amp;#34;/Users/cychong/Documents/wordpress/conf/php_uploads.ini:/usr/local/etc/php/conf.d/uploads.ini&amp;#34; 바로 첫번째 줄이 문제를 유발하고 있는 곳&amp;hellip; 내가 왜 굳이 저렇게 했을까 생각해 보니 저 디렉토리에 바로 wp-content가 있고, 그 아래 themes와 plugins가 있다.</description></item><item><title>wordpress admin 계정 복구</title><link>https://cychong47.github.io/post/2018/wordpress-admin-login-fail/</link><pubDate>Thu, 14 Jun 2018 14:21:13 +0900</pubDate><guid>https://cychong47.github.io/post/2018/wordpress-admin-login-fail/</guid><description>문제 블로그 보는 거 자체는 문제가 없는데 admin 계정으로 로그인 시도하면 반복해서 로그인 페이지로 redirect됨
http://sosa0sa.com/wp-login.php?redirect_to=http://sosa0sa.com/wp-admin/&amp;amp;reauth=1 구글링을 하니 대부분 쿠키를 초기화하고, theme, plugin등을 초기화하라는 의견이 대부분. 모두 따라해 봤으니 제대로 동작하지 않는다&amp;hellip; -_-;;;
마지막으로 wp_usermeta table에서 session_token 값을 초기화하라는 말이 있어 이것도 해 보기로. phpmyadmin을 설치해서 table의 값을 변경하라고 해서 phpmyadmin을 역시 docker로 설치해 보기로
https://wordpress.org/support/topic/possible-fix-for-sudden-redirect-loop-at-wp-login-with-reauth1/
Phpmyadmin docker 설치 Wordpress ansible-playbook 에 다음과 같이 추가
links를 통해 mysql container와 연결하고 PMA_HOST를 해당 mysql container의 name으로 지정하는 것이 중요한 내용임.</description></item><item><title>Grafana, influxDB and python</title><link>https://cychong47.github.io/post/2018/grafana-influxdb-and-python/</link><pubDate>Wed, 06 Jun 2018 04:33:06 +0900</pubDate><guid>https://cychong47.github.io/post/2018/grafana-influxdb-and-python/</guid><description>Time-series data를 python을 이용해서 influxDB에 저장하고, Grafana로 그래프를 보여주는 예제
https://github.com/cychong47/influxdb_example.git
Install Grafana and influxDB Install Grafana 직접 호스트에 설치할 수도 있지만, 세상 편하게 만들어준 docker를 이용해서 grafana, influxdb등을 설치하자.
mbpr15:~ cychong$ docker pull grafana/grafana Using default tag: latest latest: Pulling from grafana/grafana f2aa67a397c4: Pull complete 89573effc7c8: Pull complete b55c103da375: Pull complete Digest: sha256:364bec4a39ecbec744ea4270aae35f6554eb6f2047b3ee08f7b5f1134857c32c Status: Downloaded newer image for grafana/grafana:latest Start grafana
mbpr15:~ cychong$ docker run -d -p 3000:3000 —name grafana grafana/grafana 148894d7009259b02b04e1a98467f549400be91f9b055f8686557d69b9339e4b Install influxDB influxdb도 docker 명령어 하나로 설치</description></item><item><title>Elastic stack and Metricbeat</title><link>https://cychong47.github.io/post/2018/install_elasticstack_and_metricbeat/</link><pubDate>Thu, 31 May 2018 21:58:51 +0900</pubDate><guid>https://cychong47.github.io/post/2018/install_elasticstack_and_metricbeat/</guid><description>Install Elastic Stack(ELK stack) with docker mbpr15:elk-wireshark cychong$ git clonehttps://github.com/deviantony/docker-elk.git git: &amp;#39;clonehttps://github.com/deviantony/docker-elk.git&amp;#39; is not a git command. See &amp;#39;git --help&amp;#39;. mbpr15:elk-wireshark cychong$ git clone https://github.com/deviantony/docker-elk.git Cloning into &amp;#39;docker-elk&amp;#39;... remote: Counting objects: 1235, done. remote: Total 1235 (delta 0), reused 0 (delta 0), pack-reused 1235 Receiving objects: 100% (1235/1235), 259.29 KiB | 77.00 KiB/s, done. Resolving deltas: 100% (470/470), done. mbpr15:elk-wireshark cychong$ cd elk mbpr15:elk-wireshark cychong$ cd docker-elk/ mbpr15:docker-elk cychong$ ls LICENSE	elasticsearch	logstash README.</description></item><item><title>2018.01 home network</title><link>https://cychong47.github.io/post/2018/2018-01-home-network/</link><pubDate>Tue, 30 Jan 2018 15:44:01 +0900</pubDate><guid>https://cychong47.github.io/post/2018/2018-01-home-network/</guid><description/></item><item><title>Ansible - Install homebrew</title><link>https://cychong47.github.io/post/2017/ansible-homebrew/</link><pubDate>Sat, 30 Dec 2017 02:34:39 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ansible-homebrew/</guid><description>update homebrew mbpr15:mp3 cychong$ ansible all -m homebrew -a update_homebrew=yes localhost | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: true, &amp;#34;msg&amp;#34;: &amp;#34;Homebrew updated successfully.&amp;#34; } mini2 | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: true, &amp;#34;msg&amp;#34;: &amp;#34;Homebrew updated successfully.&amp;#34; } upgrade all packages mbpr15:mp3 cychong$ ansible all -m homebrew -a update_homebrew=yes -a upgrade_all=yes localhost | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: true, &amp;#34;msg&amp;#34;: &amp;#34;Homebrew upgraded.&amp;#34; } mini2 | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: true, &amp;#34;msg&amp;#34;: &amp;#34;Homebrew upgraded.&amp;#34; } install a package mbpr15:mp3 cychong$ ansible all -m homebrew -a name=neovim -a state=present mbpr15:~ cychong$ cat install_brew_neovim.</description></item><item><title>Ansible - recreate ghost container</title><link>https://cychong47.github.io/post/2017/recreate-ghost-container/</link><pubDate>Sat, 30 Dec 2017 02:31:41 +0900</pubDate><guid>https://cychong47.github.io/post/2017/recreate-ghost-container/</guid><description>YAML file state:absent 는 현재 존재하는 container를 중지시키고, 삭제한다. 단순히 stop만 시키려면 state:stopped로 지정하면 된다.
pull: yes 옵션을 사용하면 항상 최신 image를 pull한다고 한다.
recreate Use with present and started states to force the re-creation of an existing container.
mbpr15:ansible cychong$ cat recreate_container_ghost.yaml --- - hosts: mini2 tasks: - name: Stop and remove contianer docker_container: name: ghost state: absent - name: Create ghost Container docker_container: name: ghost image: ghost # always pull the latest image pull: yes state: started recreate: yes volumes: - &amp;#34;/Users/cychong/Dropbox/Apps/ghost/content/:/var/lib/ghost/content&amp;#34; - &amp;#34;/Users/cychong/Dropbox/Apps/ghost/config.</description></item><item><title>Ansible - basics of ansible-playbook</title><link>https://cychong47.github.io/post/2017/ansible-playbook/</link><pubDate>Fri, 29 Dec 2017 13:43:14 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ansible-playbook/</guid><description>play The goal of a play is to map a group of hosts to some well defined roles, represented by things ansible calls tasks. At a basic level, a task is nothing more than a call to an ansible module
play는 명령을 수행할 대상과 수행할 명령을 모두 포함하고 있다.
playbook playbook은 하나 혹은 이상의 play들의 집합으로 정의한다.
Conventional template of playbook --- - hosts: XXX optoins.... tasks: -name: YYY MODULE_NAME : MODULE_ARGS -name : ZZZ MODULE_NAME: MODULE_ARGS .</description></item><item><title>Ansible - ad-hoc or basic</title><link>https://cychong47.github.io/post/2017/ansible-exercise-1/</link><pubDate>Wed, 27 Dec 2017 14:32:51 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ansible-exercise-1/</guid><description>Create inventory(Ansible hosts) file mbpr15:Homebrew cychong$ cat /etc/ansible/hosts mini1 ansible_host=x.y.z.a ansible_ssh_user=cychong ansible_ssh_port=22 mini2 ansible_host=x.y.z.b ansible_ssh_user=cychong ansible_ssh_port=22 localhost ansible_connection=local ping ping 명령도 ansible이 제공하는 ping module을 이용하므로 -m 옵션을 사용한다.
mbpr15:Homebrew cychong$ ansible all -m ping -k SSH password: localhost | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } mini2 | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } mini1 | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;timed out&amp;#34;, &amp;#34;unreachable&amp;#34;: true } ssh의 로그인 ID는 /etc/ansible/hosts에 기술하거나 명령어 옵션 —user=cychong으로 지정할 수 있다.</description></item><item><title>Install Wordpress with docker</title><link>https://cychong47.github.io/post/2017/install-wordpress-with-docker/</link><pubDate>Tue, 19 Dec 2017 22:20:06 +0900</pubDate><guid>https://cychong47.github.io/post/2017/install-wordpress-with-docker/</guid><description>Summary docker run --restart=always -e MYSQL_ROOT_PASSWORD=aqwe123 -e MYSQL_USER=wpuser -e MYSQL_PASSWORD=wpuser@ -e MYSQL_DATABASE=wordpress_db -v /Users/cychong/Dropbox/Apps/wordpress/database:/var/lib/mysql --name mysql -d mysql docker run --restart=always -e WORDPRESS_DB_USER=wpuser -e WORDPRESS_DB_PASSWORD=wpuser@ -e WORDPRESS_DB_NAME=wordpress_db -p 80:80 -v /Users/cychong/Documents/wordpress/html:/var/www/html -v /Users/cychong/Documents/wordpress/uploads:/var/www/html/wp-content/uploads -v /Users/cychong/Documents/wordpress/conf/php_uploads.ini:/usr/local/etc/php/conf.d/uploads.ini --link mysql:mysql --name wpcontainer -d wordpress If required, import database to mysql (Once wordpress data is imported into mysql, upgrading mysql does not requires re-import ingof wordpress data)
mysql install container cychong:~ cychong$ docker run --restart=always -e MYSQL_ROOT_PASSWORD=aqwe123 -e MYSQL_USER=wpuser -e MYSQL_PASSWORD=wpuser@ -e MYSQL_DATABASE=wordpress_db -v /Users/cychong/Dropbox/Apps/wordpress/database:/var/lib/mysql --name mysql -d mysql Unable to find image &amp;#39;mysql:latest&amp;#39; locally latest: Pulling from library/mysql aa18ad1a0d33: Pull complete a5745c3b8bcc: Pull complete 76375fcd129c: Pull complete 4f72cfb004cf: Pull complete 1d6a01e515fb: Pull complete a71e1163fa7e: Pull complete 8c1a568fa442: Pull complete e7a69cecc173: Pull complete 9759a0f979a1: Pull complete 3f71dac6110f: Pull complete 58f37de54392: Pull complete Digest: sha256:790b7b18b832822ef400e44ad9fac885a746db1a7028ec52325730cf9b831753 Status: Downloaded newer image for mysql:latest b1f54c680120898fc7ff16751048fe18ae461399d5d7f10308c156c68d40577b check container is started cychong:~ cychong$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b1f54c680120 mysql &amp;#34;docker-entrypoint.</description></item><item><title>clienBBS</title><link>https://cychong47.github.io/post/2017/clienbbs/</link><pubDate>Thu, 14 Dec 2017 09:42:15 +0900</pubDate><guid>https://cychong47.github.io/post/2017/clienbbs/</guid><description>pip3로는 설치가 안되네
mbpr15:~ cychong$ pip3 install clientBBS Collecting clientBBS Could not find a version that satisfies the requirement clientBBS (from versions: ) No matching distribution found for clientBBS 그래서 그냥 github 링크에서 클론해서 실행
mbpr15:working cychong$ git clone https://github.com/liza183/clienBBS.git Cloning into &amp;#39;clienBBS&amp;#39;... remote: Counting objects: 219, done. remote: Compressing objects: 100% (25/25), done. remote: Total 219 (delta 20), reused 23 (delta 9), pack-reused 185 Receiving objects: 100% (219/219), 33.96 MiB | 3.</description></item><item><title>mac mini 에 windows 10 설치</title><link>https://cychong47.github.io/post/2017/mac-mini-e-windows-10-seolci/</link><pubDate>Tue, 12 Dec 2017 15:18:05 +0900</pubDate><guid>https://cychong47.github.io/post/2017/mac-mini-e-windows-10-seolci/</guid><description>mac mini 2009에 windows 10을 무사히 설치.
몇 가지 삽질을 적어보면
mac mini는 windows 7까지만 지원하고, optic drive를 이용한 설치만 지원하기 때문에 그냥(?) 해서는 windows 10을 설치할 수 없음. 이를 해결하려면 Applications/Utilities에 있는 Boot camp assistant 앱을 복사해서 Contents 디렉토리에 있는 Info.plist 파일 내용을 수정해야 함. 대충 보면 Win7OnlyModels 하는 부분이랑 USBBootSupportedModels 부분을 아예 삭제하면 된다.
Boot camp를 실행시켜 windows partition을 나누려고 했는데 이상하게 3조각으로 나뉘어지면서 윈도10용 설치 파티션을 만들 수 없다고 해서 결국 엘케피탄 설치 파일을 이용해서 다시 설치.</description></item><item><title>Vagrant</title><link>https://cychong47.github.io/post/2017/vagrant-2/</link><pubDate>Tue, 21 Nov 2017 15:04:19 +0900</pubDate><guid>https://cychong47.github.io/post/2017/vagrant-2/</guid><description>Vagrant What is a Vagrant? Backend에 virtualbox를 사용(변경 가능) 하고, virtualbox를 이용해 VM을 생성하여 그 VM 내 원하는 환경(특정 OS부터 특정 library까지) 을 구성함.
예전에 fd.io에서 빌드하는 vpp 개발 환경이 vagrant로 되어 있었는데 왜 그런가 싶었는데 이제 생각해 보니 vpp 동작에 필요한 OS, kernel module, DPDK SDK 와 패치 들 그리고 vpp code 까지 모든 걸 제어할 수 있도록 VagrantFile을 만들어서 개발 환경을 표준화하려는 것 이었다는.
Container와 달리 독립된 OS환경을 가질 수 있으므로 OS버전이 다르거나 , 커널 모듈 수정 등을 필요로 한 경우에 유용할 듯</description></item><item><title>Amdocs Preps 'Carrier-Grade' Version of ONAP</title><link>https://cychong47.github.io/post/2017/amdocs-preps-carrier-grade-version-of-onap/</link><pubDate>Tue, 21 Nov 2017 14:51:25 +0900</pubDate><guid>https://cychong47.github.io/post/2017/amdocs-preps-carrier-grade-version-of-onap/</guid><description>From Amdocs Preps &amp;lsquo;Carrier-Grade&amp;rsquo; Version of ONAP | Light Reading(http://www.lightreading.com/mobile/mec-(mobile-edge-computing)/amdocs-preps-carrier-grade-version-of-onap/d/d-id/738315)
&amp;ldquo;We&amp;rsquo;re just about to make a big carrier [and] enterprise grade release of ONAP,&amp;rdquo; Angela Logothetis, VP and CTO of Amdocs Open Network, told Light Reading
Logothetis says that Amdocs is working with Intel Corp. (Nasdaq: INTC) on edge computing proofs-of-concept. This involves understanding what content and data needs to cached and where exactly that should happen on the network.</description></item><item><title>ONAP Takes Flak as Telcos Prep for Release 1 | Light Reading</title><link>https://cychong47.github.io/post/2017/onap-takes-flak-as-telcos-prep-for-release-1-light-reading/</link><pubDate>Tue, 14 Nov 2017 22:31:57 +0900</pubDate><guid>https://cychong47.github.io/post/2017/onap-takes-flak-as-telcos-prep-for-release-1-light-reading/</guid><description>1st release Amsterdam release which is due to November 16
Critics It will not be stable enough to be used for product
misunderstanding That release will focus on providing support for three network functions or services &amp;ndash; a virtual firewall (vFW), virtual customer premises equipment (vCPE) and a voice-over-LTE service running on a virtual evolved packet core (vEPC)
I think this is a misunderstanding. These are just an use case not the ONAP supports them only.</description></item><item><title>Lead Follow or Get Out of the Way</title><link>https://cychong47.github.io/post/2017/lead-or-step-aside/</link><pubDate>Sun, 29 Oct 2017 01:38:23 +0900</pubDate><guid>https://cychong47.github.io/post/2017/lead-or-step-aside/</guid><description>book from Amazon</description></item><item><title>관리자는 '관리'업무를 하는 동료이다.</title><link>https://cychong47.github.io/post/2017/what-is-good-manager/</link><pubDate>Sat, 28 Oct 2017 15:34:55 +0900</pubDate><guid>https://cychong47.github.io/post/2017/what-is-good-manager/</guid><description>구글이 연구한 &amp;lsquo;좋은 관리자가 가져야 할 8가지 덕목&amp;rsquo;.
좋은 코치(coaches)다. 팀에게 권한을 양도하며 마이크로매니지를 하지 않는다. 팀원의 성공에 관심을 표명하며 개인적 삶에도 관심을 기울인다. 생산적이며 결과를 중심으로 사고한다. 훌륭한 커뮤니케이션 능력을 가지고 있다. 팀원들이 경력을 키워나가도록 도움을 준다. 팀을 위한 명확한 비전을 가지고 있다. 팀에게 조언을 해주기에 충분한 기술적인 능력을 갖추고 있다. 하나 하나 절대 쉬운 일이 없다.
구글이 제시한 &amp;lsquo;관리자의 자격&amp;rsquo; .</description></item><item><title>Record CBS Music Radio in every day</title><link>https://cychong47.github.io/post/2017/record-cbs-fm-cinema-music/</link><pubDate>Mon, 09 Oct 2017 16:22:15 +0900</pubDate><guid>https://cychong47.github.io/post/2017/record-cbs-fm-cinema-music/</guid><description>Purpose 매일 낮 11시 부터 1시간 동안 CBS 뮤직 FM에서 진행되는 신영음을 듣고 싶다. 아주 오래 전 가장 좋아했던 라디어 프로가 정은임씨가 진행하던 영화음악 이었는데 한참 후에 알게된 신영음을 통해 내가 좋아하는 영화음악을 다시 들을 수 있게 되었다. 문제는 라디오 방송 시간. 어디서든 CBS FM 라디오를 들을 수 있는 공식 레인보우앱 이나 myTuner Pro 같은 앱을 쓰면 들을 수 있지만, 근무시간에 라디오를 듣기도 그렇고, 결정적으로 11시 30분에서 12시 사이에 점심 시간이 시작되어 제대로 듣기가 힘들었다.</description></item><item><title>사진 백업 2017 버전</title><link>https://cychong47.github.io/post/2017/sajin-baegeob-2017-beojeon/</link><pubDate>Mon, 09 Oct 2017 15:41:52 +0900</pubDate><guid>https://cychong47.github.io/post/2017/sajin-baegeob-2017-beojeon/</guid><description>최적화(?) 중.
Lightroom으로 사진 관리 Apple Photos 앱이 아닌 Adobe Lightroom으로 사진 관리. 사진 파일은 DB에 포함시키지 않고, meta data만 DB에 저장하도록 import 방식을 사용. mbpr15:Lightroom cychong$ pwd /Users/cychong/Pictures/Lightroom mbpr15:Lightroom cychong$ ls -al total 55288 drwxr-xr-x 7 cychong staff 224 Oct 9 23:36 . drwx------+ 5 cychong staff 160 Oct 8 10:55 .. -rw-r--r--@ 1 cychong staff 6148 Oct 9 22:47 .DS_Store drwxr-xr-x 20 cychong staff 640 Oct 9 23:43 Lightroom Catalog Previews.</description></item><item><title>Error in using homebrew module in ansible</title><link>https://cychong47.github.io/post/2017/untitled-2/</link><pubDate>Sun, 08 Oct 2017 17:25:43 +0900</pubDate><guid>https://cychong47.github.io/post/2017/untitled-2/</guid><description>When I call the homebrew modules for three hosts including the localhost, one host reports error.
mbpr15:~ cychong$ ansible-playbook install_brew_ack.yaml --verbose No config file found; using defaults PLAY [all] ************************************************************************************************** TASK [Gathering Facts] ************************************************************************************** ok: [localhost] ok: [mini2] ok: [mini1] TASK [install ack in homebrew] ****************************************************************************** ok: [localhost] =&amp;gt; {&amp;#34;changed&amp;#34;: false, &amp;#34;failed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;Package already installed: ack&amp;#34;} ok: [mini1] =&amp;gt; {&amp;#34;changed&amp;#34;: false, &amp;#34;failed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;Package already installed: ack&amp;#34;} fatal: [mini2]: FAILED!</description></item><item><title>FTP server is gone from High Siera OSX Server</title><link>https://cychong47.github.io/post/2017/ftp-server-is-gone-from-high-siera-osx-server/</link><pubDate>Sat, 07 Oct 2017 00:19:27 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ftp-server-is-gone-from-high-siera-osx-server/</guid><description>It is gone finally&amp;hellip; [macOS Server 5.4 changes in High Sierra you need to know about!])https://www.imore.com/changes-macos-server-54-high-sierra)
File Transfer Protocol (FTP): A longtime a security risk, for example for sending password information in clear text, FTP support will be removed from macOS server if you upgrade.
As my xeros printer/scanner suppors only ftp or samba(which is much much slower than the ftp) I have to run my own ftp server in my mac mini.</description></item><item><title>WP video plugin</title><link>https://cychong47.github.io/post/2017/wp-video-plugin/</link><pubDate>Fri, 06 Oct 2017 01:55:04 +0900</pubDate><guid>https://cychong47.github.io/post/2017/wp-video-plugin/</guid><description>Install Easy Video Player
Others 7 Free WordPress Video Player Plugins of 2017</description></item><item><title>Play with Ansible</title><link>https://cychong47.github.io/post/2017/ansible/</link><pubDate>Wed, 04 Oct 2017 00:22:48 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ansible/</guid><description>Configuration ansible client A ansible target B, C In client Ansible targets(B,C) should be listed in the following file. If required additional parameters can be specified such as login account, ssh port and etc
# /etc/ansible/hosts 192.168.1.100 ansible_ssh_user=cychong ansible_ssh_port=22 192.168.1.200 ansible_ssh_user=cychong ansible_ssh_port=22 In ansible targets A should be found on the following file
# grep A .ssh/authorized_keys Test run from A # ansible all -m ping 192.168.1.200 | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;failed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } 192.</description></item><item><title>(Series</title><link>https://cychong47.github.io/post/2017/series-4-10-lessons-from-telemetry/</link><pubDate>Tue, 03 Oct 2017 16:24:37 +0900</pubDate><guid>https://cychong47.github.io/post/2017/series-4-10-lessons-from-telemetry/</guid><description>https://www.youtube.com/watch?v=tIN8BjHwpNs
Other similar videos Architecture for fine-grain, high-resolution Telemetry for network elements. Jun 4 2015, Juniper Networks, Presented in NANOG
Visualizing Cisco Telemetry Data using Elasticsearch, Logstash and Kibana</description></item><item><title>(Series</title><link>https://cychong47.github.io/post/2017/cisco-ios-xr-and-signalfx-demo/</link><pubDate>Tue, 03 Oct 2017 13:47:55 +0900</pubDate><guid>https://cychong47.github.io/post/2017/cisco-ios-xr-and-signalfx-demo/</guid><description>출처 : sdxcentral, Feb 5, 2016
tools presented in the video reference video ppt</description></item><item><title>(Series</title><link>https://cychong47.github.io/post/2017/streaming-telemetry-with-google-protocol-buffers/</link><pubDate>Sun, 01 Oct 2017 21:38:04 +0900</pubDate><guid>https://cychong47.github.io/post/2017/streaming-telemetry-with-google-protocol-buffers/</guid><description>출처 : https://blogs.cisco.com/sp/streaming-telemetry-with-google-protocol-buffers
Summary JSON, &amp;ldquo;compact&amp;rdquo; GPB and &amp;ldquo;Key-Value&amp;rdquo; GPB
&amp;ldquo;Compact&amp;rdquo; GPB data on wire can be decoded without the decoder ring while &amp;ldquo;Key-Value&amp;rdquo; GPB data is Self-Describing. Compact GPB can be used with UDP(default) and TCP(optionally) &amp;ldquo;Key-value&amp;rdquo; GPB is only for TCP 833 bytes of compact GPB while more than 4000 bytes for Key-value GPB Compressed JSON(?)</description></item><item><title>CISCO Yang data model</title><link>https://cychong47.github.io/post/2017/cisco-yang-data-model/</link><pubDate>Sun, 01 Oct 2017 21:33:27 +0900</pubDate><guid>https://cychong47.github.io/post/2017/cisco-yang-data-model/</guid><description>Seems that configuration and operation data are defined in a different yang file though it is not clear they are module or submodule
The models are in the .yang format. A model with: -oper in the model name indicates an operational model. For example, Cisco-IOS-XR-cdp-oper.yang is an operational model for Cisco Discovery Protocol (CDP). -cfg indicates a configuration model. For example, Cisco-IOS-XR-cdp-cfg.yang is a configuration model for CDP. -act indicates a NETCONF actions model.</description></item><item><title>(Series</title><link>https://cychong47.github.io/post/2017/model-driven-telemetry/</link><pubDate>Sun, 01 Oct 2017 14:06:46 +0900</pubDate><guid>https://cychong47.github.io/post/2017/model-driven-telemetry/</guid><description>Why You Should Care About Model-Driven Telemetry from CISCO blog
Summary Periodic polling -&amp;gt; Pushing(Streaming) Model based data with YANG Use standard encoding such as JSON, Google Protocol Buffers Easy to manipulate, connect to analytic solutions 1-min poll is too slow For the last 25 years, network operators have heavily relied on SNMP polling and CLI screen-scraping to extract operational data from the network. But the new and automated demands of today’s networks have pushed these mechanisms to the breaking point.</description></item><item><title>brew install python</title><link>https://cychong47.github.io/post/2017/brew-install-python/</link><pubDate>Sun, 01 Oct 2017 13:44:47 +0900</pubDate><guid>https://cychong47.github.io/post/2017/brew-install-python/</guid><description>Just for the record as some environments are mentioned
mbpr15:working cychong$ brew install python ==&amp;gt; Installing dependencies for python: readline, sqlite, gdbm, openssl ==&amp;gt; Installing python dependency: readline ==&amp;gt; Downloading https://homebrew.bintray.com/bottles/readline-7.0.3_1.high_sierra.bottle.tar.gz ######################################################################## 100.0% ==&amp;gt; Pouring readline-7.0.3_1.high_sierra.bottle.tar.gz ==&amp;gt; Caveats This formula is keg-only, which means it was not symlinked into /usr/local, because macOS provides the BSD libedit library, which shadows libreadline. In order to prevent conflicts when programs look for libreadline we are defaulting this GNU Readline installation to keg-only.</description></item><item><title>Parsing http header with scary</title><link>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</link><pubDate>Sun, 01 Oct 2017 09:36:35 +0900</pubDate><guid>https://cychong47.github.io/post/2017/parsing-http-header-with-scary/</guid><description>정규식으로 http 분석 def processHTTP(data): str_method = &amp;quot;&amp;quot; str_uri = &amp;quot;&amp;quot; 정규표현식을 통해 넘어온 데이터에서 METHOD, URI, HTTP 버전 정보등으로 구분함 h = re.search(&amp;quot;(?P&amp;lt;method&amp;gt;(^GET|^POST|^PUT|^DELETE)) (?P&amp;lt;uri&amp;gt;.+) (?P&amp;lt;version&amp;gt;.+)&amp;quot;, data) if not h: return &amp;quot;Error&amp;quot; # 정규표현식에 해당하는 데이터가 없는 경우 Error 를 리턴해줌 # method 로 정의된 부준은 str_method 에 저장 if h.group(&amp;quot;method&amp;quot;): str_method = h.group(&amp;quot;method&amp;quot;) # URI 데이터는 str_uri 에 저장 if h.group(&amp;quot;uri&amp;quot;): str_uri = h.group(&amp;quot;uri&amp;quot;) return str_method,str_uri # method 와 uri 를 리턴해 줌 출처 : http://www.</description></item><item><title>Google's Load Balancer</title><link>https://cychong47.github.io/post/2017/googles-load-balancer/</link><pubDate>Sun, 01 Oct 2017 08:34:30 +0900</pubDate><guid>https://cychong47.github.io/post/2017/googles-load-balancer/</guid><description>Maglev Google( https://research.google.com/pubs/pub44824.html ) Used in Google Cloud since 2008 Scalable load balancer Consistent hashing Connection Tracking Scale-out model backed by router&amp;rsquo;s ECMP Bypass kernel space for performance. Support connection persistence Network Architecture DNS - Routers - Maglevs - Service EndPoints. One service is served by one or more VIPs DNS returns VIP considering geolocation and load of location One VIP is served by multiple Maglevs Router use ECMP to select one Maglev One VIP is mapped to multiple Service EndPoints Maglev select Service EndPoint by seletion algorithm and connection tracking table Maglev use GRE to send incoming packet to Service EndPoint or another Maglev Send to IP fragment to another special Maglev servers Use only 3-tuple for IP fragment Each Service EndPoint use Direct Server Return(DSR) Maglev Controller Responsible for VIP announcement with BGP Check health status of forwarder If forwarder is not headthy, withdraw all VIP announcements Forwarder Each VIP has one or multiple backend pools(BP) BP contain physical IP address of the Service EndPoint Each BP has specific health checking methods - depends on the service requirement(just reachability or more) Config Manager parse and update configuration of forwarder&amp;rsquo;s behavior based on the Config Objects Sharding Sharding of Maglev enables service isolation - new service or QoS Backend Selection Consistent Hashing distribute loads Record selection in LOCAL connection tracking table Connection tracking table is not shared with another Maglev Does not guarantee consistency on Maglev or Service EndPoint Changes(add/delete) For different traffic type TCP SYN : select Backend and record it in connection tracking table TCP non-SYN : lookup connection tracking table 5-tuple : (maybe) lookup connection tracking table and select backend if not found Consistent Hashing If Maglev is added or removed, router select different Maglev for the exsiting session - ECMP is changed If one Maglev&amp;rsquo;s local connection tracking table is overflowed, it will lose previous selection To resolve this issues, Synchronize local connection tracking table between Maglevs -&amp;gt; overhead, overhead, overhead Consistent hashing for minimize disruption in member changes Maglev hashing - load balancing and minimal disruption on member changes reference Maglev: A Fast and Reliable Software Network Load Balancer Consistent Hashing The Simple Magic of Consistent Hashing</description></item><item><title>OPNFV Asia Meeting</title><link>https://cychong47.github.io/post/2017/opnfv-asia-meeting/</link><pubDate>Sun, 01 Oct 2017 08:28:34 +0900</pubDate><guid>https://cychong47.github.io/post/2017/opnfv-asia-meeting/</guid><description>ZTE Pharos Lab Pharos : OPNFV를 시험하는 worldwide lab 외부에서 접속하는 것이 필요하므로 ssh를 열어줄 수는 없어서 openVPN을 제공하고, 망을 분리하는 등의 이슈 해결을 위해 노력한 듯
https://www.opnfv.org/developers/pharos Pharos는 시험 환경을 구축해서 community에 공개해서 사용할 수 있는 환경을 제공하는 듯 Provide developers with substantial resources for early testing within realistic NFV environments via an open, consistent, repeatable test domain
Why donate Pharos environment NFV 환경에 사용할 HW를 직접 제조하는 업체들에게는 제품 호환성에 대한 시험을 유도할 수 있는 장점을 가짐.</description></item><item><title>Integrating VES to OPNFV</title><link>https://cychong47.github.io/post/2017/ves-to-opnfv/</link><pubDate>Mon, 25 Sep 2017 15:44:11 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ves-to-opnfv/</guid><description>VES project VNF Event Stream Project
Demo vHello VES Demo in OpenStack Barcelona 2016 VES ONAP demo from OPNFV Summit 2017 From VF Event Streaming (VES) Project Proposal Alok Gupta 13 Jun, 2016 OPNFV VES.pptx VNF Event Stream Prpoposal OPNFV projects that potentially benefit from the VES project
Fault Management ([Doctor] (https://wiki.opnfv.org/display/doctor)) *** Virtualized Infrastructure Deployment Policies (Copper) High Availability for OPNFV (Availability) Data Collection for Failure Prediction (Prediction) *** Audit (Inspector) Fault localization (RCA, Pinpoint ) *** Service Function Chaining (sfc) Moon Security Management OpenStack projects that potentially benefit from the VES project</description></item><item><title>OPNFV Barometer and VES</title><link>https://cychong47.github.io/post/2017/opnfv-barometer/</link><pubDate>Mon, 25 Sep 2017 15:05:40 +0900</pubDate><guid>https://cychong47.github.io/post/2017/opnfv-barometer/</guid><description>Summary The VES can be supported with the help of Kafka broker with the collectd in OPNFV Barometer project which is aim to collect telemetrics from the NFVI.
Barometer Project The purpose of this project is providing metrics can be used to decide quality of NFVI. For this, the followings are reported
NIC statistics Resources such as CPU, Memory, load, cache, themals, fan speeds, voltages and machine check exceptions. This means the output of this project will be used in the host itself as well as inside of VM.</description></item><item><title>(Summary) AT&amp;T Container Strategy</title><link>https://cychong47.github.io/post/2017/summary-at-t-container-strategy/</link><pubDate>Thu, 21 Sep 2017 15:21:45 +0900</pubDate><guid>https://cychong47.github.io/post/2017/summary-at-t-container-strategy/</guid><description>From https://www.youtube.com/watch?v=rYRiH3HZFN4&amp;amp;t=3s
Presented in OpenStack Summit 2017 Boston
Container will be used for workload processing after 2019 VNF is differ from Enterprise IT worklaod(4:19)
VNF is not a simple VM Maintain a state Complex network configuration Sophisticated Storage Connectivity HA is important 2018-2019 vendor and open source project especially openstack should do something to meet the requirements.
Even it takes some time for container to replace VM for workload perspective, running the Openstack service as a container is possible today.</description></item><item><title>(News) Amdocs Brings an NFV Software Package Based on ONAP</title><link>https://cychong47.github.io/post/2017/new-amdocs-brings-an-nfv-software-package-based-on-onap/</link><pubDate>Wed, 20 Sep 2017 15:30:44 +0900</pubDate><guid>https://cychong47.github.io/post/2017/new-amdocs-brings-an-nfv-software-package-based-on-onap/</guid><description>September 12, 2017
https://www.sdxcentral.com/articles/news/amdocs-brings-nfv-software-package-based-onap/2017/09/
Amdocs announced its new NFV Powered by ONAP portfolio – a portfolio featuring modular capabilities that accelerate service design, virtualization and operating capabilities on demand.
Service providers using technologies developed in ONAP and its ecosystem of capabilities can provide enterprises the ability to design their own networks as part of a richer set of service features.
from : https://www.amdocs.com/media-room/amdocs-nfv-powered-onap-worlds-first-software-and-services-portfolio-carriers-based-open
Amdoc? Amdocs was initially involved with AT&amp;amp;T’s home-grown ECOMP platform as an integrator.</description></item><item><title>Prometheus</title><link>https://cychong47.github.io/post/2017/prometheus/</link><pubDate>Mon, 18 Sep 2017 13:59:00 +0900</pubDate><guid>https://cychong47.github.io/post/2017/prometheus/</guid><description>Cloud Native Computing Foundation(http://cncf.io)에 포함된 Container monitoring tool.
집 맥미니에서 돌리고 있는 3개 container들을 관리하는데 사용할 수 있나 싶어(실은 관리할 것도 없지만 그냥 재미로 container monitor 기능을 보고 싶어서) 설치 해 봤다
Install cncf.io의 많은 툴이 그렇지만 golang으로 작성되어 있어 golang부터 설치했다
brew install go OSX에서 brew는 사용할 때마다 감탄을 금치 못하게 한다. 물론 우분투에도 apt가 있지만 apt보다 brew가 훨씬 편한 것 같다.
그 다음에는 그냥 docker hub에 있는 prometheus docker 가져다 설치</description></item><item><title>NGNIX for service mesh</title><link>https://cychong47.github.io/post/2017/ngnix-for-service-mesh/</link><pubDate>Fri, 15 Sep 2017 14:39:11 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ngnix-for-service-mesh/</guid><description>NGINX Releases Microservices Platform, OpenShift Ingress Controller, and Service Mesh Preview
NGNIX also join for service mesh bandwagon?
NGNIX Application Platform NGINX Plus, the commercial variant of the popular open source NGINX web server. NGINX Web Application Firewall (WAF) NGINX Unit, a new open source application server that can run PHP, Python and Go NGINX Controller, a centralised control plane for monitoring and management of NGINX Plus Additional release a Kubernetes Ingress Controller solution for load balancing on the Red Hat OpenShift Container Platform an implementation of NGINX as a service proxy for the Istio service mesh control plane.</description></item><item><title>Wordpress with docker-compose</title><link>https://cychong47.github.io/post/2017/wordpress-with-docker-compose-failing/</link><pubDate>Sun, 03 Sep 2017 15:00:57 +0900</pubDate><guid>https://cychong47.github.io/post/2017/wordpress-with-docker-compose-failing/</guid><description>Under construction!!
Error https://docs.docker.com/compose/wordpress/#define-the-project 에 있는 에제대로 docker-compose.yaml 파일을 만든 후 도전~~
근데 실패
cychong:~/work/my_wordpress cychong$ docker-compose up -d Pulling db (mysql:5.7)... Traceback (most recent call last): File &amp;#34;docker-compose&amp;#34;, line 3, in &amp;lt;module&amp;gt; File &amp;#34;compose/cli/main.py&amp;#34;, line 68, in main File &amp;#34;compose/cli/main.py&amp;#34;, line 118, in perform_command File &amp;#34;compose/cli/main.py&amp;#34;, line 928, in up File &amp;#34;compose/project.py&amp;#34;, line 427, in up File &amp;#34;compose/service.py&amp;#34;, line 311, in ensure_image_exists File &amp;#34;compose/service.py&amp;#34;, line 1016, in pull File &amp;#34;site-packages/docker/api/image.</description></item><item><title>ghost container with docker-compose</title><link>https://cychong47.github.io/post/2017/ghost-container-with-docker-compose/</link><pubDate>Sun, 03 Sep 2017 01:26:28 +0900</pubDate><guid>https://cychong47.github.io/post/2017/ghost-container-with-docker-compose/</guid><description>얼마전에 구성한 ghost container는 ghost가 1.x로 업데이트가 되면서 설정 정보의 위치가 변경되었는데 그걸 미처 몰라 블로그 주소가 기본값인 localhost로 설정되는 문제가 있었다. 기존 ghost container에 접근해서 확인해 보니 `/var/lib/ghost/config.production.json&amp;rsquo; 파일에 주소가 설정되어 있는 걸 보고 이 파일도 따로 지정해 주도록 변경했다. 그러면서 docker-compose를 한번 써 보기로
일단 기존 ghost를 정리하고
cychong:~ cychong$ docker stop ghost ghost cychong:~ cychong$ docker rm ghost ghost cychong:~ cychong$ docker rmi ghost Untagged: ghost:latest Untagged: ghost@sha256:a1f70641d35755395eb16827de4e67861e01bffe18bac8e54ab5c68cd170a2ea Deleted: sha256:e6ba3dd3c2491c6086d570fa9769a9f60d7c004129ff9ae7ff9fa0bad16a993b Deleted: sha256:c1ee9d43624bb4a1922c15d7a9175a80d1952cb71464d6d9d900fe21948227af Deleted: sha256:f8f95cdbafce4ecd226cdd690e6f909203a0f83d3507c53a71d4e59826ea881b Deleted: sha256:935d8847555992b702173b83b0d210f2728a24b5287467396dc8d5c68907691f Deleted: sha256:f4766b72a49d4cd2e897da0efcec94c33a0d24a95cb8426a790e1c45e6e39fae Deleted: sha256:0c0dbaebe17c6f585eb596e705ed5acba668097698a7780844c12597bb99b34a Deleted: sha256:c807796bea7a34c0b73eae853b728f2bbcd7a4fecc19d049455b322120f95ce7 Deleted: sha256:15f9f4e44e22d3287b6caf9555110383d3ff2e88ee9cc03823b1ba5a01b75eac Deleted: sha256:77809f11069f2abfb571cba07ee3d696ec32823df0f5d0587042ffdb27a80add Deleted: sha256:5d6bba18f7b25c9b93d3cc0d93a4cff54eb88b0ba22ed867633a21fc3ded5f57 하는 김에 최신 버전의 ghost받아오고</description></item><item><title>Try to restore Wordpress container</title><link>https://cychong47.github.io/post/2017/try-to-restore-wordpress-docker/</link><pubDate>Sun, 03 Sep 2017 00:36:25 +0900</pubDate><guid>https://cychong47.github.io/post/2017/try-to-restore-wordpress-docker/</guid><description>docker 버전이 업데이트되고, 몇 가지 변경사항이 있은 후 ghost, wordpress/mysql 조합의 container들이 접속이 되질 않는다. 한참을 두고 보다 ghost는 새 버전(1.x)이 나온 걸 계기로 새로 설치를 했는데(당연히 이전 설치에서 데이터를 container 내부가 아니라 local machine에 두도록 해서 데이터는 그대로 보존) wordpress는 그러질 못했다.
이것 역시 참다참다 못해 https://docs.docker.com/compose/wordpress/#define-the-project 에 나와있는 docker swarm을 이용해서 복구해 보려고 삽을 들었다.
위 페이지에 있는 대로 설정 파일을 만들고
version: &amp;#39;3&amp;#39; services: db: image: mysql:5.7 volumes: - /Users/cychong/Dropbox/Apps/wordpress/:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: xxx MYSQL_DATABASE: xxx MYSQL_USER: xxx MYSQL_PASSWORD: xxx wordpress: depends_on: - db image: wordpress:latest volumes: - /Users/cychong/Documents/wordpress/:/var/www/html - /Users/cychong/Documents/wordpress/php_uploads.</description></item><item><title>Tesla 폄하에 대한 나의 생각</title><link>https://cychong47.github.io/post/2017/tesla-pyeomhae-daehan-nayi-saenggag/</link><pubDate>Tue, 22 Aug 2017 22:11:57 +0900</pubDate><guid>https://cychong47.github.io/post/2017/tesla-pyeomhae-daehan-nayi-saenggag/</guid><description>난 반대로 기존 상용차업체들이 몇 년간 테슬라를 보면서도 고작(?) 전기차 라는 키워드에만 집중해서 분석한 듯한 모습이 더 실망스러운데. 여전히 테슬라를 전기동력을 이용한 차를 만드는 회사로 인지하는 건 아닌지.
다른 분야와 마찬가지로 자동차부문에 SW라는 개념을 넣은 것도 전기차 못지 않은 혁신이라고 생각. 도대체 서비스센터 갈때마다 뭔 소프트웨어 업데이트를 했다고 하지만 사용자인 내가 느낄 수 있는 건 단 한번도 없었는데(이건 내 제한된 경험때문에 V사만 그런 것일지도 모르지만)
한번 차를 팔면 땡(그나마 하드웨어에 대한 유지보수망)이라는 생각을 가지고 있는 회사와 끊임없이 SW를 통해 부가가치를 만들어 제공하려는 회사는 하늘과 땅 차이가 아닐까 싶다.</description></item><item><title>Useful quicklooks</title><link>https://cychong47.github.io/post/2017/useful-quicklooks/</link><pubDate>Wed, 26 Jul 2017 14:36:10 +0900</pubDate><guid>https://cychong47.github.io/post/2017/useful-quicklooks/</guid><description>brew cask install qlmarkdown brew cask install quicklook-json brew cask install qlprettypatch brew cask install quicklook-csv</description></item><item><title>Naver Labs 12 commandments</title><link>https://cychong47.github.io/post/2017/naver-labs-12-commandments/</link><pubDate>Thu, 08 Jun 2017 22:06:37 +0900</pubDate><guid>https://cychong47.github.io/post/2017/naver-labs-12-commandments/</guid><description/></item><item><title>(요약) How to ship production-grade Go</title><link>https://cychong47.github.io/post/2017/how-to-ship-production-grade-go/</link><pubDate>Thu, 04 May 2017 12:24:27 +0900</pubDate><guid>https://cychong47.github.io/post/2017/how-to-ship-production-grade-go/</guid><description>출처 : O&amp;rsquo;reilly radar
현장에서 발생하는 문제 몇 번 겪어본 사람이면 대부분 동의할 문제긴 한데 structured log 사용이나 application metric 측정 등은 오래
Wrap errors Error handler wrapper function을 이용해서 error code(annotation 포함) 등을 잘 출력해서 분석이 쉽게 하자
Report panics Panic을 내야 하는 경우에는 해당 사실을 어딘가 기록(하거나 전송해서 남기고) 패닉 처리하자.
Use structured logs 일반 text보다는 덜 human-readable하지만 SW를 이용해서 분석하기 쉬운 structured log를 남기자. ELK를 이용해 로그 분석하기도 용이하다.</description></item><item><title>Slack이 기능 중 하나 - 방해금지</title><link>https://cychong47.github.io/post/2017/slack-do-not-disturb/</link><pubDate>Sun, 16 Apr 2017 05:51:11 +0900</pubDate><guid>https://cychong47.github.io/post/2017/slack-do-not-disturb/</guid><description>Slack에서 제공하는 여러 가지 기능 중 하나로 &amp;ldquo;Do not disturb&amp;quot;가 있다. 아래는 그 기능을 설명한 블로그 글( Slack으로 막일을 줄여요 ~ 막일을 줄이기 위한 유용한 팁 2 )
Slack 툴을 만든 회사 Slack에서의 문화를 따라 나온 기능이라고 하는데 직원들이 퇴근 후에도 회사 일에 연결되어 있다는 부담감을 없애주고 싶었단다.
이 기능을 활용하면 사람들간에 저녁이나 주말에 나누고 싶은 정보가 있을 때, 각자의 설정에 따라 바로 알림을 받거나, 혹은 나중에 알 수도 있을 거다.</description></item><item><title>윤식당에서 배우는 agile</title><link>https://cychong47.github.io/post/2017/younkitchen-agile/</link><pubDate>Sun, 16 Apr 2017 05:40:05 +0900</pubDate><guid>https://cychong47.github.io/post/2017/younkitchen-agile/</guid><description>요즘 재밌게 보고 있는 JTBC 윤식당. 이서진을 포함한 몇 명의 연기자가 해외에 식당을 내고 운영한다. 그나마 얼굴이 덜 알려진 해외에서 요리를 남에게 파는 행위를 해봤을 것 같지 않은 사람들이 모여 식당을 운영하는 걸 잔잔(?)한 톤으로 보여준다.
그런데 우연히 읽은 글에서 &amp;lsquo;윤식당&amp;rsquo;과 스타트업을 연결한 걸 봤다.
http://madedesignbyme.com/archives/1387
하지만 윤식당이란 타이틀처럼 식당장사를 하게되는데 그들은 이걸 처음 해보게 됩니다. 이들은 처음하는 식당을 어떻게하면 좋은 결과를 만들어 낼수 있는지 저녁을 먹으며 연구하고 그 다음날 아침, 전날의 피드백을 반영하기위해 식재료를 사러가는 것으로 그날의 하루를 시작합니다.</description></item><item><title>Slack + Ghost</title><link>https://cychong47.github.io/post/2017/slack-ghost/</link><pubDate>Wed, 12 Apr 2017 15:37:39 +0900</pubDate><guid>https://cychong47.github.io/post/2017/slack-ghost/</guid><description>Slack에 개인 채널(?)을 만들었다. 이런 저런 내가 수집(?)하는 정보들을 한 군데서 모아서 히스토리를 만들면 어떨까 하는 생각에
누구는 slack과 빌드 상황도 연동해서 사용한다고 하는데 그건 좀 공부가 필요해 보이고, 일단 제일 쉬워 보이는 ghost와 연동을 시도해 봤다.
Ghost의 admin 화면에서 Apps를 선택하면 이런 화면이 나온다.
여기서 Slack항목의 Active를 선택하면 slack와 연동할 수 있는 URL을 입력하라고 나온다. 아래는 이미 연동이 된 상태로 처음 선택한 경우에는 URL 아래에 있는 &amp;ldquo;Set up a new incoming webhook here&amp;quot;의 here를 선택한다.</description></item><item><title>Feature Flag Driven Development</title><link>https://cychong47.github.io/post/2017/feature-flag-driven-development/</link><pubDate>Wed, 12 Apr 2017 15:29:09 +0900</pubDate><guid>https://cychong47.github.io/post/2017/feature-flag-driven-development/</guid><description>From Ericsson &amp;ldquo;Fueling 5G with DevOps&amp;rdquo;
Maintaining one track in software development, using feature flag-driven development, and establishing version-controlled repositories for application code and application and system configuration data enables teams to create a complete environment that is ready for consistent “build and deploy”.
What is feature flag-driven development? 특정 feature에 대해 일부 고객(예를 들면 전체 고객 중 1%)에 대해서만 먼저 적용한 후 feedback에 따라 확대 적용할 지 rollback할 지를 결정하는 방식</description></item><item><title>Espresso - Google's peering edge architecture</title><link>https://cychong47.github.io/post/2017/espresso-googles-peering-edge-architecture/</link><pubDate>Wed, 12 Apr 2017 00:32:57 +0900</pubDate><guid>https://cychong47.github.io/post/2017/espresso-googles-peering-edge-architecture/</guid><description>Google Fellow Amin Vahdat,
“Early on, we realized that the network we needed to support our services did not exist and could not be bought,”
Espresso makes Google cloud faster, more available and cost effective by extending SDN to the public internet
network should be treated as a large-scale distributed system leveraging the same control infrastructure we developed for Google’s compute and storage systems Four pillars on Google&amp;rsquo;s SDN strategy Jupiter: Google employed SDN principles to build Jupiter, a data center interconnect capable of supporting more than 100,000 servers.</description></item><item><title>Why message queue used for microservice?</title><link>https://cychong47.github.io/post/2017/why-message-queue-used-for-microservice/</link><pubDate>Sun, 09 Apr 2017 15:41:23 +0900</pubDate><guid>https://cychong47.github.io/post/2017/why-message-queue-used-for-microservice/</guid><description/></item><item><title>P4</title><link>https://cychong47.github.io/post/2017/p4/</link><pubDate>Sun, 09 Apr 2017 08:58:50 +0900</pubDate><guid>https://cychong47.github.io/post/2017/p4/</guid><description>Open source language for &amp;ldquo;Programming Protocol-independent Packet Processor&amp;rdquo;
http://p4.org
Barefoot network - Tofino - PISA(Protocol Independent Switch Architecture) switch Netronome - smart NIC 5G: flexibility or high performance? Both - Ericsson Research Blog POF/PIF and P4 initiatives all point in a direction where programmable packet processing will not depend on standardized OpenFlow action sets anymore
POF : Protocol Oblivious Forwarding PIF : Protocol Independent Forwarding
OF-PI P4 in wikipedia p4 in ONRC Revolutionising networking technology from newelectronics P4: driving innovation in server-based networking (Jan 4 2017) Extern objects in P4:an ROHC Compression Case study</description></item><item><title>Table or dish</title><link>https://cychong47.github.io/post/2017/table-or-dish/</link><pubDate>Thu, 06 Apr 2017 00:40:05 +0900</pubDate><guid>https://cychong47.github.io/post/2017/table-or-dish/</guid><description>They are going to have to make a choice here - do you want to be at the table or on the plate?
먹을래 먹힐래?</description></item><item><title>Move to docker</title><link>https://cychong47.github.io/post/2017/move-to-docker/</link><pubDate>Tue, 04 Apr 2017 13:51:03 +0900</pubDate><guid>https://cychong47.github.io/post/2017/move-to-docker/</guid><description>지금 집에 있는 두 대의 mac mini를 이용해서 각각 wordpress와 ghost를 돌리고 있다.
wordpress의 경우 2013년부터 시작한 블로그를 운영하는데 사용하고 있는데, 웹호스팅 회사 몇 군데를 전전하다 몇 년 전부터 집에 있는 mac mini 2009에 MAMP를 이용해서 자체 서버를 이용하고 있었다.
Ghost는 내가 좋아하는 markdown을 기본으로 사용하는 블로그 툴을 찾다 만났는데 지금은 사라졌지만 초기 홈페이지에 있던 멋진 dashboard에 낚여 설치했다. Open source 답지 않고 느린 개발 속도가 이해되지는 않지만, 여전히 markdwon을 제대로 지원하는 흔치 않은 설치형 블로그 툴이라 아직 희망을 버리지 않고 사용하고 있다.</description></item><item><title>(책) 어떻게 읽을 것인가 - 2</title><link>https://cychong47.github.io/post/2016/how-to-read-2/</link><pubDate>Fri, 10 Jun 2016 14:43:55 +0900</pubDate><guid>https://cychong47.github.io/post/2016/how-to-read-2/</guid><description>만독 책을 느리게(집중해서) 읽기 아이에게 책 읽어주기 부모가 읽어야 아이도 읽는다 1단계. 책 선정 초등학생이면 어휘가 풍부한 국내 소설 오래 살아남은 책. 고전 문학 2단계. 반복해서 읽기 3단계. 파생독서 하기 저자의 다른 책 저자가 참고한 책 비슷한 주제의 책 4단계. 챕터별 요약하기 5단계. 챕터별로 생각 적어보기 책을 읽으면 추가 자료와, 자신의 생각을 곁들여 정리 6단계. 장문 쓰기 다독 고정형/성장형 생각 특히 힘든 시기에 영향을 줌 갑자기 어려워지는 중학교 시절 두뇌도 근육과 같다.</description></item><item><title>(책) 어떻게 읽을 것인가</title><link>https://cychong47.github.io/post/2016/how-to-read/</link><pubDate>Fri, 10 Jun 2016 14:00:20 +0900</pubDate><guid>https://cychong47.github.io/post/2016/how-to-read/</guid><description>고정형 - 지능은 변하지 않는다
성장형 - 지능은 좋아질 수 있다
생각을 바꾼다는 것이 쉬운 일은 아니지만 인식의 변화가 주는 효과는 크다
중학교에서는 고정형 아이들의 성적이 급속히 떨어지고 지속적으로 하양곡선을 그림. 중학생이 되면 초등학교 과정과 질적으로 더 어려운 학과 공부에 직면하므로 실패와 좌절을 할 가능성이 더 많은데 고정형 학생들은 실패와 좌절에 더 큰 영향을 받기 때문
힘든 상황에서 더 큰 영향을 준다.
두뇌는 근육과 같이 운동을 통해 근육을 키우듯 두뇌 능력을 키울 수 있다.</description></item><item><title>fossilization</title><link>https://cychong47.github.io/post/2016/fossilization/</link><pubDate>Thu, 12 May 2016 03:41:20 +0900</pubDate><guid>https://cychong47.github.io/post/2016/fossilization/</guid><description>fossilize also -lise
(usually passive) if people, ideas, systems etc fossilize or are fossilized, they never change or develop, even when there are good reasons why they should change
Most couples, however fossilized their relationship, have some interests in common.
간혹 팟캐스트에 공룡에 대한 이야기가 나온다. 공룡에 대한 연구가 상대적으로 오래되지 않고, 현존하지 않은 생명체에 대한 거라 발굴된 화석에 의존해서 복원해야 해서 그 복원 결과가 시간에 따라 달라진다고 한다. 새로운 증거나 보다 논리적인 설명이 나오면 그걸로 기존의 가설의 결과가 달라진다고.</description></item><item><title>상식과 다른 결과를 보면</title><link>https://cychong47.github.io/post/2016/too-early-confident/</link><pubDate>Wed, 11 May 2016 10:01:53 +0900</pubDate><guid>https://cychong47.github.io/post/2016/too-early-confident/</guid><description>먼저 주변을 의심해 보자.
상식적인 혹은 알려진 것과 다른 결과가 나왔다면 내가 한 시험 방법을 다시 한번 의심해 보자. 제발</description></item><item><title>빨리 해봐야 소용없다</title><link>https://cychong47.github.io/post/2016/no-need-to-rush/</link><pubDate>Wed, 11 May 2016 09:59:23 +0900</pubDate><guid>https://cychong47.github.io/post/2016/no-need-to-rush/</guid><description>개발자의 품을 가벼이 여기는 조직에서 일 할때는 일정보다 일을 빨리하면 안된다. 기껏 한 일이 아무 소용없을 때가 많다.</description></item><item><title>Ghost 본문 다 보이기</title><link>https://cychong47.github.io/post/2016/display-post-by-default-ghost/</link><pubDate>Mon, 09 May 2016 15:23:57 +0900</pubDate><guid>https://cychong47.github.io/post/2016/display-post-by-default-ghost/</guid><description>theme을 수정해서 ghost blog 화면에서 글 본문이 다 나오도록 할 수 있다.
대신 theme마다 조금씩 적용 방법이 다른데 기본적으로 변경해야 할 내용은 동일
casper theme casper는 index.hbs 파일에서 loop.hbs라는 별도 파일을 통해 본문을 보이게 하고 있다.
index.hbs
21 {{! The main content area on the homepage }} 22 &amp;lt;main id=&amp;#34;content&amp;#34; class=&amp;#34;content&amp;#34; role=&amp;#34;main&amp;#34;&amp;gt; 23 24 {{! The tag below includes the post loop - partials/loop.hbs }} 25 {{&amp;gt; &amp;#34;loop&amp;#34;}} 26 27 &amp;lt;/main&amp;gt; 위 코드에서 가리키는 partials/loop.</description></item><item><title>Frag &amp; Reassembly Test</title><link>https://cychong47.github.io/post/2016/frag-reassembly-test/</link><pubDate>Sun, 01 May 2016 15:35:28 +0900</pubDate><guid>https://cychong47.github.io/post/2016/frag-reassembly-test/</guid><description>set environment export RTE_ARCH=x86_64 export RTE_SDK=/home/cychong/Work/dpdk-2.1.0 export RTE_TARGET=x86_64-native-linuxapp-gcc export RTE_OUTPUT=$RTE_SDK/$RTE_TARGET run sudo ./build/ip_reassembly -c 0x1 -n 4 -m 1000M --no-huge --no-pci --no-hpet -- --display_pps 1 --tx_pps 10</description></item><item><title>(책) 소프트 스킬</title><link>https://cychong47.github.io/post/2016/soft-skill/</link><pubDate>Tue, 19 Apr 2016 10:25:08 +0900</pubDate><guid>https://cychong47.github.io/post/2016/soft-skill/</guid><description>2 다른 이들과 달리 멋지게 시작하라
자신의 경력을 사업으로 봐야 한다. 자신의 정체성이나 경력은 조직에서 주어진 역할과 별개로 존재한다고 생각 팔수 있는 제품이나 서비스가 필요 그 가치가 정확히 뭔지, 그 가치가 다른 개발자가 제공하는 가치와 어떻게 다른지 설명할 수 있어야 한다 3 목표를 설정하고 미래에 대비하라
목표를 설정. 목표를 정확히 이해 명확한 목표가 없으면 아무리 열심히 살아도 의미가 없다. 목표 없이 인생을 낭비하지 말라 큰 목표를 정하고 밟아갈 작은 목표를 설정 큰 목표는 방향을 제시할 정도만 되도 된다.</description></item><item><title>DPDK IPv4 reassembly</title><link>https://cychong47.github.io/post/2016/dpdk-ipv4-reassembly/</link><pubDate>Thu, 24 Mar 2016 15:03:55 +0900</pubDate><guid>https://cychong47.github.io/post/2016/dpdk-ipv4-reassembly/</guid><description>rte_ipv4_frag_reassemble_packet()
ip_frag_find() 기존에 존재하는 flow면 해당 flow를 저장한 entry 정보를(ip_frag_pkt *pkg) 신규 flow인 경우 해당 신규 flow를 저장할 신규 혹은 재사용된 entry를 return함 추가할 수 있는 통계 신규 flow? 기존 flow에 정상 추가 기존 flow에 비정상 추가(기존 flow가 timeouted) 이도 저도 아닌 상황(할당 실패) LRU entry free tbl-&amp;gt;max_entries tbl-&amp;gt;use_entries return 기존 존재하는 flow, 신규 할당한 flow entry 혹은 NULL 만일 NULL을 return하면 현재 수신한 mbuf를 death row에 추가한다. 불쌍한&amp;hellip; ip_frag_lookup() if matched entry is exist return flow entry return &amp;amp;stale if time-outed entry is exist if new entry return NULL return free for new empty entry return &amp;amp;stale if time-outed entry is exist ip_frag_key_cmp() return 0 if key matched if ip_frag_lookup() returns NULL if stale entry is not NULL, remove it with ip_frag_tbl_del() and save to free for reuse even if free is not NULL, check if tbl-&amp;gt;use_entries does not exceed tbl-&amp;gt;max_entries.</description></item><item><title>(책) Becoming a better Programmer</title><link>https://cychong47.github.io/post/2016/becoming-a-better-programmer/</link><pubDate>Mon, 14 Mar 2016 14:50:15 +0900</pubDate><guid>https://cychong47.github.io/post/2016/becoming-a-better-programmer/</guid><description>코드에 신경쓰기 어떤 코드든 간에 수정한 후에는 이전 보다 나아져야 한다 기능이 추가된 것은 &amp;lsquo;나아진&amp;rsquo; 것이 아니다. 기능이 추가되고, 코드 수가 늘어나도 여전히 좋은 구조를 유지하는 것이 &amp;lsquo;나아진&amp;rsquo; 것이다. 정돈된 코드 유지하기 좋은 코드는 명백하며 일관성이 있다. 보기 좋은 코드는 의도를 드러낸다(예술) 코드를 읽을 사람은 지금 당장의 나 외에 몇 달 후의 나, 다른 동료 그리고 미래의 유지 보수 프로그래머다. 그들이 혼란을 덜 겪도록 코드를 작성해야 한다. 실은 다른 사람을 위해 코딩한다는 것을 인정해야 하고, 잊으면 안된다.</description></item><item><title>DPDK new mbuf 사용 주의사항</title><link>https://cychong47.github.io/post/2016/header-length-in-mbuf/</link><pubDate>Sun, 06 Mar 2016 08:22:24 +0900</pubDate><guid>https://cychong47.github.io/post/2016/header-length-in-mbuf/</guid><description>l2_len, l3_len, l4_len 등을 사용하는 라이브러리가 존재함
reassembly Tx checksum offload Reassembly rte_ipv6_frag_reassemble_packet(), rte_ipv4_frag_reassemble_packet() Incoming mbuf should have its l2_len and l3_len fields setup correctly.
L4 checksum HW offloading To use hardware L4 checksum offload, the user needs to
fill l2_len and l3_len in mbuf set the flags PKT_TX_TCP_CKSUM, PKT_TX_SCTP_CKSUM or PKT_TX_UDP_CKSUM set the flag PKT_TX_IPV4 or PKT_TX_IPV6 calculate the pseudo header checksum and set it in the L4 header (only for TCP or UDP).</description></item><item><title>KNI가 buffer를 free 하는 방법</title><link>https://cychong47.github.io/post/2016/how_kni_free_mbuf/</link><pubDate>Sun, 06 Mar 2016 08:17:58 +0900</pubDate><guid>https://cychong47.github.io/post/2016/how_kni_free_mbuf/</guid><description>DPDK to KNI RX KNI는 rx_q로부터 mbuf를 수신한 후 data_len 크기의 skb를 할당하여 데이터를 복사한 후 netif_rx를 호출한다. 그러므로 mbuf는 KNI kernel module까지만 사용되고, 커널 networking stack에서는 사용되지는 않는다.
kni_net.c의 kni_net_rx_normal() 함수가 DPDK application으로부터 mbuf를 받아 커널에 전달하는 함수인데 실제 함수는 batch processing을 위해 한번에 여러 개의 패킷을 rx_q로부터 읽어 처리하도록 구현되어 있다.
아래는 하나의 패킷에 대해 수행되는 코드를 간략화 한 것이다(예외 처리 부분도 제외)
num_rx = kni_fifo_get(kni-&amp;gt;rx_q, (void **)va, num_rx); kva = (void *)va[i] - kni-&amp;gt;mbuf_va + kni-&amp;gt;mbuf_kva; len = kva-&amp;gt;data_len; data_kva = kva-&amp;gt;buf_addr + kva-&amp;gt;data_off - kni-&amp;gt;mbuf_va + kni-&amp;gt;mbuf_kva; skb = dev_alloc_skb(len + 2); /* Align IP on 16B boundary */ skb_reserve(skb, 2); memcpy(skb_put(skb, len), data_kva, len); skb-&amp;gt;dev = dev; skb-&amp;gt;protocol = eth_type_trans(skb, dev); skb-&amp;gt;ip_summed = CHECKSUM_UNNECESSARY; /* Call netif interface */ netif_rx(skb); /* Update statistics */ kni-&amp;gt;stats.</description></item><item><title>(Scapy) Suppress Scapy warning message</title><link>https://cychong47.github.io/post/2016/scapy-suppress-scapy-warning-message/</link><pubDate>Thu, 03 Mar 2016 14:50:24 +0900</pubDate><guid>https://cychong47.github.io/post/2016/scapy-suppress-scapy-warning-message/</guid><description>Without Suppressing Scapy IPv6 warning cychong@ubuntu:~$ python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; from scapy.all import * WARNING: No route found for IPv6 destination :: (no default route?) &amp;gt;&amp;gt;&amp;gt; Suppress scapy IPv6 warning cychong@ubuntu:~$ python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; import logging &amp;gt;&amp;gt;&amp;gt; logging.</description></item><item><title>how to build IPsec packet with scapy</title><link>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</link><pubDate>Sun, 14 Feb 2016 14:59:42 +0900</pubDate><guid>https://cychong47.github.io/post/2016/how-to-use-snapy-for-ipsec/</guid><description>import modules $ python &amp;gt;&amp;gt;&amp;gt; from scapy.all import * &amp;gt;&amp;gt;&amp;gt; from scapy.layers.ipsec import * build plaintext packet &amp;gt;&amp;gt;&amp;gt; p = IP(src=&amp;#39;1.1.1.1&amp;#39;, dst=&amp;#39;2.2.2.2&amp;#39;) / TCP(sport=45012, dport=80) / Raw(&amp;#39;testdata&amp;#39;) &amp;gt;&amp;gt;&amp;gt; p = IP(str(p)) setup SA &amp;gt;&amp;gt;&amp;gt; sa = SecurityAssociation(ESP, spi=0xdeadbeef, crypt_algo=&amp;#39;AES-CBC&amp;#39;,crypt_key=&amp;#39;sixteenbytes key&amp;#39;) Encrypt w/o IV &amp;gt;&amp;gt;&amp;gt; e = sa.encrypt(p, 5) &amp;gt;&amp;gt;&amp;gt; e &amp;lt;IP version=4L ihl=5L tos=0x0 len=76 id=1 flags= frag=0L ttl=64 proto=esp chksum=0x747a src=1.1.1.1 dst=2.2.2.2 |&amp;lt;ESP spi=0xdeadbeef seq=5 data=&amp;#39;uD\x7fdj19\xe7\xc4\xff8\x10\xcdQ\xf0\xa6\x1e!\x84\xc3&amp;gt;!\x18\xa6\xf6\xb8\x93\xc6it\x9a\xfc\x1c\xee\xe5C\xcd\xf0\x7fD\xca\x8d\xadKh\xa8\xe5x&amp;#39; |&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; e.show() ###[ IP ]### version = 4L ihl = 5L tos = 0x0 len = 76 id = 1 flags = frag = 0L ttl = 64 proto = esp chksum = 0x747a src = 1.</description></item><item><title>fragment missing test with scapy</title><link>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</link><pubDate>Sun, 14 Feb 2016 13:57:41 +0900</pubDate><guid>https://cychong47.github.io/post/2016/fragment-missing-test-with-scapy/</guid><description>다음과 같이 scapy를 이용해서 fragment를 쉽게 만들 수 있다.
from scapy.all import * dip=&amp;#34;10.0.0.1&amp;#34; payload=&amp;#34; &amp;#34;*1000 packet=IP(dst=dip)/UDP(dport=0x1234)/payload frag_list=fragment(packet,fragsize=500) counter=1 for fragment in frag_list: print &amp;#34;Packet no%d&amp;#34; %counter print fragment.show() counter+=1 send(fragment) frag_list에서 counter 변수를 확인해서 전송하지 않으면 간단하게 fragment가 수신되지 않은 경우에 시험할 수 있음.
필요하면 frag_list의 순서를 뒤집는 것도 가능하고, 각 fragment의 offset값을 조정하거나 패킷 크기를 변경하면 다른 비정상 경우도 쉽게 시험할 수 있다.
scapy interactive tutorial</description></item><item><title>Vagrant</title><link>https://cychong47.github.io/post/2016/vagrant/</link><pubDate>Sun, 14 Feb 2016 07:52:01 +0900</pubDate><guid>https://cychong47.github.io/post/2016/vagrant/</guid><description>Vagrant
fd.io의 개발 환경 구성하는 문서를 보니 vagrant를 사용한다. 그런데 또 virtualbox니 vmware 이야기를 한다. 이전에도 vagrant라는 단어를 들어본적이 있었는데 이번 기회에 좀 알아보기로
Why Vagrant를 보면 다음과 같이 설명하고 있다.
Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team.
To achieve its magic, Vagrant stands on the shoulders of giants.</description></item><item><title>fd.io</title><link>https://cychong47.github.io/post/2016/fd-io-tree/</link><pubDate>Sat, 13 Feb 2016 05:51:52 +0900</pubDate><guid>https://cychong47.github.io/post/2016/fd-io-tree/</guid><description>├── build-data │ ├── packages │ └── platforms ├── build-root │ ├── deb │ │ └── debian │ │ └── source │ ├── emacs-lisp │ ├── packages │ ├── rpm │ ├── scripts │ └── vagrant ├── dpdk │ ├── dkms │ ├── dpdk-2.1.0_patches │ └── dpdk-2.2.0_patches ├── g2 ├── gmod │ └── gmod ├── perftool ├── sample-plugin │ └── sample ├── svm ├── test │ ├── resources │ │ ├── libraries │ │ │ ├── bash │ │ │ ├── python │ │ │ └── robot │ │ │ └── vat │ │ └── templates │ │ └── vat │ └── tests │ └── suites │ ├── bridge_domain │ └── vhost_user_dummy ├── vlib │ ├── example │ └── vlib │ └── unix ├── vlib-api │ ├── vlibapi │ ├── vlibmemory │ └── vlibsocket ├── vnet │ ├── etc │ │ └── scripts │ │ ├── dhcp │ │ ├── ludd-cluster-1 │ │ ├── ludd-cluster-3 │ │ ├── mpls-o-ethernet │ │ ├── mpls-o-gre │ │ ├── sr │ │ └── virl │ └── vnet │ ├── cdp │ ├── classify │ ├── devices │ │ ├── dpdk │ │ ├── ssvm │ │ └── virtio │ ├── dhcp │ ├── dhcpv6 │ ├── ethernet │ ├── flow │ ├── gre │ ├── hdlc │ ├── ip │ ├── ipsec │ ├── l2 │ ├── l2tp │ ├── lawful-intercept │ ├── lisp-gpe │ ├── llc │ ├── map │ │ └── examples │ ├── mcast │ ├── mpls-gre │ ├── nsh-gre │ ├── nsh-vxlan-gpe │ ├── osi │ ├── pg │ ├── plugin │ ├── policer │ ├── ppp │ ├── snap │ ├── sr │ ├── srp │ ├── unix │ ├── vcgn │ └── vxlan ├── vpp │ ├── api │ ├── app │ ├── conf │ ├── oam │ ├── stats │ └── vnet ├── vpp-api-test │ ├── scripts │ └── vat ├── vpp-japi │ ├── japi │ │ ├── org │ │ │ └── openvpp │ │ │ └── vppjapi │ │ └── test │ └── m4 ├── vppapigen └── vppinfra ├── config ├── tools └── vppinfra</description></item><item><title>fd.io</title><link>https://cychong47.github.io/post/2016/fd-io/</link><pubDate>Sat, 13 Feb 2016 01:29:43 +0900</pubDate><guid>https://cychong47.github.io/post/2016/fd-io/</guid><description>2016년 2월 11일 공개된 CISCO 주도의 프로젝트. 무려 2002년부터 개발한 것으로 현재 버전은 3번째 revision이라고 한다.
간만에 dpdk.org mailing list에 들어갔다 가장 최근에 올라온 글 제목이 눈에 띄었다.
[dpdk-dev] [dpdk-announce] new project using DPDK - FD.io Vincent JARDIN
&amp;ldquo;new project&amp;rdquo;?
그래서 내용을 봤더니 이게 다 였다는
A new project using DPDK is available, http://FD.io said FiDo You can clone it from: http://gerrit.fd.io/ Best regards, Vincent 그래도 첫 번째 링크를 따라가 보니 화려하다.</description></item><item><title>왜 공부해야 하는가에 대한 간단하지만 명확한 답</title><link>https://cychong47.github.io/post/2016/why_have_to_keep_studying/</link><pubDate>Wed, 10 Feb 2016 04:23:12 +0900</pubDate><guid>https://cychong47.github.io/post/2016/why_have_to_keep_studying/</guid><description>왜 공부해야 하는가
사회의 변화속도는 우리의 변화속도를 압도하기 때문입니다.
&amp;lt;누가 내 치즈를 옮겼을까&amp;gt;에 잘 묘사되어 있지요.
따라잡지 않으면 뒤쳐지기 때문에 우리는 늘 공부해야 합니다.
https://brunch.co.kr/@choihs0228/4</description></item><item><title>DPDK NIC 초기화</title><link>https://cychong47.github.io/post/2016/dpdk_nic_init/</link><pubDate>Tue, 09 Feb 2016 14:54:21 +0900</pubDate><guid>https://cychong47.github.io/post/2016/dpdk_nic_init/</guid><description>constructor attribute http://phoxis.org/2011/04/27/c-language-constructors-and-destructors-with-gcc/
constructor attribute을 가진 함수는 main 함수를 실행하기 전에 호출한다.
예제 (출처)
#include &amp;lt;stdio.h&amp;gt; void begin (void) __attribute__((constructor)); void end (void) __attribute__((destructor)); int main (void) { printf (&amp;#34;\nInside main ()&amp;#34;); } void begin (void) { printf (&amp;#34;\nIn begin ()&amp;#34;); } void end (void) { printf (&amp;#34;\nIn end ()\n&amp;#34;); } 실행하면
In begin () Inside main () In end () DPDK DPDK의 경우 device driver들을 모두 constructor attirbute을 사용해서 main 함수 전에 호출되록 한다.</description></item><item><title>Introducing Python</title><link>https://cychong47.github.io/post/2016/introducing-python/</link><pubDate>Mon, 08 Feb 2016 13:25:34 +0900</pubDate><guid>https://cychong47.github.io/post/2016/introducing-python/</guid><description>Introducing Python 을 판교어린이도서관에서 짧게 보고 적은 아이템들
python3 based
Decorator는 공부가 필요한 내용
sys.path : module 검색 경로 __init__.py 파일이 있으면 그 디렉토리를 PKG로 간주함
defaultdic()
Counters()
dicionary는 key의 순서를 보장하지 않음. OrderedDict()로 사전을 정의하면 가능 deque = stack + queue pprint()는 print보다 깔끔하게 출력한다고.
'\uXXX' 유니코드
%10.4s : 10칸의 공간. 문자열 중 4개만 출력
struct '&amp;gt;LL' : '&amp;gt;' Big endian, L : uint32_t
list comprehension : for loop보다 빠름.</description></item><item><title>SR-IOV and DPDK</title><link>https://cychong47.github.io/post/2016/sriov-and-dpdk/</link><pubDate>Sun, 07 Feb 2016 23:40:26 +0900</pubDate><guid>https://cychong47.github.io/post/2016/sriov-and-dpdk/</guid><description>SR-IOV and DPDK
Accelerating the NFV Data Plane : SR-IOV and DPDK… in my own words 를 읽고 요약
Before HW assisted Virtualisation SR-IOV 전까지는 VMM이 패킷 송수신에 매번 개입해야 했음.
1st interrupt from NIC to VMM 2nd interrupt from VMM to VM Intel VMDq Only one interrupt from NIC to VM as each VM has its own Rx queue.
SR-IOV SR-IOV : Standard IO memory Memory Management Unit from Intel(VT-d) and AMD(IOV) Virtual Function - Limited, lightweight, PCIe resource and a dedicated Tx/Rx packet queue Interrupt 부담이 없다고 하는데 왜?</description></item><item><title>DPDK 2.2 crypto dev API</title><link>https://cychong47.github.io/post/2016/dpdk-2-2-crypto-dev-api/</link><pubDate>Sun, 24 Jan 2016 15:08:11 +0900</pubDate><guid>https://cychong47.github.io/post/2016/dpdk-2-2-crypto-dev-api/</guid><description>pktmbuf_offload pool은 rte_pktmbuf_offload_pool_create()를 사용하여 생성 l2fwd_mbuf_ol_pool = rte_pktmbuf_offload_pool_create( &amp;#34;mbuf_offload_pool&amp;#34;, NB_MBUF, 128, 0, rte_socket_id()); 할당은 rte_pktmbuf_offload_alloc()를 이용. rte_pktmbuf_offload_alloc(l2fwd_mbuf_ol_pool, RTE_PKTMBUF_OL_CRYPTO); mbuf 마다 하나씩 할당해서 crypto 연산에 사용 crypto 연산에 필요한 추가 옵션 등을 설정함. /* Append space for digest to end of packet */ ol-&amp;gt;op.crypto.digest.data = (uint8_t *)rte_pktmbuf_append(m, cparams-&amp;gt;digest_length); ol-&amp;gt;op.crypto.digest.phys_addr = rte_pktmbuf_mtophys_offset(m, rte_pktmbuf_pkt_len(m) - cparams-&amp;gt;digest_length); ol-&amp;gt;op.crypto.digest.length = cparams-&amp;gt;digest_length; ol-&amp;gt;op.crypto.iv.data = cparams-&amp;gt;iv_key.data; ol-&amp;gt;op.crypto.iv.phys_addr = cparams-&amp;gt;iv_key.phys_addr; ol-&amp;gt;op.crypto.iv.length = cparams-&amp;gt;iv_key.length; ol-&amp;gt;op.crypto.data.to_cipher.offset = ipdata_offset; ol-&amp;gt;op.crypto.data.to_cipher.length = data_len; ol-&amp;gt;op.</description></item><item><title>DPDK based applications</title><link>https://cychong47.github.io/post/2016/dpdk_based_apps/</link><pubDate>Sun, 24 Jan 2016 14:59:18 +0900</pubDate><guid>https://cychong47.github.io/post/2016/dpdk_based_apps/</guid><description>2016.02.10 기준
DPDK-dump TRex - Realistic traffic generator
git-hub - trex-core, trex-doc, trex-profiles, trex-qt-gui Packet-journey git-hub FD.io Fast Data Path DPDK-nginx DPDK-pktgen DPDK-ODP TCP/IP stack for DPDK</description></item><item><title>2년전에 느꼈던 답답함이 여전하네</title><link>https://cychong47.github.io/post/2016/two-years-back/</link><pubDate>Mon, 04 Jan 2016 15:19:11 +0900</pubDate><guid>https://cychong47.github.io/post/2016/two-years-back/</guid><description>우연히 tumblr를 보니 2013년에 적었던 답답한 현실이 지금도 똑같다는 사실에 놀랐다. 들으려고 하는 사람은 없고, 쓸데없는 일에 시간을 보내는 건 지금도 전혀 바뀐게 없어 보인다.
여전히 사용하라는 툴에서 제공하는 정보와 취합해 달라고 하는 정보가 다르다. 그럼 어떻게 하라는 건지? 툴을 고치던가, 툴의 정보를 원하는 정보로 바꾸는 기준을 제시해줘야 하는 거 아닌가? 내용은 관심없고, 그냥 결과만 달라고 하는. 자기가 그런 변환 작업을 한 적이 없으니 얼마나 귀찮은지 모르는 거다. 그리고 사람마다 다른 기준으로 정보를 취합해도 별 문제가 없다는 건 결국 별로 중요하지 않는 내용이라는 거다.</description></item><item><title>(책) 구글의 아침은 자유가 시작된다.</title><link>https://cychong47.github.io/post/2016/google-work-rules/</link><pubDate>Mon, 04 Jan 2016 14:03:21 +0900</pubDate><guid>https://cychong47.github.io/post/2016/google-work-rules/</guid><description>일단 읽다가 중단. 다른 걸 먼저 봐야 할 것 같다. 공감하는 내용이 많지만 이 책을 본다고 내가 어쩔 수 있는 내용이 별로 없어서&amp;hellip;.
p78
이렇게 투명하게 공개함으로써 얻을 수 있는 이득은 회사의 모든 직원이 현재 무슨 일이 어떻게 진행되고 있는 지 알게 된다는 것이다. 어쩌면 별것 아닌 것처럼 들릴 수도 있지만 전혀 그렇지 않다. 덩치가 큰 조직에서는 흔히 여러 하부 조직들이 쓸데없는 일을 하면서 자원을 낭비한다. 그러나 정보가 공유될 때 전 직원은 다른 부서나 팀의 목표가 제각기 다르다는 사실을 충분히 이해하고 내부의 소모적인 경쟁을 피한다.</description></item><item><title>Googlegeist vs. SCI</title><link>https://cychong47.github.io/post/2016/googlegeist_vs_sci/</link><pubDate>Sat, 02 Jan 2016 02:44:51 +0900</pubDate><guid>https://cychong47.github.io/post/2016/googlegeist_vs_sci/</guid><description>SCI 결과를 개선하기 위해 실질적으로 이뤄지는 노력이 안 보인다는 것. 노력한다해도 그건 관리자와 비관리자가 함께 노력해야 하는 일일텐데(관리자나 회사에 대한 불만이므로 그 불만 개선이 노력이 맞는 방향인지는 당연히 비관리지에게도 한께 논의되어야 한다) 그런 건 보기 어렵다.
문제 제기는 니들이 하지만 문제 해결은 나만 할 수 있다고 착각은 버려야 한다. 직원들이 불만에 대해 공감도 못하는데 어떻게 그 불만을 해결하기 위해 노력할 수 있겠나. 아니 공감을 하지 못하면 이해하기 위해 혹은 설득하기 위해 함께 이야기해야 하는데 그런 노력은 대부분 알아서 하란다.</description></item><item><title>(글) 왜 “애자일”, 특히 스크럼이 끔찍한가.</title><link>https://cychong47.github.io/post/2016/anti-agile/</link><pubDate>Fri, 01 Jan 2016 15:25:13 +0900</pubDate><guid>https://cychong47.github.io/post/2016/anti-agile/</guid><description>출처 : 왜 “애자일”, 특히 스크럼이 끔찍한가
스크럼 팀에 실제 시니어 엔지니어의 역할은 없는데, 문제는 스크럼을 도입한 많은 회사에서 보통 전사적으로 시행한다는 것이다. 관리직으로 넘어가는 것 말고는, “스크럼 마스터”가 되어 이것을 말단에 도입하는 책임을 지는 선택지가 있다. 권한이 없는, 헛소리에 불과한 가짜 관리직 말이다. 스크럼 팀을 떠나서 해로운 마이크로매니지먼트를 받으면서 살지 않으려면 괴물 안으로 깊숙히 파고들어서 다른 사람에게 유해한 마이크로매니지먼트를 강요하는 수 밖에 없다. “애자일”과 스크럼이 나에게 말하는 것은 시니어 프로그래머는 반드시 필요하지 않다고 여겨지므로, 무시해도 좋으며, 마치 프로그래밍이란 35세 이전에 접어야 하는 유치한 것이라고 하는 것 같았다</description></item><item><title>click - python option 처리 모듈</title><link>https://cychong47.github.io/post/2016/click-python-module/</link><pubDate>Fri, 01 Jan 2016 13:45:58 +0900</pubDate><guid>https://cychong47.github.io/post/2016/click-python-module/</guid><description>http://click.pocoo.org/5/
C로 프로그램을 짤 때 사용할 표준 포맷도 이렇게 해야겠다.
$ python hello.py --help Usage: hello.py [OPTIONS] Simple program that greets NAME for a total of COUNT times. Options: --count INTEGER Number of greetings. --name TEXT The person to greet. --help Show this message and exit.</description></item><item><title>DPDK QAT example 빌드하기</title><link>https://cychong47.github.io/post/2016/build_dpdk_qat/</link><pubDate>Fri, 01 Jan 2016 10:57:39 +0900</pubDate><guid>https://cychong47.github.io/post/2016/build_dpdk_qat/</guid><description>Download dpdk-2.2.0.tar.gz Refer http://dpdk.org/download
wget http://dpdk.org/browse/dpdk/snapshot/dpdk-2.2.0.tar.gz Download qat_mux Refer https://01.org/packet-processing/intel®-quickassist-technology-drivers-and-patches
wget https://01.org/sites/default/files/page/qatmux.l.2.5.0-80.tgz Getting Started Guide 문서도 받아 둔다.
wget https://01.org/sites/default/files/page/330750-004_qat_gsg.pdf Configure DPDK export RTE_SDK=/home/cychong/work/dpdk-2.2.0 export RTE_TARGET=x86_64-native-linuxapp-gcc make config T=$RTE_TARGET O=$RTE_TARGET make Configure QAT Ubuntu (14.04) 기준으로 몇 개 패키지를 설치해야 QAT를 빌드할 수 있는데 나름 기본적인 패키지들이라 그냥 설치해 놓으면 좋을 듯.
sudo apt-get install zlib1g-dev sudo apt-get install libssl-dev 적당한 위치에 풀면 되는데 ~/work/qat에 압축을 푼 경우를 기준으로 정리</description></item><item><title>Designing a RESTful API with Python and Flask</title><link>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</link><pubDate>Thu, 24 Dec 2015 14:11:59 +0900</pubDate><guid>https://cychong47.github.io/post/2015/designing-a-restful-api-with-python-and-flask/</guid><description>Designing a RESTful API with Python and Flask
RESTful API는 URI에 필요한 인자를 다 넘기는 형태라 사용자가 직접 주소를 입력하는 것이 아니라 다른 SW에서 해당 URI를 입력하는 형태로 사용하는 게 자연스러운 거네.</description></item><item><title>virtualenv 사용</title><link>https://cychong47.github.io/post/2015/virtualenv/</link><pubDate>Mon, 21 Dec 2015 14:59:29 +0900</pubDate><guid>https://cychong47.github.io/post/2015/virtualenv/</guid><description>virtualenv 설치
mini-2:~ cychong$ sudo easy_install pip mini-2:~ cychong$ sudo pip install virtualenv virtualenv로 project directory 생성
mini-2:work cychong$ mkdir click mini-2:work cychong$ cd click/ mini-2:click cychong$ ls mini-2:click cychong$ virtualenv venv New python executable in venv/bin/python Installing setuptools, pip, wheel...done. mini-2:click cychong$ ls venv virtualenv 환경으로 들어가기
mini-2:click cychong$ . venv/bin/activate 원하는 패키지 설치
(venv)mini-2:click cychong$ pip install Click Collecting Click Downloading click-6.2-py2.py3-none-any.whl (70kB) 100% |████████████████████████████████| 73kB 270kB/s Installing collected packages: Click Successfully installed Click-6.</description></item><item><title>Culture should be setup first</title><link>https://cychong47.github.io/post/2015/culture/</link><pubDate>Sun, 13 Dec 2015 13:44:24 +0900</pubDate><guid>https://cychong47.github.io/post/2015/culture/</guid><description>from Google Work Rules
2006년에 구글에 입사. 72년 생
구글 임직원 나이 평균에 비하면 많지만, 그래도 비슷한 덩치의 국내 기업의 인사 담당자와 비교하면. 하긴 구글을 국내 (대)기업과 비교하는 것 자체가 의미없는 일이지만
과연 현실은 그렇다해도 저런 생각을 가진 사람을 주변에서 볼 수 있을까?
그러기에 현실은 너무 지난하다.</description></item><item><title>OpenFastPath</title><link>https://cychong47.github.io/post/2015/openfastpath/</link><pubDate>Fri, 11 Dec 2015 14:40:23 +0900</pubDate><guid>https://cychong47.github.io/post/2015/openfastpath/</guid><description>Another Open source project.
User-land protocol stack. Incorporate with ODP
To use with DPDK, ODP and ODP-DPDK should be used.
From the FAQ
Q: Does the OFP IP stack mimic Linux stack config inside the fastpath, meaning does it intercept Linux ipconfig/ip commands and automatically create similar entities inside the fastpath stack? A: Yes. Uses Netlink to sync with ifconfig commands and also with routes. Q: Does the OFP IP stack have full IPv4/IPv6 fragmentation/re-assembly support?</description></item><item><title>Hugepage</title><link>https://cychong47.github.io/post/2015/hugepage/</link><pubDate>Fri, 11 Dec 2015 14:30:56 +0900</pubDate><guid>https://cychong47.github.io/post/2015/hugepage/</guid><description>Linux에서 사용하는 기본 page size는 4KB. 이 대신 2MB 혹은 1GB의 큰 크기를 hugepage라고 한다. Hugepage는 연속된 physical memory에 할당되어야 한다는 제약 조건이 있지만, 대신 swap out되지 않아 성능 개선 효과가 있다.
아래 링크에서는 Oracle DB를 사용하는데 page swapping때문에 CPU 부하가 간헐적으로 크게 증가하는 현상을 hugepage를 사용해서 해결한 경우.
Performance tuning : hugepages in Linux Enabling huge pages for shared memory 기왕 hugepage를 사용한다면 shared memory도 hugepage에 할당하는 것이 유리할 듯.</description></item><item><title>Single tasking</title><link>https://cychong47.github.io/post/2015/single-tasking/</link><pubDate>Fri, 11 Dec 2015 14:08:11 +0900</pubDate><guid>https://cychong47.github.io/post/2015/single-tasking/</guid><description>난 특히 멀티태스킹이 안된다.
하나에도 제대로 집중하기 힘들다. 11월은 아무 쓸데없는 TF 2개에 참여하느라 제대로 일을 못했다. 정말&amp;hellip;</description></item><item><title>19 hard things you need to do to be successful</title><link>https://cychong47.github.io/post/2015/19-hard-things-you-need-to-do-to-be-successful/</link><pubDate>Thu, 10 Dec 2015 14:58:06 +0900</pubDate><guid>https://cychong47.github.io/post/2015/19-hard-things-you-need-to-do-to-be-successful/</guid><description>Last login: Thu Dec 10 00:38:48 on ttys000 Chae-yongs-MacBook-Pro:~ cychong$ Chae-yongs-MacBook-Pro:~ cychong$ vi hard.txt Chae-yongs-MacBook-Pro:~ cychong$ ack &amp;ldquo;You have to&amp;rdquo; hard.txt | sort | uniq &amp;gt; a Chae-yongs-MacBook-Pro:~ cychong$ vi a Chae-yongs-MacBook-Pro:~ cychong$ ack &amp;ldquo;You have to&amp;rdquo; hard.txt | uniq &amp;gt; a Chae-yongs-MacBook-Pro:~ cychong$ vi a
You have to do the hard things. You have to make the call you’re afraid to make. You have to get up earlier than you want to get up.</description></item><item><title>Code 량이 늘면 버그도 함께 들어나기 마련</title><link>https://cychong47.github.io/post/2015/errors_from_more_code/</link><pubDate>Mon, 07 Dec 2015 14:00:58 +0900</pubDate><guid>https://cychong47.github.io/post/2015/errors_from_more_code/</guid><description>부정하기 어렵다. 하지만 코드가 늘어나는 것은 피할 수 없으니 불필요한 기능/코드는 삭제하는 노력을 끊임없이 해야 한다. 그렇지 않으면 technical debt만 늘어날 뿐이다. 개발할 때는 제대로 이해하고 만들어서 technical debt가 아니었더라도 시간이 지나 동작하지 않는 코드가 되면 불필요한 짐만 된다.</description></item><item><title>(책) NHN은 이렇게 한다. 소프트웨어 품질 관리</title><link>https://cychong47.github.io/post/2015/nhn_sw_quality_control/</link><pubDate>Mon, 07 Dec 2015 13:40:56 +0900</pubDate><guid>https://cychong47.github.io/post/2015/nhn_sw_quality_control/</guid><description>누군가의 말을 빌리자면 품질 관리의 바이블(?)이라고 하는.
내용면에서는 특별한 건 없지만, 그래도 국내에서는 SW를 잘한다고 하는 사람들이 많이 가는 회사이고, 누구못지 않게 SW 문화가 좋을 거라고 생각하는 회사라 어떤 고민을 하고 어떻게 SW 품질을 위해 노력하는 지 알 수 있게 해주는 유일한 책이다.
외국의 많은 회사처럼 사내에 노하우 등을 많이 공유하는 좋은 모습을 보이고 있고, 실제 제공되는 서비스의 독점성이나 중립적이지 못한 언론 관련 내용은 맘에 들지 않지만 그래도 개발자 입장에서는 이렇게 현실적인 내용을 공유해주는게 감사할 따름</description></item><item><title>역량 평가를 없앤 회사에서 일어난 일</title><link>https://cychong47.github.io/post/2015/what_happens_if_performance_rating_is_omitted/</link><pubDate>Sat, 05 Dec 2015 13:14:53 +0900</pubDate><guid>https://cychong47.github.io/post/2015/what_happens_if_performance_rating_is_omitted/</guid><description>출처 : Harvard Businee Review
최소 52개 대형 회사가 기존 년 단위의 고과 평과 제도를 없앰. 이 중 33개 업체를 집중 분석하여 해당 업체에서 일어난 변화를 정리
manager-employee간 대화가 극적으로 증가. 33개 미국 기반의 업체 중 76%는 기존에 1년 단위의 역량 대화를 나눴으나, 이젠 68%가 최소 분기별 대화를 권장하고 있다고 함.
관리 부담이 크게 줄어듬 33개 업체의 2/3에서 역량 평가를 위한 관리자의 문서 작성 요구가 공식적으로 줄어듬. 다른 30% 업체는 문서 작성을 아예 없앰.</description></item><item><title>OpenStack이 Python으로 만들어졌다니</title><link>https://cychong47.github.io/post/2015/openstacki-pythoneuro-mandeuleojyeossdani/</link><pubDate>Wed, 25 Nov 2015 11:36:43 +0900</pubDate><guid>https://cychong47.github.io/post/2015/openstacki-pythoneuro-mandeuleojyeossdani/</guid><description>Neuron
Python project 체계를 잡는데 도움이 될 듯 하다. 아래는 pylink를 이용해서 syntax 검사하는 script
https://github.com/openstack/neutron/blob/master/tools/coding-checks.sh</description></item><item><title>Cisco Cloud Services Router 1000V</title><link>https://cychong47.github.io/post/2015/cisco-cloud-services-router-1000v/</link><pubDate>Mon, 23 Nov 2015 14:50:31 +0900</pubDate><guid>https://cychong47.github.io/post/2015/cisco-cloud-services-router-1000v/</guid><description>http://www.cisco.com/c/en/us/products/collateral/routers/cloud-services-router-1000v-series/datasheet-c78-733443.html
How many vCPUs are required for processing.</description></item><item><title>CISCO Cloud Service Platform 2100</title><link>https://cychong47.github.io/post/2015/cisco-cloud-service-platform-2100/</link><pubDate>Mon, 23 Nov 2015 14:24:35 +0900</pubDate><guid>https://cychong47.github.io/post/2015/cisco-cloud-service-platform-2100/</guid><description>Data sheet (PDF)
Some Cisco virtual network services that use the DPDK include Cisco Cloud Services Router (CSR) 1000V, Cisco Virtual Mobile Packet Core software, and Cisco IOS® XR 9000v virtual router. Supporte CISCO appliances Cisco Cloud Services Router (CSR) 1000V virtual router Cisco Virtual Adaptive Security Appliance (ASAv) Cisco Prime™ Data Center Network Manager (DCNM) Cisco Virtual Network Analysis Module (vNAM) Cisco Virtual Security Gateway (VSG) for Cisco Nexus® 1000V Switch deployments Cisco Virtual Supervisor Module (VSM) for Cisco Nexus 1000V Switch deployments 1U 2 CPU, each has 8 core Ivy Bridge(E5-2630 v3) REST API It uses REST API and NETCONF protocol for north-bound management and orchestration (MANO) tools.</description></item><item><title>제대로 만들려면 제품의 성격부터 정의해야</title><link>https://cychong47.github.io/post/2015/what_is_the_target_product/</link><pubDate>Sun, 22 Nov 2015 14:35:23 +0900</pubDate><guid>https://cychong47.github.io/post/2015/what_is_the_target_product/</guid><description>철학의 부재. 중심의 부재. 대화의 부재
제품을 만드는데 철학이 없다는 건 정말 큰 문제다. 누군가 대충 스케치만 그린 그림을 가지고 차를 만든다고 생각하면 끔찍하다. 각 부분 부분별로 , 기능 별로 어떻게 만들 것인지 고민없이 그냥 각 부서별로 자기가 맡은 걸 만든다면 그 차가 굴러가기만 해도 기적이지만, 제대로 굴러가는 커녕 일정 내 만들어질 리가 없다.
처음부터 끝까지 혹은 적어도 그걸 만드는 사람들이 충분히 제품의 철학(성격 등)을 공감할 때까지 끊임없이 대화해서 그나마 비슷한 생각을 가진 후에야 각 기능별 부분별 설계가 이뤄져야 한다.</description></item><item><title>개인의 잘못으로만 돌리는 이유</title><link>https://cychong47.github.io/post/2015/why_blame_personals/</link><pubDate>Thu, 19 Nov 2015 22:22:07 +0900</pubDate><guid>https://cychong47.github.io/post/2015/why_blame_personals/</guid><description>잘못된(?) 진단은 잘못된 처방을 낳는다.
모든 걸 개인의 잘못으로 돌리려는 의도는 의외로 단순. 잘못을 저지른 개인은 개선시키면 된다는 단순한 해법을 제시할 수 있으므로. 개인을 구박하거나 심지어는 그 조직에서 제외시키면 문제가 해결(?)되는 것처럼 보이니까.
하지만 그 뒤에 숨어있는 실은 개인의 잘못으로 돌려진 관리의 문제, 시스템의 문제는 아무도 건드리지 않는다. 문제의 원인이 너무 커서, 문제의 원인이 너무 근본적이라, 문제의 원인이 권력자에게 있는 터라. 그렇게 문제는 반복된다. 비난의 대상이 되는 &amp;lsquo;개인&amp;rsquo;만 바뀔 뿐. 병든 조직은 서서히 그렇게 스러진다&amp;hellip;</description></item><item><title>개발자를 위해 한 일이 뭐가 있지?</title><link>https://cychong47.github.io/post/2015/what_for_the_developer/</link><pubDate>Wed, 18 Nov 2015 14:43:51 +0900</pubDate><guid>https://cychong47.github.io/post/2015/what_for_the_developer/</guid><description>관리자들이 개발자들을 위해 한 일이 뭐가 있나?
아무리 생각해도 잘 모르겠다.
그럼 개발자를 위한 사람이나 제도는 없다는 건데
그러면서 개발자가 잘 하기 기대하는 건 도둑놈 심보가 아닌가?
자꾸만 벗어나길 원하는 &amp;lsquo;개발&amp;rsquo;업무를 만든 게 누구인지? 왜 그렇게 된 건지?
이런 근본적인 질문에 대한 고민과 해결 없이 SW품질을 논한다는 건 어불성설이다.</description></item><item><title>규제를 풀기 어려운 이유는</title><link>https://cychong47.github.io/post/2015/gyujereul-pulgi-eoryeoun-iyuneun/</link><pubDate>Wed, 18 Nov 2015 14:41:55 +0900</pubDate><guid>https://cychong47.github.io/post/2015/gyujereul-pulgi-eoryeoun-iyuneun/</guid><description>규제를 풀기 어려운 이유는 그 규제를 풀어도 문제가 없는 지 자신이 없기 때문이다. 증명하기 어려운 경우가 대부분. 하지만 머리를 맞대고 함께 이야기해봐야 한다. 정말 필요한 절차인지 고민해야 한다. 가능하면 절차는 줄이고 또 줄여야 한다고 생각.
이런 고민조차 어려운 이유는 대부분 한 쪽이 들으려 하지 않기 때문. 기존에 하던 (불필요해보이는) 절차를 없애는 경우 발생할 수 있는 위험요소를 감수할 의지가 없으므로. 혹시 이렇게 생각하고 있는 건 아닌지
그런 번거로운 절차는 내가 하는 게 아니라 니들이 하는 거니까</description></item><item><title>DPDK IP reassembly example</title><link>https://cychong47.github.io/post/2015/dpdk-ip-reassembly-example/</link><pubDate>Tue, 17 Nov 2015 13:49:57 +0900</pubDate><guid>https://cychong47.github.io/post/2015/dpdk-ip-reassembly-example/</guid><description>TAILQ_HEAD(ip_pkt_list, ip_frag_pkt); /**&amp;lt; @internal fragments tailq */ 자료 구조체 Fragment 관리용 table struct rte_ip_frag_tbl *frag_tbl; locking 없이 IP reassembly를 수행할 단위(통상 core)로 한 개씩 만든다. 즉 하나의 core가 여러 rx queue를 처리하더라도 하나의 frag_tbl만 가지면 된다.
아래 rte_ip_frag_table_create()함수를 이용해서 생성한다.
struct rte_ip_frag_death_row death_row core별로 갖는 death_row. IP reassembly를 호출한 후 해당 함수내에서 free할 mbuf를 이 리스트에 담아줌.
main loop에서 reassembly작업 후 rte_ip_frag_free_death_row()함수를 호출해 reassembly에 실패한 mbuf를 free함
IP_MAX_FRAG_NUM defines the maximum fragments of one reassembly.</description></item><item><title>또 하나의 코미디</title><link>https://cychong47.github.io/post/2015/do_you_know_agile/</link><pubDate>Fri, 06 Nov 2015 16:47:18 +0900</pubDate><guid>https://cychong47.github.io/post/2015/do_you_know_agile/</guid><description>자네는 Agile이 뭔지, Scrum Master가 어떤 일을 해야 하는 지 모르겠지만, 앞으로 자네를 &amp;lsquo;Scrum Master&amp;rsquo;라고 부르겠네.
이제 우리는 Scrum Master를 가졌으니, Agile을 하는 걸쎄
글쎄요&amp;hellip;
저도 Agile을 잘 모르지만, 동의할 수가 없네요.
국정교과서의 필요성에 대해 이야기하는 이상한 나라의 사람들 만큼이나 이해하기 어렵네요.</description></item><item><title>Software developer의 생산성을 측정할 수 있을까?</title><link>https://cychong47.github.io/post/2015/software-developeryi-saengsanseongeul-ceugjeonghal-su-isseulgga/</link><pubDate>Sun, 01 Nov 2015 15:02:04 +0900</pubDate><guid>https://cychong47.github.io/post/2015/software-developeryi-saengsanseongeul-ceugjeonghal-su-isseulgga/</guid><description>We can’t measure Programmer Productivity… or can we?
LOC The more fundamental problem is that measuring productivity by lines (or Function Points or other derivatives) typed doesn’t make any sense. A lot of important work in software development, the most important work, involves thinking and learning – not typing.
The best programmers spend a lot of time understanding and solving hard problems, or helping other people understand and solve hard problems, instead of typing.</description></item><item><title>분야별 노하우 공유가 필요한데</title><link>https://cychong47.github.io/post/2015/bunyabyeol-nohau-gongyuga-pilyohande/</link><pubDate>Sun, 01 Nov 2015 13:26:06 +0900</pubDate><guid>https://cychong47.github.io/post/2015/bunyabyeol-nohau-gongyuga-pilyohande/</guid><description>예 ipsec on asf/se/&amp;hellip;
불럭별 특징이 아니라 프로토콜별 호환성이나 주의사항에 대한 취합 필요
보통 postmortem하면 그 블럭의 특징이라고 보는 경향이 강한데 그것과 무관하게 프로토콜 특성에 대한 내용은 블럭 설계와 별개로 모아놔야 하지 않을까?
StackOverflow 처럼 분야별로&amp;hellip;</description></item><item><title>Running DPDK on VMware Fusion</title><link>https://cychong47.github.io/post/2015/running-dpdk-on-vmware-fusion/</link><pubDate>Tue, 20 Oct 2015 14:19:05 +0900</pubDate><guid>https://cychong47.github.io/post/2015/running-dpdk-on-vmware-fusion/</guid><description>VirtualBox supports emulated e1000 NIC for VM while VMware fusion does not. VMware Fusion&amp;rsquo;s VM setting does not support configuring of NIC HW type. The NIC HW is PCnet32 which is not supported by DPDK.
However, we can change NIC HW type by editing VM configuration file directly.
Refer : How to emulate 10 Gbps NIC in a VMware Fusion VM
Edit vmx file to VMX file is in where vmware image located</description></item><item><title>TRex - DPDK based traffic generator</title><link>https://cychong47.github.io/post/2015/trex-dpdk-based-traffic-generator/</link><pubDate>Mon, 12 Oct 2015 13:11:14 +0900</pubDate><guid>https://cychong47.github.io/post/2015/trex-dpdk-based-traffic-generator/</guid><description>DPDK Userspace in Dublin 2015에서 발표
Stageful traffic generator
특징 Generate traffic based on templates of real, captured flows No TCP/IP stack Up to 200Gbps with standard server hardware Low cost 1RU (C220M UCS-1RU) Cisco internal DPDK, ZMQ, Python libs Virtualization(vmxnet3/e1000) ~20Gbps per core Generate flow templates Support 1K templates Yaml based traffic profile GUI GUI which monitors real-time properties of TRex - min/max/average latency, jitter
Python 연동 Code https://github.com/cisco-system-traffic-generator/trex-core</description></item><item><title>What makes a good engineering culture?</title><link>https://cychong47.github.io/post/2015/what-makes-a-good-engineering-culture/</link><pubDate>Wed, 30 Sep 2015 13:41:57 +0900</pubDate><guid>https://cychong47.github.io/post/2015/what-makes-a-good-engineering-culture/</guid><description>From http://www.theeffectiveengineer.com/blog/what-makes-a-good-engineering-culture
1. Optimize for iteration speed Continous deployment to support rapid validation High test coverage to reduce build and site breakages Fast unit tests to encourage people to run them Fast and incremental compiles and reloads to reduce development time Bill Walsh, 49ers to 3 Super bowls,
Commit, Explode, Recover
A team crippled with indecisiveness will just cause individual efforts to flounders
2. Push relentlessly toward automation Consider operational burden per engineer</description></item><item><title>부서간 협력이 안 되니 대책으로</title><link>https://cychong47.github.io/post/2015/buseogan-hyeobryeogi-an-doeni-daecaegeuro/</link><pubDate>Sun, 20 Sep 2015 01:31:36 +0900</pubDate><guid>https://cychong47.github.io/post/2015/buseogan-hyeobryeogi-an-doeni-daecaegeuro/</guid><description>부서간 협력이 잘 안되는 듯 하니 대책으로 &amp;lsquo;부서간 협력지수&amp;rsquo;를 수치화해서 평가하겠다. 그럼 협력이 잘 될까 궁금하네</description></item><item><title>Leading Lights 2015 Finalists - Most Innovative NFV Product Strategy (Vendor)</title><link>https://cychong47.github.io/post/2015/leading-lights-2015-finalists-most-innovative-nfv-product-strategy-vendor/</link><pubDate>Sat, 19 Sep 2015 13:11:50 +0900</pubDate><guid>https://cychong47.github.io/post/2015/leading-lights-2015-finalists-most-innovative-nfv-product-strategy-vendor/</guid><description>HP, Intel, Cisco/Juniper, WindRiver 외에 Orchestrator 관련 회사도 다수 존재.
개인적으로는 역시 Nokia가 가장 관심이 가는데
Telco Cloud portfolio - virtualizing radio functions - LTE eNB L2/L3 processing, MME and GW functionality, Wi-Fi controllers and virtual RNCs and vBSCs Multi-layer architecture - pioneers the use of Ethernet fronthaul and any combination of distributed and centralized deployments Processing capacity is allocated from almost anywhere in the network, such as an adjacent cell or a centralized data center, to where it is needed most for coordination and capacity.</description></item><item><title>SW 품질 강화 노력</title><link>https://cychong47.github.io/post/2015/sw_quality/</link><pubDate>Sun, 13 Sep 2015 05:23:38 +0900</pubDate><guid>https://cychong47.github.io/post/2015/sw_quality/</guid><description>어딘가 보고 정리한 글인데 출처를 기억하지 못하겠다&amp;hellip;.
SW 품질 개선 노력의 대상 SW 품질을 높이는데 Tool, System, People 그리고 Management중에 어떤 면을 개선하는 경우 효과가 높을까?
Tool : 2 배 System : 10배 People : 30배 Management : 60배 이상 그렇지만 대개의 관리자는 개선효과를 반대로 알고 있다.
사람은 변화해야 할 때 변화한다(더 이상 저항하지 못할 때) 그러나 위기는 갑자기 오지 않는다. 다만 위기에 대한 인지를 갑자기 할 뿐이다.
변화는 성능 저하를 유발한다.</description></item><item><title>경쟁을 통한 성과 추구는 마약과 같다</title><link>https://cychong47.github.io/post/2015/competetion_is_like_drug/</link><pubDate>Sat, 12 Sep 2015 10:28:31 +0900</pubDate><guid>https://cychong47.github.io/post/2015/competetion_is_like_drug/</guid><description>경쟁을 부추켜서 조직의 성과를 얻으려는 관리자는 아무런 노력도 하지 않고 결과만 날로 먹으려는 것과 같다. 아무 고민없이 할 수 있는 제일 쉬운 방법이니까.
조직원들에게 동기부여를 줄지, 조직의 협동심을 아떻게하면 높일 수 있을 지 고민할 필요가 없이 결과만 취하면 되니까. 그런 관리자는 조직에 해를 끼치는 존재다.
할 수 있는 게 없는 건지,해도 안되는 건지. 여러가지 방법을 써도 안된다면 조직원과 함께 고민하면 안될까. 함께 속해 있는 &amp;lsquo;조직&amp;rsquo;의 성과를 위한 거니까
@유정식의 &amp;lsquo;착각하는 CEO&amp;rsquo;를 읽는 중 프랑스/베트남/쥐 박멸/쥐 사육 부분을 읽고</description></item><item><title>(책) 구글은 빅데이터를 어떻게 활용했는가</title><link>https://cychong47.github.io/post/2015/caeg-gugeuleun-bigdeiteoreul-eoddeohge-hwalyonghaessneunga/</link><pubDate>Mon, 07 Sep 2015 14:51:35 +0900</pubDate><guid>https://cychong47.github.io/post/2015/caeg-gugeuleun-bigdeiteoreul-eoddeohge-hwalyonghaessneunga/</guid><description>일단 책 제목부터 구박.
&amp;ldquo;People Analytics: How social technology will transform business and what it tells us about the future of work&amp;quot;인데 이게 왜 저런 한글 제목이 된건지. 책 내용을 보면 짐작은 가지만, 책 제목만 봐서는 구글이 빅데이터를 이용해서 어떤 서비스를 만들어냈는지 라고 해석할 수 있지 않을까? 실제로는 구글등의 회사에서 빅데이터를 이용해 직원들 관리에 어떻게 활용했는지에 대한 내용이다. 그리고 실제 구글 이야기는 많이 나오지도 않는다.
하지만 책 내용에는 저자가 강조하는 몇 가지 핵심 내용이 있다.</description></item><item><title>(펌) 스포카, "성장 배경? '리모트'와 '블로그 문화' 덕분이죠"</title><link>https://cychong47.github.io/post/2015/peom-seupoka-seongjang-baegyeong-rimoteuwa-beulrogeu-munhwa-deogbunijyo/</link><pubDate>Tue, 28 Jul 2015 12:26:14 +0900</pubDate><guid>https://cychong47.github.io/post/2015/peom-seupoka-seongjang-baegyeong-rimoteuwa-beulrogeu-munhwa-deogbunijyo/</guid><description>Link : http://www.bloter.net/archives/233978
스포카는 측정 가능한 업무 시스템을 위해 깃허브, 슬랙, 지라 같은 협업 도구를 이용했다. 직원들은 협업 도구들로 기록을 철저히 하면서 업무상황을 공유하고 있다. 기록 내용은 아주 자세한 내용을 담는다. 예를 들어 ‘○○에게 e메일을 보냈다’, ‘A에게 답변을 받았다’, ‘개발을 위한 자료 조사 중’ 같은 식이다. 이 내용은 직원별로 볼 수 있다. e메일 내용이 어떤 것이었는지, 자료 조사는 어떤 것을 했는지도 상세히 기록되고 있다.
김재석 CTO는 “처음에는 기록을 습관화하는 데 시간이 조금 더 걸렸다”라며 “기록을 편하게 할 수 있도록 기존 협업도구를 스포카 환경에 맞게 재개발하기도 했다”라고 설명했다.</description></item><item><title>The Power of Ten-Rules for Developing Safety Critical Code</title><link>https://cychong47.github.io/post/2015/the-power-of-ten-rules-for-developing-safety-critical-code/</link><pubDate>Mon, 27 Jul 2015 22:50:35 +0900</pubDate><guid>https://cychong47.github.io/post/2015/the-power-of-ten-rules-for-developing-safety-critical-code/</guid><description>from NASA/JPL(Jet Propulsion Laboratory)
The result is that most existing guidelines contain well over a hundred rules, sometimes with questionable justification. Some rules especially those that try to stipulate the use of white-space in programs, may have been introduced by personal preference; others are meants to prevent very specific and unlikely types of error from eariler coding efforts within the same organization.
효율적인 가이드라인이 되려면, rule의 개수는 적어야 하고, 쉽게 이해되고, 기억될 수 있을 만큼 명확해야 한다.</description></item><item><title>(책) 빅 스몰</title><link>https://cychong47.github.io/post/2015/caeg-big-seumol/</link><pubDate>Sat, 04 Jul 2015 15:21:38 +0900</pubDate><guid>https://cychong47.github.io/post/2015/caeg-big-seumol/</guid><description>p81 전문가라서 승진했더니 전문적인 일에서는 점점 더 멀어지고, 해보지 않은 일을 끊임없이 떠안기는 게 현대 기업의 문화다. 이 과정에서 효율이 떨어지기라도 한다면 기업은 &amp;lsquo;너는 쓸모없다&amp;rsquo;며 직원을 내친다.
중요한 것은 일을 제대로 해내는 능력을 갖춘 사람이다. 누구나 똑같은 말을 한다. 하지만 대기업은 최고의 능력을 갖춘 사람을 구하지 않는다. 조직 논리에 순적응할 수 있는 사람을 찾을 뿐이다. 따라서 결과적으로 대기업은 최고가 될 수 없다.
그래서 Steve Jobs가 Apple은 여전히 작은 venture들의 모임이라고 한 건가?</description></item><item><title>관리자 들도 공부 좀 합시다</title><link>https://cychong47.github.io/post/2015/gwanrija-deuldo-gongbu-jom-habsida/</link><pubDate>Sat, 04 Jul 2015 13:56:36 +0900</pubDate><guid>https://cychong47.github.io/post/2015/gwanrija-deuldo-gongbu-jom-habsida/</guid><description>출처 : 관리의 기본 (Fundamental of management) #2 - 관리자/리더에게 필요한 역량
가장 중요한 것은 Communication 역량으로, 팀내 또는 팀간의 조율을 위해서는 반드시 필요한 능력이라고 생각한다. 두말할 필요가 없는 부분인데, 효과적인 커뮤니케이션 스킬을 가지기 위해서는 상호 존중이 바탕이 되어야 한다. 존중의 바탕이 없이는 명령이되고, 명령은 팀을 Push하는 모델을 만들지, 팀이 스스로 높은 성과를 낼 수 있도록 Pull (당기는 형태)의 리더쉽을 만들어내기는 어렵다.
관리자로써 전체적인 계획을 만들고 이를 실행하려면, 팀원들을 코칭할 필요가 있다.</description></item><item><title>열심히 비교한 결론이 고작 그건가?</title><link>https://cychong47.github.io/post/2015/yeolsimhi-bigyohan-gyeolroni-gojag-geugeonga/</link><pubDate>Wed, 24 Jun 2015 15:20:57 +0900</pubDate><guid>https://cychong47.github.io/post/2015/yeolsimhi-bigyohan-gyeolroni-gojag-geugeonga/</guid><description>그냥 누구나 생각하는 바람직한 방법과 목표 그리고 절차를 따라야 한다는 게 고작 결론인가? 그런 누구나 할 수 있는 이야기잖아. 저런 이야기를 돈을 내고 들어야 한다는 건가? 이해가 안된다.
현재 불편한, 잘못된, 쓸데없는 일을 하게 만드는 절차를 감당해야 하는 사람들에게 솔직한 의견을 구하는 것이 더 나은 방법 아닐까?
아무리 다른 곳의 일하는 체계나 조직을 분석해도 소용없다. 그 비교자료에는 없는 내용이 핵심이니까. 조직을 운영하는 사람들의 능력과 그 조직을 구성하는 사람들의 능력. 그리고 생각들.</description></item><item><title>Divide &amp; Conquer</title><link>https://cychong47.github.io/post/2015/divide-conquer/</link><pubDate>Sun, 21 Jun 2015 08:24:05 +0900</pubDate><guid>https://cychong47.github.io/post/2015/divide-conquer/</guid><description>출처 : http://m.news.naver.com/read.nhn?mode=LSD&amp;amp;sid1=001&amp;amp;oid=008&amp;amp;aid=0003492855
4.어려운 문제에 무턱대고 덤비지 마라
어렵고 힘든 문제에 부딪히면 지레 겁을 먹기 쉽다. 아니면 무대포로 앞뒤 재지 않고 그냥 밀어붙인다. 그러나 구글과 페북에서 근무하며 얻은 지혜는 어렵고 덩치 큰 문제를 만나면 작게 쪼개서 각 부분별로 해결책을 찾는다는 것이다. 이렇게 부분별로 찾아진 해결책이 모아지면 원래의 덩치 큰 어려운 문제는 자연스럽게 풀리게 된다.
문제가 어려우면 어려울 수록 잘게 쪼개자. 잘게 쪼갠 문제를 해결하다 보면 전체 문제가 풀릴 수도 있다. 하지만 동시에 문제의 전체적인 모습을 보는 것도 게을리하면 안된다.</description></item><item><title>의도된 마감효과?</title><link>https://cychong47.github.io/post/2015/magamhyogwareul-norineun-geonga/</link><pubDate>Thu, 18 Jun 2015 00:00:45 +0900</pubDate><guid>https://cychong47.github.io/post/2015/magamhyogwareul-norineun-geonga/</guid><description>(예를 들어) 분명 물리적으로 10개월이 필요한 일이 있다. 일정이 급하다고 6개월내 해 내라고 한다. 열심히 하지만 결국 6개월 기한은 넘어가고 겨우겨우 (담당자들이 개고생해서) 8개월 혹은 9개월내 일을 마친다.
그리곤 말한다. (6개월을 요구했던 이들은) 처음에 6개월을 여구했으니까 8개월내 해낸거라고. 처음부터 10개월을 이야기했으면 못했을 거라고.
하지만 경험상 저런 경우 8개월내 끝나기 보다 12개월이 걸리는 경우가 많다. 무리한 일정은 부실한 설계와 엉성한 구현을 만들어내고 버그로 인한 재작업을 유도한다. 이때 책임은 누가 져야 할까?</description></item><item><title>착각과 자만</title><link>https://cychong47.github.io/post/2015/cagga/</link><pubDate>Thu, 28 May 2015 14:14:28 +0900</pubDate><guid>https://cychong47.github.io/post/2015/cagga/</guid><description>스스로 잘한다고 공공연하게 말하는 친구의 말은 믿을 수가 없다. 자기가 잘하는 단 하나만 생각해서 잘한다고 말하지만, 그게 SW 개발자가 가져야 할 모든 건 아닌데. 그것도 깨닫지 못하는 걸 보면 잘한다고 자만하는 건 스스로의 착각.
남들의 인정을 받는 지 의문.
혹은 남들이 자신과 함께 일하고 싶어 하는 지 한번이라도 생각해 봤으면.
또 저런 친구들의 착각은 남들이 자기랑 함께 일하기 싫어하는 이유를 자신이 너무 잘나서 라고 생각한다는&amp;hellip;</description></item><item><title>Coding Style의 중요성</title><link>https://cychong47.github.io/post/2015/coding-styleyi-jungyoseong/</link><pubDate>Mon, 25 May 2015 12:44:28 +0900</pubDate><guid>https://cychong47.github.io/post/2015/coding-styleyi-jungyoseong/</guid><description>대부분의 개발자는 현업에서 선배 개발자들이 작성한 코드를 유지보수하면서 코드 작성 방법을 배우게 됩니다. 회사에 따라 다르긴 하겠지만, 이렇게 접한 대부분의 코드는 겨우 겨우 동작만 하지, 코드의 가독성이나 유지보수를 거의 생각하지 않고 작성된 코드일 확률이 높습니다. 이런 코드를 읽고, 어떻게든 돌아가게 수정하는 훈련만 하다 보면 애시당초 코드를 잘 짠다는 게 무엇인지 알기가 어렵게 됩니다.
출처 : http://wp.me/p66O1q-3j
평소 내가 가진 생각과 비슷하다. 코드는 작성하는 게 1이면 읽는 게 9라고 한다. 그 만큼 기계가 아닌 사람이 읽는 것의 대상이 되는 경우가 많으므로 읽는 작업에 도움이 되도록 coding style의 정리가 반드시 필요하다고 생각한다.</description></item><item><title>DPDK Coding style</title><link>https://cychong47.github.io/post/2015/dpdk-coding-style/</link><pubDate>Thu, 21 May 2015 14:51:37 +0900</pubDate><guid>https://cychong47.github.io/post/2015/dpdk-coding-style/</guid><description>출처 : DPDK mailing list
Coding Style Description This document specifies the preferred style for source files in the DPDK source tree. It is based on the Linux Kernel coding guidelines and the FreeBSD 7.2 Kernel Developer&amp;rsquo;s Manual (see man style(9)), but was heavily modified for the needs of the DPDK.
General Guidelines The rules and guidelines given in this document cannot cover every situation, so the following general guidelines should be used as a fallback:</description></item><item><title>Docker for dummies 정리</title><link>https://cychong47.github.io/post/2015/docker-for-dummies-jeongri/</link><pubDate>Wed, 20 May 2015 14:18:04 +0900</pubDate><guid>https://cychong47.github.io/post/2015/docker-for-dummies-jeongri/</guid><description>출처 : Docker 무작정 따라하기
참고 : 가장 빨리 배우는 Docker</description></item><item><title>(책) 죽어라 일만 하는 사람은 절대 모르는 스마트한 성공들</title><link>https://cychong47.github.io/post/2015/caeg-jugeora-ilman-haneun-sarameun-jeoldae-moreuneun-seumateuhan-seonggongdeul/</link><pubDate>Mon, 18 May 2015 14:30:24 +0900</pubDate><guid>https://cychong47.github.io/post/2015/caeg-jugeora-ilman-haneun-sarameun-jeoldae-moreuneun-seumateuhan-seonggongdeul/</guid><description>p13 나는 사업을 하면서 수시로 수확체감의 법칙을 실감한다. 어떤 사업이든 일정 수준에 도달하면 노동이나 자본 등 생산 요소를 늘려도 결과물은 비례해서 증가하지 않는다.
일과 성공 역시 마찬가지다. 들인 시관과 성과는 정비례하지 않는다. 6시간 일한다고 목표를 달성하지 못하는 것도 아니고 12시간 일한다고 두 배의 성과를 얻는 것도 아니다. 그런데도 여전히 많은 사람들이 50시간이 아니라 70시간을 일할 때 더 많은 일을 해낸다고 믿는다.
p15 우리가 12시간씩 일하며 인생은 원래 고달픈 거라고 스스로를 위로하는 동안 누군가는 획기적인 아이디어로 3시간 일하고 9시간 동안 여유를 즐긴다.</description></item><item><title>(책) 단</title><link>https://cychong47.github.io/post/2015/dan/</link><pubDate>Tue, 12 May 2015 12:40:15 +0900</pubDate><guid>https://cychong47.github.io/post/2015/dan/</guid><description>&amp;lsquo;&amp;lsquo;단의 공식&amp;rsquo;&amp;rsquo; 버려라 : 중요한 것을 위해 덜 중요한 것을 버리는 것. &amp;lsquo;더 많이&amp;rsquo;를 버리고 핵심에 집중 세워라 : 왜 일해야 하는 지 사명을 세우고, 내가 누구인지 정체성을 세우고, 어디로 가야 할 지 길을 세워야 한다. 지켜라 : 단순함의 핵심은 지속 가능에 달려 잇다. p14 GE의 제프리 이멜트(Jeffrey Immelt) 회장은 2013년 10월 BBC와의 인터뷰에서 이렇게 설명했다. &amp;quot; 조직이 커지면서 중요하지 않은 일을 너무 많이 하고 있다. 단순화는 직원들이 중요하지 않은 일에 맞서 정말 중요한 일을 함께 하도록 돕는 도구다.</description></item><item><title>Designing for Service Agility</title><link>https://cychong47.github.io/post/2015/wp-designing-for-service-agility/</link><pubDate>Thu, 08 Jan 2015 15:33:34 +0900</pubDate><guid>https://cychong47.github.io/post/2015/wp-designing-for-service-agility/</guid><description>Heavy Reading 2014 December
http://contextream.com/media/docs/HR-ConteXtream-Fit-VNF-WP-12-8.pdf
The important Factors Driving NFV deployment is Service Agility &amp;amp; Flexibility
In a virtual environment, where applications are extracted from hardware, VNF de- signers face different challenges and opportunities. If operators are to achieve a step change in service agility, it should be possible to provision VNFs on a quasi-on- demand basis. Fit VNFs can be dedicated to a single function and then connected together using traffic steering (or &amp;ldquo;chaining&amp;rdquo;) mechanisms to create services.</description></item><item><title>Intel Embedded Tech Forum 2014</title><link>https://cychong47.github.io/post/2014/intel-embedded-tech-forum-2014/</link><pubDate>Tue, 09 Dec 2014 10:38:08 +0900</pubDate><guid>https://cychong47.github.io/post/2014/intel-embedded-tech-forum-2014/</guid><description>Small Cell Big Cell 256 user 이하를 small cell로 정의 mini-CRAN Paris Hill SOC을 이용하는 경우 RRH에서 LTE/3G DSP+DFE 까지 처리하고 Ethernet으로 IA core로 전달. Altiostar 구조와 유사한 듯 Wifi 와 3G/4G까지 지원하는 차세대 SOC 2/4/8 core까지 지원 Aricent와 협업하여 L1/L2/L3 Protocol stack 개발 ONP Red Rock Canyon Las Vegas에서 30분 가량 걸리는 거리 Switch와 NIC 통합 PCI-e를 지원해서 NIC없이 Xeon을 직접 연결할 수 있음. 150page 가량의 report ONP 1.1 버전.</description></item><item><title>R.I.P OVDK</title><link>https://cychong47.github.io/post/2014/r-i-p-ovdk/</link><pubDate>Thu, 27 Nov 2014 14:47:38 +0900</pubDate><guid>https://cychong47.github.io/post/2014/r-i-p-ovdk/</guid><description>며칠 밖에 보지 않았지만, 그래도 내용을 분석해 보려고 했던 OVDK인데, 오늘 기사를 보니 Intel에서 공식적으로 OVDK의 개발 중단을 발표했단다.
Intel Dead-Ends Its Fork of Open vSwitch
Data path(Fast path)를 커널 모듈에서 처리하는 OVS를 fork해서 DPDK를 이용해서 user space에 Fast Path를 만들려고 했는데 그러다 보니 역시 계속해서 발전하는 OVS의 기능을 수용하기 부담스러웠나 보다. 더군다나 OVS에서도 experimental feature이긴 하지만 DPDK를 이용하는 코드도 있다고 하니.
내년 초에 나올 다음 버전 OVS에 공식 기능으로 들어가길 기대한다고.</description></item><item><title>ODP</title><link>https://cychong47.github.io/post/2014/odp/</link><pubDate>Wed, 19 Nov 2014 14:02:19 +0900</pubDate><guid>https://cychong47.github.io/post/2014/odp/</guid><description>Cavium Demonstrates Multiple OpenDataPlane Applications at Linaro Connect USA 2014 Cavium ThunderX 48 Core 2.5Ghz ARM Server SoC Cavium ThunderX 48 Core 2.5Ghz ARM Server SoC Cavium ThunderX is the world&amp;rsquo;s fastest ARM Processor, featuring 48 ARMv8 64bit cores at 2.5Ghz each, with two SoC&amp;rsquo;s possible per motherboard, this means 240Ghz of compuete power per Server Board. Providing extremely high performance at much lower power, much lower cost, much more optimized than any x86 server system.</description></item><item><title>DPDK Summit 2014 Videos</title><link>https://cychong47.github.io/post/2014/dpdk-summit-2014-videos/</link><pubDate>Wed, 19 Nov 2014 13:59:07 +0900</pubDate><guid>https://cychong47.github.io/post/2014/dpdk-summit-2014-videos/</guid><description> Application Performance Tuning and Future Optimizations in DPDK by Venky Venkatesan DPDK in a Virtual World by Bhavesh Davda Rashmin Patel High Performance Networking Leveraging the DPDK and the Growing Community by Thomas Monj alon Multi Socket Ferrari for NFV by Laszlo Vadkerti Andras Kovacs Lightning Fast IO with PacketDirect by Gabriel Silva A High Performance vSwitch of the User by the User for the User by Yoshihiro Nakajima Is It Time to Revisit the IP Stack in the Linux Kernel and KVM by Jun Xu Closing Remarks by Tim ODriscoll</description></item><item><title>(펌) 부실한 공유문화를 지배하는 개발자의 심리</title><link>https://cychong47.github.io/post/2014/peom-busilhan-gongyumunhwareul-jibaehaneun-gaebaljayi-simri/</link><pubDate>Mon, 17 Nov 2014 13:35:16 +0900</pubDate><guid>https://cychong47.github.io/post/2014/peom-busilhan-gongyumunhwareul-jibaehaneun-gaebaljayi-simri/</guid><description>정말 하나같이 핵심적인 내용인데 정작 이걸 알아야 하는 사람은 이런 데 관심이 없겠지.
출처 : 부실한 공유문화를 지배하는 개발자의 심리
전반적으로 공유문화가 부실하게 된 것은 현재 개발자들의 책임은 아니다. 원래 문화라는게 우리의 선조, 선배들이 만들어 놓은 것을 따르면서 아주 약간씩 바뀌는 것이다. 개발문화도 그렇다. 지금까지 선배들이 그런 환경에서 그렇게 일해 왔기 때문에 그런 문화가 형성되었고 우리도 거기에 적응해서 일하고 있는 것이다.
문화가 바뀌기 어려운 이유는 나 혼자 노력해서는 안되기 때문이다. 다른 사람들은 공유를 위해서 노력하지 않고 나 혼자 애를 쓰면 나만 두배로 손해를 본다.</description></item><item><title>Cuckoo Switch</title><link>https://cychong47.github.io/post/2014/cuckoo-switch/</link><pubDate>Sun, 09 Nov 2014 08:48:38 +0900</pubDate><guid>https://cychong47.github.io/post/2014/cuckoo-switch/</guid><description>Cuckoo 알고리즘을 사용하여 Flow lookup과 flow update 성능을 높힌 것과 DPDK를 이용하여 패킷 처리 성능을 높힌 것
출처 : Scalable, High Performance Ethernet Forwarding with CuckooSwitch
DPDK DPDK를 이용한 IO 성능 개선한 것 외에 특이한 것은 없음. Cuckoo hashing 대개 FIB update를 위해 RCU(Read Copy Update)를 사용함. 이 경우 완전한 정보를 갖는 additional entry가 필요
수정된 cuckoo algorithm을 기반으로 한 flow table 사용 Basic Cuckoo hashing
ensures 50% table space utilization 4-way associative hash table has 95% utilization</description></item><item><title>(책) 바지 벗고 일하면 안되나요?</title><link>https://cychong47.github.io/post/2014/caeg-baji-beosgo-ilhamyeon-andoenayo/</link><pubDate>Sun, 19 Oct 2014 03:55:01 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-baji-beosgo-ilhamyeon-andoenayo/</guid><description>원제 : The year without pants
p42 방송에서 IDEO가 &amp;ldquo;Deep Dive&amp;quot;라는 아이디어 개발 기법을 써서 닷새 만에 쇼핑카트를 개선하는 과정을 보여주었다. 곧이어 수 많은 기업이 Deep Dive 기법을 어설프게 따라 했지만, 놀랍게도 결과는 그들의 기대에 못 미쳤다. IDEO의 회의 단계와 규칙을 그대로 따라 하고 아무리 노력한들 한 가지가 빠진 상태에서는 방송에서 본 것과 같은 결과가 나올 리 없었다. 문제의 누락된 요소이자 가장 중요한 요소는 바로 거기에 참여한 사람들이었다 나이트라인을 시청한 다른 기업들의 경우 IDEO처럼 디자인에 재능이 뛰어난 직원들이 근무하는 환경이 아니었다.</description></item><item><title>내게 권한이 있다면</title><link>https://cychong47.github.io/post/2014/naege-gweonhani-issdamyeon/</link><pubDate>Tue, 14 Oct 2014 14:47:49 +0900</pubDate><guid>https://cychong47.github.io/post/2014/naege-gweonhani-issdamyeon/</guid><description>우선 할 것은 모든 과제의 진행상황을 투명하게 볼 수 있는 시스템만들기 엑셀로 관리하고 있는 정보에 대해 최적의 대안을 찾아 엑셀 사용을 최소화 하기 파일 서버에 단순히 모으고 있는 자료를 DB화. 적어도 하나의 과제에 관련된 문서를 한눈에 볼 수 있게 하고, 검색이 가능하도록 변경 File based DB 시스템 대체 방안. 필요하다면 기존 요구사항만 기존 담당자들로부터 받고, 새로운 생각을 가진 사람들에게 대안을 제안하도록 Code Coverage 100% 같은 비효율적인 업무 없애기 Inventory 정보 투명화.</description></item><item><title>나영석 PD</title><link>https://cychong47.github.io/post/2014/nayeongseog-pd/</link><pubDate>Tue, 07 Oct 2014 15:30:34 +0900</pubDate><guid>https://cychong47.github.io/post/2014/nayeongseog-pd/</guid><description>창의적인 아이디어를 만들기가 쉽지 않을 텐데, 나름의 노하우가 있다면? 후배들에게 ‘아이디어를 좀 내봐, 너 좋은 아이디어 없냐?’ 하는 회의는 의미 없다. 아이디어가 있으면 이미 이야기했을 것이다. 내가 중요하게 생각하는 것은 회의에 참석한 캐릭터의 특성을 파악하는 것이다. ‘저 친구는 어떤 성향인지, 뭘 좋아하고 싫어하는지, 편견이 심한지 그렇지 않은지, 판단은 믿을 만한지’ 등등. 스태프들의 캐릭터를 파악하고 있어야 한다.
멋진데. 이런 게 진정한 관리자의 덕목이 아닐까
PD로 일하는 데 도움이 되었던 경험이 있다면?</description></item><item><title>Intel SDN/NFV Forum Korea 2014</title><link>https://cychong47.github.io/post/2014/intel-sdnnfv-forum-korea-2014/</link><pubDate>Sun, 28 Sep 2014 14:09:56 +0900</pubDate><guid>https://cychong47.github.io/post/2014/intel-sdnnfv-forum-korea-2014/</guid><description>근태를 처리하지 못해 하루 최소 근무시간인 4시간을 채우고 포럼 장소인 리츠칼튼 호텔로 달려(버스타고) 감. 다행히 오후 세션 시작 시간인 1시 10분 전에 도착했지만 덕분에 점심도 못 먹고 끝날 때까지 있어야 했다. 먹은 거라곤 사탕 몇 개.
트랙 2개인데, 다른 쪽 트랙에서도 듣고 싶은 게 있었지만 트랙 1을 끝까지 들었다.
Quanta Taiwan Company CPU와 switch 를 상호 선택할 수 있도록 함. 상용 스위치 칩 사용 Intel Alta and RRC(w/ Aricent OS) Intel ONS Broadcom Trident and Tomahawk Cavium Xpliant 다양한 CPU 사용 가능 Intel, Freescale, Cavium, Broadcom(XLP) OCE, ONIE(Open Network Install Environment) Fetch Network OS from the booter(boot loader -&amp;gt; ONIE -&amp;gt; fetch network OS) Similar to loadable OS 표준 I/F가 있다고 하네.</description></item><item><title>(책) Violent Python</title><link>https://cychong47.github.io/post/2014/caeg-violent-python/</link><pubDate>Sat, 27 Sep 2014 16:43:27 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-violent-python/</guid><description>오래만에 재밌는 책을 봤다.
해커를 위한 책이라고 하지만, 해킹에 관한 기법보다는 network application을 작성하는데 유용한 scapy, dpkt 그리고 정규식에 대한 설명이 유용하다. 마침 요 근래 업무용으로 Python을 이용해서 패킷 만들고, 송/수신하는 유틸리티를 만들고 있어 Impacket 모듈을 많이 사용했는데 그것보다 scapy 가 훨씬 편해 보인다.
새 책을 사긴 그렇고 중고책을 하나 구할 까 했는데 알라딘에서 중고책 매입가가 4천원 대. 작년 초에 나온 책인데 너무 싸게 매입하는 게 아닌가
일단 책 보면서 유용하다 싶은 내용을 몇 가지 주제로 나눠 정리했다.</description></item><item><title>(책) 0과 1로 세상을 바꾸는 구글 그 모든 이야기(In the Flex)</title><link>https://cychong47.github.io/post/2014/0gwa-1ro-sesangeul-bagguneun-gugeul-geu-modeun-iyagiin-the-flex/</link><pubDate>Sat, 27 Sep 2014 13:33:25 +0900</pubDate><guid>https://cychong47.github.io/post/2014/0gwa-1ro-sesangeul-bagguneun-gugeul-geu-modeun-iyagiin-the-flex/</guid><description>p230 OKR(Objectives and Key Results) 는 원래 인텔의 앤디 그로브(Andy Grove)가 고안한 경영기법이다. &amp;hellip; 무었을 하고 싶어하는지만 정하는 것이 아니라, 측정 가능하게 업무(핵심결과)를 나눠야 한다는 내용이었다.
OKR은 구글문화의 핵심이 되었다. 모든 직원이 나름의 OKR을 분기별로, 연도별로 세워서 승인을 받아야 한다. 그 뿐만이 아니라 팀 수준, 부서 수준, 심지어 회사 수준의 OKR도 구축했다(회사 수준의 OKR은 중요한 구상이나 시래를 만회하려 할 때 구축했다) 1년에 네 차례씩 구글 직원 모두 멈춰 서서 부서별 회의를 갖고 OKR 진전상황을 확인한다.</description></item><item><title>(책) 혼. 창. 통.</title><link>https://cychong47.github.io/post/2014/caeg-hon-cang-tong/</link><pubDate>Wed, 24 Sep 2014 14:26:24 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-hon-cang-tong/</guid><description>혼창통by 이지훈
8p 혼 : 가슴 벅차게 하는 비전이 사람을 움직인다.
창 : 끊임없이 &amp;ldquo;왜&amp;quot;라고 물어라, 그러면 열린다. 통 : 만나라, 또 만나라. 들어라 잘 들어라.
16p IBM, P&amp;amp;G, Cisco, CEMEX 이 기없들의 공통점은 무엇일까? 그렇다 공룡처럼 몸집이 큰 기업들이다. 공룡인데도 민첩하다. 한가지 공통점은 회사 전체가 보다 큰 가치, 가슴을 울렁이게 하는 원대한 비전을 공유한다는 사실이다. 하버드경영대학원의 로자베스모스 캔터 교수(Rosabeth Moss Kanter) &amp;ldquo;모든 직원이 보다 큰 가치를 공유하게 되면 일선에서 어떤 문제가 부딛쳐도, 혹은 본사로부터 아무리 떨어진 곳에서 일하더라도 자발적으로 문제의 해결을 주도하게 된다&amp;rdquo;</description></item><item><title>DPDK on VirtualBox</title><link>https://cychong47.github.io/post/2014/dpdk-on-virtualbox/</link><pubDate>Tue, 23 Sep 2014 15:37:21 +0900</pubDate><guid>https://cychong47.github.io/post/2014/dpdk-on-virtualbox/</guid><description>VirtualBox에 DPDK 설치하기 참고
VirtualBox 설치하기 통상적인 절차대로 VirtualBox를 설치하고, Ubuntu 14.04 LTS 설치한다. DPDK는 32bit와 64bit를 모두 지원하지만 64비트를 사용하는 것이 좋다. Application에 따라 많은 양의 Memory를 사용할 수도 있으므로.
NIC 카드 추가 VirtualBox가 지원하는 NIC에 Intel 82540EM과 82545EM이 있다. 둘 다 DPDK에서 지원하는 1G NIC이다. 이 중에서 82545EM 카드를 2개 추가한다.
VirtualBox의 Guest OS를 종료시킨 상태에서 환경 설정에서 Network &amp;gt; Adapter 항목에서 Adapter 2, Adapter 3를 활성화시킨다.
그 결과 총 3개의 NIC이 설치되었다.</description></item><item><title>(책) 더 인터뷰</title><link>https://cychong47.github.io/post/2014/caeg-deo-inteobyu/</link><pubDate>Sun, 21 Sep 2014 12:21:48 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-deo-inteobyu/</guid><description>p24 만약 직원이 자신이 하려는 도전에 따르는 책임을 받아들이려고 한다면, 많은 조직이 책임을 더 부여하려고 할 것이다.
p32 Rolf Dobelli 스마트한 생각들, 스마트한 선택들 &amp;lsquo;확증 편향&amp;rsquo;. 사람은 자신이 확실하는 일에 대해 옳다고 증명해주는 증거들만 철석같이 믿지요.
&amp;lsquo;사회적 검증&amp;rsquo;도 대단히 안 좋고 위험한 행동 오류.
권력이나 권위 있는 사람들의 말을 무조건 믿는 &amp;lsquo;권위자 편향&amp;rsquo; 또한 위험. 전 세계적으로 경제학자 수는 100만 명이 넘지만 단 1명도 2008년 금융 위기를 정확히 예측하지 못했다. 당장 눈앞에 펼쳐진 자료들을 과신하는 &amp;lsquo;가용성 편형&amp;rsquo;</description></item><item><title>(책) 왜 공부하는가</title><link>https://cychong47.github.io/post/2014/caeg-wae-gongbuhaneunga/</link><pubDate>Thu, 11 Sep 2014 15:40:52 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-wae-gongbuhaneunga/</guid><description>김진애
p32 뒤를 돌아보면, &amp;ldquo;1년 동안 공부만 할 거야!&amp;ldquo;하고 결단하고 그 결단을 독하게 지켰던 체험을 통해 얻은 가장 큰 자산은 &amp;lsquo;독해야 할 때 독해질 수 있다;는 자신감이다. 이 자신감은 내 일생 내내 큰 자산이 되었다. &amp;lsquo;필요하다면 유혹을 끊어낼 수 있다. 잔가지들에 연연해하지 않을 수 있다. 내 온 자신을 던질 수 있다. 몰입할 수 있다&amp;rsquo;는 믿음은 중요하다. 한번 독해지기를 경험해보면 언제나 독해질 수 있는 것이다.
p77 무시당하는 느낌이 없어졌다. 조롱당하는 느낌, 모욕당하는 느낌도 없어졌다.</description></item><item><title>(펌) 머리속 정리법 10가지</title><link>https://cychong47.github.io/post/2014/peom-meorisog-jeongribeob-10gaji/</link><pubDate>Wed, 10 Sep 2014 14:55:07 +0900</pubDate><guid>https://cychong47.github.io/post/2014/peom-meorisog-jeongribeob-10gaji/</guid><description>휴식을 취하라 다양한 활동에 대해 각각의 컴퓨터 모니터를 설치하라. 종이로 된 할 일 목록을 사용하라 한 이메일을 복수의 카테고리로 분류하라. 필요할 때는 통째로 없애라. 간단한 업무와 장기 프로젝트를 위한 시간을 따로 지정하라. 결정을 내릴 때 그 가치보다 더 많은 시간을 들이지 말라 잠을 자라. 직장에서 낮잠을 자라. 지나치게 정리하지 말라 일은 직장에 두고 와라. 출처 : 정보 과다의 시대, 머릿속 정리법 10가지</description></item><item><title>Time Machine backup</title><link>https://cychong47.github.io/post/2014/time-machine-backup/</link><pubDate>Wed, 10 Sep 2014 13:40:43 +0900</pubDate><guid>https://cychong47.github.io/post/2014/time-machine-backup/</guid><description>
추가 해야 할 내용
MovingCastle에 대한 추가 백업? 혹은 Mini 2011을 이중 백업. Wordpress Blog 내용만 추가로 백업 필요. Ghost Blog 추가 백업</description></item><item><title>(책) 빅데이터 승리의 과학</title><link>https://cychong47.github.io/post/2014/caeg-bigdeiteo-seungriyi-gwahag/</link><pubDate>Tue, 09 Sep 2014 03:41:02 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-bigdeiteo-seungriyi-gwahag/</guid><description>(책) 빅데이터 승리의 과학
Technology 팀 오바마 2012년 선거 당시 2008년 당시의 SNS를 활용하는 수준을 넘어서 통합적인 선거 지원을 위해 빅데이터 기술 활용. 선거 특성에 맞는 AWS 를 이용해서 인프라를 구축하고, R 언어를 활용. 하둡은 실시간성이 부족하여 제한적으로 사용. 디지털 팀의 CDS(Chief Digital Strategist)는 31살 Joe Rosparse, CTO는 하퍼 리드(33)등을 고용.
벤처기업 엔지니어 출신. 혁신을 좋아하고, 기존 틀과 문화에 얽매이지 않고 오직 해결책에만 관심을 둠. 리드는 50명에 이르는 Technology 팀 멤버를 구성.</description></item><item><title>초보적인 실수를 반복한다고 구박하지만</title><link>https://cychong47.github.io/post/2014/cobojeogin-silsureul-banboghandago-gubaghajiman/</link><pubDate>Mon, 08 Sep 2014 09:12:34 +0900</pubDate><guid>https://cychong47.github.io/post/2014/cobojeogin-silsureul-banboghandago-gubaghajiman/</guid><description>초보적인 실수를 반복한다고 구박하지만,
자기들은 기본적인 패키지 운영도 못하면서 누굴 구박하는지. 조직간 알력 해결도 못하면서. 같은 일을 서로 더 힘들게 하는 문화를 만들어 놓고서.
매일 같이 비상이다 위기다 라고 협박만 하면서.
잘못된 일정 따위는 사과하지 않으면서.
특정 부서의 오기로 만들어진 과제 일정 차질에 대해서는 아무 말도 안하면서.
뭐가 잘났다고.</description></item><item><title>The Pragmatic Programmer</title><link>https://cychong47.github.io/post/2014/the-pragmatic-programmer/</link><pubDate>Mon, 08 Sep 2014 08:48:49 +0900</pubDate><guid>https://cychong47.github.io/post/2014/the-pragmatic-programmer/</guid><description>TPP 3. Provide Options, Don&amp;rsquo;t make Lame excuses 검토 결과 부정적일 때, 그냥 안된다고 하지말고 대안을 같이 제시하자. &amp;ldquo;이거 해 봤어?&amp;rdquo; &amp;ldquo;이거 고려했어&amp;rdquo; 같이 나올 수 있는 질문에 대해 미리 고민하고 대응할 것. 여기서 대응이란 질문에 대한 답을 제시할 수 있도록 미리 준비하라는 것. 실제로 고려해 보고, 실제로 시도해보고 나서 할 수 있으면 최고.
무조건 안된다고 하지 말고, 대안을 제시하자. 안된다고 말하기 보다는 그 문제를 해결하기 위해 뭘 할 수 있는 지 제시하자.</description></item><item><title>Synology + Webdav + Devonthink</title><link>https://cychong47.github.io/post/2014/synology-webdav-devonthink/</link><pubDate>Sat, 06 Sep 2014 15:39:33 +0900</pubDate><guid>https://cychong47.github.io/post/2014/synology-webdav-devonthink/</guid><description>우선 Synology NAS에서 webdav를 켜는 건 기본이고
Devonthink의 Sync tab에서 타입을 webdav로 하면 아래와 같은 입력 창이 나오는데 여기에 서버 주소 등 필요한 정보를 적으면 된다. 이때 path는 user name으로 로그인했을 때 기준으로 하면 됨. 즉 Full path를 적으면 되는데 처음 입력할 때는 /home/Documents/Devonthink로 입력했는데 나중에 다시 보면 저렇게 바뀌어 있다.
이제 두 대의 맥을 이렇게 운영하련다.
동기화 관련 참고자료
Dropbox를 사용할 때 동시에 여러 Mac에서 동기화된 DB를 열지 않도록 하는 applescript Devonthink DB가 깨졌을 때 복구하는 방법 웹페이지 일부만 스크랩하는 방법</description></item><item><title>(펌) 삶의 목적</title><link>https://cychong47.github.io/post/2014/peom-salmyi-mogjeog/</link><pubDate>Wed, 03 Sep 2014 04:21:54 +0900</pubDate><guid>https://cychong47.github.io/post/2014/peom-salmyi-mogjeog/</guid><description>&amp;lt;인생의 목적&amp;gt;
우리는 살기 위해, 그리고 경험하기 위해 태어났습니다.
바쁜 일정 속에서도 스스로에게 되뇌이곤 합니다.
인간은 일하기 위해 태어난 것이 아니라, 인생이라는 선물을 즐기기 위해 태어났다고. 우리는 일하기 위해 존재하는 것이 아니라, 조금 더 세상을 나아지게 하기 위해 여기 있다고.
당신이 당신의 인생을 일에 올인하고 있다면, 분명 후회의 순간이 찾아옵니다.
당신이 직장에서 성공하고 있다면 더더욱 항상 기억해야합니다. 우리는 삶을 위해 삽니다. 그리고 일은 절대 삶보다 중요할 수 없습니다.
인생의 목적은 삶을 사는 것이지 일하는 게 아니다.</description></item><item><title>(책) 구글은 SKY를 모른다</title><link>https://cychong47.github.io/post/2014/caeg-gugeuleun-skyreul-moreunda/</link><pubDate>Sun, 31 Aug 2014 13:29:59 +0900</pubDate><guid>https://cychong47.github.io/post/2014/caeg-gugeuleun-skyreul-moreunda/</guid><description>나는 매주 금요일 오후가 되면 구글이라는 회사의 위력을 다시금 실감한다. 알려진 대로 구글은 매주 금요일마다 전 직원이 모이는 TGIF라는 행사가 있다.
정말 지금도 이걸 하고 있다니 놀랍기만 하다. 회사 규모가 커져서 못할 줄 알았는데.
과연 우리 회사의 임원들은 같은 시간에 뭘 하고 있을까? 구글보다 비즈니스의 폭이 넓어서 더 많은 회의가 필요해서?
이들 두 창업자의 가장 큰 관심사는 구글 비즈니스가 아니라, 구글러들의 행복과 문화를 어떻게 하면 좀 더 발전시켜나갈 것인가에 있다.</description></item><item><title>(펌) 20 Life Lessons Everyone Can Master By The Age 40</title><link>https://cychong47.github.io/post/2014/peom-20-life-lessons-everyone-can-master-by-the-age-40/</link><pubDate>Sun, 24 Aug 2014 12:17:51 +0900</pubDate><guid>https://cychong47.github.io/post/2014/peom-20-life-lessons-everyone-can-master-by-the-age-40/</guid><description>출처 : 20 Life Lessons Everyone Can Master By The Age 40
1. Everything will be okay, and if it’s not, it’s certainly not the end of the world. 내가 포기할 때 실패한 끝난 거다.
2. Find what you love and own it! 3. Don’t fear mistakes. 4. You deserve respect. 5. Romance is NOT the same as love. 6. It’s never too late to live a life that makes you proud.</description></item><item><title>(펌) 어떻게 하면 더 나은 소프트웨어를 만들 수 있을까?</title><link>https://cychong47.github.io/post/2014/peom-eoddeohge-hamyeon-deo-naeun-sopeuteuweeoreul-mandeul-su-isseulgga/</link><pubDate>Sun, 24 Aug 2014 10:55:06 +0900</pubDate><guid>https://cychong47.github.io/post/2014/peom-eoddeohge-hamyeon-deo-naeun-sopeuteuweeoreul-mandeul-su-isseulgga/</guid><description>어떻게 하면 더 나은 소프트웨어를 만들 수 있을까? – 인터뷰 시리즈 part 1, Fernando Jimenez Moreno와 함께
출처 : http://hacks.mozilla.or.kr/2014/08/how-can-we-write-better-software-interview-series-part-1/
영문 원본 : https://hacks.mozilla.org/2014/07/how-can-we-write-better-software-interview-series-part-1/
Telefonica에서 근무하고 있으면서 MozillaOS 개발에 참여하고 있는 사람의 인터뷰 기사
Code Reviewer 업무를 함에 있어 참고할 만한 좋은 내용이 많아 옮겨 본다.
우리가 모질라와 함께 일한 것은 2011년으로 거슬러 올라갑니다. 두 회사 모두에게 잘 맞는 공통된 작업 절차를 찾기까지 꽤 많은 시간이 걸렸습니다. 제말은, 우리는 텔코(telco) 문화에서 일하던 사람입니다.</description></item><item><title>SDN expert group 세미나 - Play with DPDK</title><link>https://cychong47.github.io/post/2014/sdn-expert-group-semina-play-with-dpdk/</link><pubDate>Thu, 21 Aug 2014 12:11:18 +0900</pubDate><guid>https://cychong47.github.io/post/2014/sdn-expert-group-semina-play-with-dpdk/</guid><description>세미나 내용 Controller &amp;ndash;(OpenFlow)&amp;ndash; ovs-switchd &amp;ndash;(netlink)&amp;ndash; Datapath Datapath is in the kernel space OVDK move the kernel based OVS to user space. ovs-switched talk to OVDK with UDP 기존 OVDK는 port별 task handler(각각 별도의 core에서 동작) 그 결과 많은 core 필요 WR 이야기처럼 VM간 혹은 VM과 외부와의 통신을 담당하는 OVS용으로 많은 core를 사용하면 실제로 VM이 사용할 수 있는 core 개수가 줄어들어 문제 virtIO 사용시 VM에서 동작하는 application이 kernel stack의 필요한 경우 결국 OVDK와 VM내 커널 space간 copy가 필요함 최신 버전에서는 VM에서도 KNI based virtIO를 이용하도록 개선함.</description></item><item><title>차라리 혼자 생각할 시간 가져라</title><link>https://cychong47.github.io/post/2014/carari-honja-saenggaghal-sigan-gajyeora/</link><pubDate>Wed, 20 Aug 2014 14:43:09 +0900</pubDate><guid>https://cychong47.github.io/post/2014/carari-honja-saenggaghal-sigan-gajyeora/</guid><description>그러나 생각하기 위한 시간을 내는 것으로는 부족해 보인다. 자신의 믿음에 부합되는 정보만을 찾는 편향이 인간에게는 있다고 했다. 혼자 생각한다고 그런 편향에서 벗어날 수 있을 것 같지는 않다.
▶그렇다. 아파트 가격이 오를 것이라고 믿으면 그에 부합되는 증거만을 보려고 한다. 반대되는 증거는 보려 하지 않는다. 그렇기 때문에 우리는 우리 곁에 &amp;lsquo;최고 이의 제기자(chief challenger officer)&amp;lsquo;를 둬야 한다. 내 의견에 이의를 제기하는 사람 말이다. 리더일수록 더욱 그래야 한다.
에릭 슈밋 구글 회장의 회의 진행 방식도 좋다.</description></item><item><title>(책) 누가 미래를 가질 것인가?</title><link>https://cychong47.github.io/post/2014/nuga-miraereul-gajil-geosinga/</link><pubDate>Sun, 17 Aug 2014 14:29:31 +0900</pubDate><guid>https://cychong47.github.io/post/2014/nuga-miraereul-gajil-geosinga/</guid><description>p19
&amp;lsquo;인생은 해석&amp;rsquo;이라는 말이 있다. 인생을 살면서 많은 사건을 겪게 되는데, 그 사건들을 어떻게 해석하느냐에 따라 삶의 방향이 달라진다는 뜻이다. 마찬가지로 우리가 살고 있는 시대를 명확하게 바라보고 해석할 필요가 있다. 그에 다라 우리가 삶을 사는 방식과 이 사회가 문제에 대처해나가는 방향은 완전히 달라진다.
해석에 따라 어떻게 나에게 의미를 갖는 지가 달라진다.
p109
문제는 목표과 자세다. 성공의 지름길만 걸어가는 왕도는 없다. 오히려 외도를 하면서도, 전혀 다른 커뮤니티에 참여하면서 기회를 포착하기도 한다. 도전을 통해 얻은 시행착오오 처절한 조절도 커리어에는 오히려 큰 도움이 된다.</description></item><item><title>종교의 차별된 사랑</title><link>https://cychong47.github.io/post/2014/jonggyoyi-cabyeoldoen-sarang/</link><pubDate>Sat, 16 Aug 2014 14:30:53 +0900</pubDate><guid>https://cychong47.github.io/post/2014/jonggyoyi-cabyeoldoen-sarang/</guid><description>회사라고 치자. 계열사에 회장이 떴다. 회장이 계열사 직원들로부터 소원수리를 받았다. 심각한 문제다. 그런데 사장들이 뻔히 문제점을 알고 있으면서 무시하고 아무 일도 안하고 있는 거다. 그러면 어떻게 될까?
당장 질책이 떨어지고, 문제의 경중의 따라 사장이 짤릴 수도 있다.
지금 교황이 방한한 일을 그렇게 보면 과대해석일까?
교황은 와서 세월호 등을 포함해 대한민국에서 소외되고 있는 많은 사람들을 만난다. 바쁜 그 며칠간의 일정이 그렇다. 하지만 일년 내내 대한민국에 있는 추기경이라는 사람은 뭐가 그리 바쁜 지 힘없고 고통받는 이들을 외면해 왔다.</description></item><item><title>(책) 스핀 잇</title><link>https://cychong47.github.io/post/2014/seupin-is/</link><pubDate>Fri, 15 Aug 2014 14:58:34 +0900</pubDate><guid>https://cychong47.github.io/post/2014/seupin-is/</guid><description>p76 이 아이디어를 MIT 경영대학원 교수인 Glen Urban에게 가져갔을 때 그는 &amp;ldquo;이 아이디어는 당신이 생각하는 것보다 훨씬 스케일이 크다. 두 배의 속도로 움직이고, 두 배 크게 생각해야 한다&amp;quot;고 조언했다.
&amp;ldquo;이 아이디어는 당신이 생각하는 것보다 훨씬 스케일이 크다. 그러므로 도전하지 말아라&amp;rdquo; 라고 말할 줄 알았는데&amp;hellip;
p85 자포스 CEO 토니. 회사를 판매한 경우 그 돈을 가지고 할 수 있는 일을 나열해 봤더니 대부분의 것들이 회사를 팔지 않고도 할 수 있는 일이 대부분이었다고. 시간이 부족할 뿐.</description></item><item><title>SDN의 진정한 가치</title><link>https://cychong47.github.io/post/2014/sdnyi-jinjeonghan-gaci/</link><pubDate>Fri, 15 Aug 2014 13:04:09 +0900</pubDate><guid>https://cychong47.github.io/post/2014/sdnyi-jinjeonghan-gaci/</guid><description>SDN이 주로 operator 입장에서 비용 절감, 관리 용이, 혁신 용이, 자동화(programmable)의 장점을 이야기하는데 NTT DOCOMO는 실제로 이런 방법을 통해 사용자에게 제공할 수 있는 가치(end-user value)에 대해 이야기한다.
조금 과장하면 앞 선 장점 나열은 비-애플인 듯하고, 후자는 애플의 발표인 듯. 단순히 Operator에게 비용뿐만 아니라 인지도를 올릴 수 있는 방법을 제시한다는 면에서 참 느낌이 다르다.
SDN: Helping Real People in a Real Crisis | 6WIND Blog</description></item><item><title>(책) 화웨이의 위대한 늑대문화</title><link>https://cychong47.github.io/post/2014/hwaweiyi-widaehan-neugdaemunhwa/</link><pubDate>Thu, 14 Aug 2014 14:41:23 +0900</pubDate><guid>https://cychong47.github.io/post/2014/hwaweiyi-widaehan-neugdaemunhwa/</guid><description>화웨이가 어떻게 지금과 같이 세계 2위의 통신업체가 될 수 있었는지 CEO인 런정페이를 중심으로 그 비결을 설명한 책.
늙지 않는 조직을 만들기 위해 끊임없이 노력하고 일괄 사퇴 후 재취업과 같은 극단적인 선택도 마다하지 않은 화웨이. 시스코가 괜히 건드려 무료 홍보해주고(마치 애플이 삼성을 고소해 홍보해 줬다는 것과 유사) 모토롤라가 CEO가 바뀌지 않았으면 화웨이의 시스템 사업을 인수해서 지금의 화웨이가 없었을 텐데. 만일 모토로라가 화웨이의 사업을 인수했다 해도 모토로라의 시스템 사업은 망했을 거라고 생각. 화웨이는 런정페이가 없으면, 혹은 그가 만들어 놓은 문화와 시스템이 동작하지 않으면 다른 회사와 다름이 없으므로.</description></item><item><title>DPI &amp; Traffic analysis in networks based on NFV and SDN</title><link>https://cychong47.github.io/post/2014/dpi-traffic-analysis-in-networks-based-on-nfv-and-sdn/</link><pubDate>Tue, 12 Aug 2014 15:10:23 +0900</pubDate><guid>https://cychong47.github.io/post/2014/dpi-traffic-analysis-in-networks-based-on-nfv-and-sdn/</guid><description>출처 Heavy-ReadingQosmosDPI-SDN-NFVWhite-PaperJan2014.pdf 2014년 1월 전반적인 내용 The largest use case (by number of vendors citing it) is service assurance for QoS/QoE; the second largest is policy control (PCEF), which we believe is the largest use case by volume Half of respondents said that encryption of protocols is reducing the effectiveness of DPI . Packet metric analysis (heuristics) was identified as the main remedy - packet size, spacing, frequency DPI 용도 Service Awarence (QoS, QoE)가 가장 높음(60%) Policy Control(PCEF)도 비슷 3GPP TDF 기능.</description></item><item><title>OpenDataPlane</title><link>https://cychong47.github.io/post/2014/opendataplane/</link><pubDate>Sat, 24 May 2014 14:15:25 +0900</pubDate><guid>https://cychong47.github.io/post/2014/opendataplane/</guid><description>Network 장비를 만드는 방법 중 가장 흔한 방법이 Networking에 최적화된 processor를 제공하는 업체로부터 processor를 구입하고, 그 processor와 함께 제공되는 SDK를 사용하는 것이다. 그러다보니 특정 업체의 processor를 위해 만든 S/W를 다른 processor로 포팅하는 경우 많은 부분을 수정해야 하는 경우가 많다.
당연한 이야기지만, 특정 processor에 종속적인 부분은 해당 processor가 제공하는 H/W accelerator 를 이용하는 코드나 해당 processor의 특성에 맞게 설계된 구조 등이다. 다른 processor로 포팅하는 경우 전자의 경우는 새로운 processor에서 대응되는 API등이 제공되면 비교적 쉽게 변경할 수 있다.</description></item><item><title>Welcome to Ghost</title><link>https://cychong47.github.io/post/2014/welcome-to-ghost-2/</link><pubDate>Sat, 10 May 2014 03:45:21 +0900</pubDate><guid>https://cychong47.github.io/post/2014/welcome-to-ghost-2/</guid><description>You&amp;rsquo;re live! Nice. We&amp;rsquo;ve put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &amp;lt;your blog URL&amp;gt;/ghost/. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</description></item><item><title/><link>https://cychong47.github.io/post/2020/2020-07-01-setup-nginx-with-bitnami-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cychong47.github.io/post/2020/2020-07-01-setup-nginx-with-bitnami-chart/</guid><description>bitnami repo 추가 cychong@mini1:~$ helm repo add bitnami https://charts.bitnami.com/bitnami &amp;#34;bitnami&amp;#34; has been added to your repositories bitnami repo에 있는 chart 확인 cychong@mini1:~$ helm search repo bitnami NAME CHART VERSION	APP VERSION DESCRIPTION bitnami/bitnami-common 0.0.8 0.0.8 Chart with custom templates used in Bitnami cha... bitnami/airflow 6.3.4 1.10.10 Apache Airflow is a platform to programmaticall... bitnami/apache 7.3.18 2.4.43 Chart for Apache HTTP Server bitnami/cassandra 5.5.3 3.11.6 Apache Cassandra is a free and open-source dist.</description></item></channel></rss>